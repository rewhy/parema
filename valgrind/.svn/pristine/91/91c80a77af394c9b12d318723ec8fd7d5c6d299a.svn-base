# Makefile.in generated by automake 1.14.1 from Makefile.am.
# memcheck/tests/solaris/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# This file is used for tool tests, and also in perf/Makefile.am.

# This file should be included (directly or indirectly) by every
# Makefile.am that builds programs.  And also the top-level Makefile.am.

#----------------------------------------------------------------------------
# Global stuff
#----------------------------------------------------------------------------



am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/valgrind
pkgincludedir = $(includedir)/valgrind
pkglibdir = $(libdir)/valgrind
pkglibexecdir = $(libexecdir)/valgrind
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = armv7-unknown-linux-gnu
DIST_COMMON = $(top_srcdir)/Makefile.tool-tests.am \
	$(top_srcdir)/Makefile.all.am $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am $(dist_noinst_SCRIPTS) \
	$(top_srcdir)/depcomp $(noinst_HEADERS)
#am__append_1 = -Wno-cast-align -Wno-self-assign \
#                  -Wno-tautological-compare

#am__append_2 = -Wl,-M,$(top_srcdir)/solaris/vgpreload-solaris.mapfile

# The Android toolchain includes all kinds of stdlib helpers present in
# bionic which is bad because we are not linking with it and the Android
# linker will panic.
am__append_3 = -nostdlib
#am__append_4 = -DVGA_SEC_=1  \
#		-DVGP_SEC_arm_linux=1


# Make sure that all test programs have threaded errno.
#am__append_5 = -D_REENTRANT
#am__append_6 = -Wno-format-extra-args \
#	-Wno-literal-range \
#	-Wno-tautological-constant-out-of-range-compare \
#	-Wno-self-assign -Wno-string-plus-int \
#	-Wno-uninitialized -Wno-unused-value # \
#	clang 3.0.0
#am__append_7 = -Wno-unused-private-field    # drd/tests/tsan_unittest.cpp
check_PROGRAMS = brk$(EXEEXT) context_stack_die$(EXEEXT) \
	door_data$(EXEEXT) door_kill$(EXEEXT) gethrtime$(EXEEXT) \
	inlinfo$(EXEEXT) inlinfo_nested.so$(EXEEXT) ldynsym$(EXEEXT) \
	lsframe1$(EXEEXT) lsframe2$(EXEEXT) mmapobj_bssonly$(EXEEXT) \
	mmapobj_bssonly.so$(EXEEXT) name_service_door$(EXEEXT) \
	pkcs11$(EXEEXT) scalar$(EXEEXT) scalar_ioctl$(EXEEXT) \
	sendfilev$(EXEEXT) shmat$(EXEEXT) strlcpy$(EXEEXT) \
	syscall_at$(EXEEXT) thr_daemon_exit_libc$(EXEEXT) \
	thr_daemon_exit_standalone$(EXEEXT) $(am__EXEEXT_1) \
	$(am__EXEEXT_2) $(am__EXEEXT_3) $(am__EXEEXT_4) \
	$(am__EXEEXT_5) $(am__EXEEXT_6) $(am__EXEEXT_7) \
	$(am__EXEEXT_8) $(am__EXEEXT_9) $(am__EXEEXT_10) \
	$(am__EXEEXT_11) $(am__EXEEXT_12) $(am__EXEEXT_13) \
	$(am__EXEEXT_14) $(am__EXEEXT_15)
#am__append_8 = execx
#am__append_9 = getzoneoffset
#am__append_10 = scalar_obsolete
#am__append_11 = scalar_frealpathat
#am__append_12 = scalar_lwp_name
##am__append_13 = scalar_lwp_sigqueue_pid
#am__append_14 = scalar_lwp_sigqueue
am__append_15 = scalar_lwp_kill
#am__append_16 = scalar_shm_new
#am__append_17 = scalar_spawn spawn
#am__append_18 = scalar_tsol_clearance
#am__append_19 = scalar_utimensat
#am__append_20 = scalar_utimesys
#am__append_21 = scalar_uuidsys
#am__append_22 = scalar_zone_defunct
subdir = memcheck/tests/solaris
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
#am__EXEEXT_1 =  \
#	execx$(EXEEXT)
#am__EXEEXT_2 =  \
#	getzoneoffset$(EXEEXT)
#am__EXEEXT_3 = scalar_obsolete$(EXEEXT)
#am__EXEEXT_4 =  \
#	scalar_frealpathat$(EXEEXT)
#am__EXEEXT_5 =  \
#	scalar_lwp_name$(EXEEXT)
##am__EXEEXT_6 = scalar_lwp_sigqueue_pid$(EXEEXT)
#am__EXEEXT_7 = scalar_lwp_sigqueue$(EXEEXT)
am__EXEEXT_8 =  \
	scalar_lwp_kill$(EXEEXT)
#am__EXEEXT_9 = scalar_shm_new$(EXEEXT)
#am__EXEEXT_10 = scalar_spawn$(EXEEXT) \
#	spawn$(EXEEXT)
#am__EXEEXT_11 =  \
#	scalar_tsol_clearance$(EXEEXT)
#am__EXEEXT_12 =  \
#	scalar_utimensat$(EXEEXT)
#am__EXEEXT_13 =  \
#	scalar_utimesys$(EXEEXT)
#am__EXEEXT_14 = scalar_uuidsys$(EXEEXT)
#am__EXEEXT_15 =  \
#	scalar_zone_defunct$(EXEEXT)
brk_SOURCES = brk.c
brk_OBJECTS = brk.$(OBJEXT)
brk_LDADD = $(LDADD)
context_stack_die_SOURCES = context_stack_die.c
context_stack_die_OBJECTS = context_stack_die.$(OBJEXT)
context_stack_die_LDADD = $(LDADD)
door_data_SOURCES = door_data.c
door_data_OBJECTS = door_data.$(OBJEXT)
door_data_LDADD = $(LDADD)
door_kill_SOURCES = door_kill.c
door_kill_OBJECTS = door_kill.$(OBJEXT)
door_kill_DEPENDENCIES =
execx_SOURCES = execx.c
execx_OBJECTS = execx.$(OBJEXT)
execx_LDADD = $(LDADD)
gethrtime_SOURCES = gethrtime.c
gethrtime_OBJECTS = gethrtime.$(OBJEXT)
gethrtime_LDADD = $(LDADD)
getzoneoffset_SOURCES = getzoneoffset.c
getzoneoffset_OBJECTS = getzoneoffset.$(OBJEXT)
getzoneoffset_LDADD = $(LDADD)
am_inlinfo_OBJECTS = inlinfo.$(OBJEXT)
inlinfo_OBJECTS = $(am_inlinfo_OBJECTS)
inlinfo_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(inlinfo_LDFLAGS) \
	$(LDFLAGS) -o $@
am_inlinfo_nested_so_OBJECTS =  \
	inlinfo_nested_so-inlinfo_nested.$(OBJEXT)
inlinfo_nested_so_OBJECTS = $(am_inlinfo_nested_so_OBJECTS)
inlinfo_nested_so_LDADD = $(LDADD)
inlinfo_nested_so_LINK = $(CCLD) $(inlinfo_nested_so_CFLAGS) $(CFLAGS) \
	$(inlinfo_nested_so_LDFLAGS) $(LDFLAGS) -o $@
ldynsym_SOURCES = ldynsym.c
ldynsym_OBJECTS = ldynsym.$(OBJEXT)
ldynsym_LDADD = $(LDADD)
ldynsym_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(ldynsym_LDFLAGS) \
	$(LDFLAGS) -o $@
lsframe1_SOURCES = lsframe1.c
lsframe1_OBJECTS = lsframe1.$(OBJEXT)
lsframe1_LDADD = $(LDADD)
lsframe2_SOURCES = lsframe2.c
lsframe2_OBJECTS = lsframe2.$(OBJEXT)
lsframe2_LDADD = $(LDADD)
am_mmapobj_bssonly_OBJECTS = mmapobj_bssonly.$(OBJEXT)
mmapobj_bssonly_OBJECTS = $(am_mmapobj_bssonly_OBJECTS)
mmapobj_bssonly_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(mmapobj_bssonly_LDFLAGS) $(LDFLAGS) -o $@
am_mmapobj_bssonly_so_OBJECTS =  \
	mmapobj_bssonly_so-mmapobj_bssonly_lib.$(OBJEXT)
mmapobj_bssonly_so_OBJECTS = $(am_mmapobj_bssonly_so_OBJECTS)
mmapobj_bssonly_so_LDADD = $(LDADD)
mmapobj_bssonly_so_LINK = $(CCLD) $(mmapobj_bssonly_so_CFLAGS) \
	$(CFLAGS) $(mmapobj_bssonly_so_LDFLAGS) $(LDFLAGS) -o $@
name_service_door_SOURCES = name_service_door.c
name_service_door_OBJECTS = name_service_door.$(OBJEXT)
name_service_door_LDADD = $(LDADD)
pkcs11_SOURCES = pkcs11.c
pkcs11_OBJECTS = pkcs11.$(OBJEXT)
pkcs11_DEPENDENCIES =
scalar_SOURCES = scalar.c
scalar_OBJECTS = scalar.$(OBJEXT)
scalar_LDADD = $(LDADD)
scalar_frealpathat_SOURCES = scalar_frealpathat.c
scalar_frealpathat_OBJECTS = scalar_frealpathat.$(OBJEXT)
scalar_frealpathat_LDADD = $(LDADD)
scalar_ioctl_SOURCES = scalar_ioctl.c
scalar_ioctl_OBJECTS = scalar_ioctl.$(OBJEXT)
scalar_ioctl_LDADD = $(LDADD)
scalar_lwp_kill_SOURCES = scalar_lwp_kill.c
scalar_lwp_kill_OBJECTS = scalar_lwp_kill.$(OBJEXT)
scalar_lwp_kill_LDADD = $(LDADD)
scalar_lwp_name_SOURCES = scalar_lwp_name.c
scalar_lwp_name_OBJECTS = scalar_lwp_name.$(OBJEXT)
scalar_lwp_name_LDADD = $(LDADD)
scalar_lwp_sigqueue_SOURCES = scalar_lwp_sigqueue.c
scalar_lwp_sigqueue_OBJECTS = scalar_lwp_sigqueue.$(OBJEXT)
scalar_lwp_sigqueue_LDADD = $(LDADD)
scalar_lwp_sigqueue_pid_SOURCES = scalar_lwp_sigqueue_pid.c
scalar_lwp_sigqueue_pid_OBJECTS = scalar_lwp_sigqueue_pid.$(OBJEXT)
scalar_lwp_sigqueue_pid_LDADD = $(LDADD)
scalar_obsolete_SOURCES = scalar_obsolete.c
scalar_obsolete_OBJECTS = scalar_obsolete.$(OBJEXT)
scalar_obsolete_LDADD = $(LDADD)
scalar_shm_new_SOURCES = scalar_shm_new.c
scalar_shm_new_OBJECTS = scalar_shm_new.$(OBJEXT)
scalar_shm_new_LDADD = $(LDADD)
scalar_spawn_SOURCES = scalar_spawn.c
scalar_spawn_OBJECTS = scalar_spawn.$(OBJEXT)
scalar_spawn_LDADD = $(LDADD)
scalar_tsol_clearance_SOURCES = scalar_tsol_clearance.c
scalar_tsol_clearance_OBJECTS = scalar_tsol_clearance.$(OBJEXT)
scalar_tsol_clearance_DEPENDENCIES =
scalar_utimensat_SOURCES = scalar_utimensat.c
scalar_utimensat_OBJECTS = scalar_utimensat.$(OBJEXT)
scalar_utimensat_LDADD = $(LDADD)
scalar_utimesys_SOURCES = scalar_utimesys.c
scalar_utimesys_OBJECTS = scalar_utimesys.$(OBJEXT)
scalar_utimesys_LDADD = $(LDADD)
scalar_uuidsys_SOURCES = scalar_uuidsys.c
scalar_uuidsys_OBJECTS = scalar_uuidsys.$(OBJEXT)
scalar_uuidsys_LDADD = $(LDADD)
scalar_zone_defunct_SOURCES = scalar_zone_defunct.c
scalar_zone_defunct_OBJECTS = scalar_zone_defunct.$(OBJEXT)
scalar_zone_defunct_LDADD = $(LDADD)
sendfilev_SOURCES = sendfilev.c
sendfilev_OBJECTS = sendfilev.$(OBJEXT)
sendfilev_DEPENDENCIES =
shmat_SOURCES = shmat.c
shmat_OBJECTS = shmat.$(OBJEXT)
shmat_LDADD = $(LDADD)
spawn_SOURCES = spawn.c
spawn_OBJECTS = spawn.$(OBJEXT)
spawn_LDADD = $(LDADD)
strlcpy_SOURCES = strlcpy.c
strlcpy_OBJECTS = strlcpy.$(OBJEXT)
strlcpy_LDADD = $(LDADD)
syscall_at_SOURCES = syscall_at.c
syscall_at_OBJECTS = syscall_at.$(OBJEXT)
syscall_at_LDADD = $(LDADD)
thr_daemon_exit_libc_SOURCES = thr_daemon_exit_libc.c
thr_daemon_exit_libc_OBJECTS = thr_daemon_exit_libc.$(OBJEXT)
thr_daemon_exit_libc_LDADD = $(LDADD)
thr_daemon_exit_standalone_SOURCES = thr_daemon_exit_standalone.c
thr_daemon_exit_standalone_OBJECTS =  \
	thr_daemon_exit_standalone.$(OBJEXT)
thr_daemon_exit_standalone_LDADD = $(LDADD)
thr_daemon_exit_standalone_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(thr_daemon_exit_standalone_LDFLAGS) $(LDFLAGS) -o $@
SCRIPTS = $(dist_noinst_SCRIPTS)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = brk.c context_stack_die.c door_data.c door_kill.c execx.c \
	gethrtime.c getzoneoffset.c $(inlinfo_SOURCES) \
	$(inlinfo_nested_so_SOURCES) ldynsym.c lsframe1.c lsframe2.c \
	$(mmapobj_bssonly_SOURCES) $(mmapobj_bssonly_so_SOURCES) \
	name_service_door.c pkcs11.c scalar.c scalar_frealpathat.c \
	scalar_ioctl.c scalar_lwp_kill.c scalar_lwp_name.c \
	scalar_lwp_sigqueue.c scalar_lwp_sigqueue_pid.c \
	scalar_obsolete.c scalar_shm_new.c scalar_spawn.c \
	scalar_tsol_clearance.c scalar_utimensat.c scalar_utimesys.c \
	scalar_uuidsys.c scalar_zone_defunct.c sendfilev.c shmat.c \
	spawn.c strlcpy.c syscall_at.c thr_daemon_exit_libc.c \
	thr_daemon_exit_standalone.c
DIST_SOURCES = brk.c context_stack_die.c door_data.c door_kill.c \
	execx.c gethrtime.c getzoneoffset.c $(inlinfo_SOURCES) \
	$(inlinfo_nested_so_SOURCES) ldynsym.c lsframe1.c lsframe2.c \
	$(mmapobj_bssonly_SOURCES) $(mmapobj_bssonly_so_SOURCES) \
	name_service_door.c pkcs11.c scalar.c scalar_frealpathat.c \
	scalar_ioctl.c scalar_lwp_kill.c scalar_lwp_name.c \
	scalar_lwp_sigqueue.c scalar_lwp_sigqueue_pid.c \
	scalar_obsolete.c scalar_shm_new.c scalar_spawn.c \
	scalar_tsol_clearance.c scalar_utimensat.c scalar_utimesys.c \
	scalar_uuidsys.c scalar_zone_defunct.c sendfilev.c shmat.c \
	spawn.c strlcpy.c syscall_at.c thr_daemon_exit_libc.c \
	thr_daemon_exit_standalone.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing aclocal-1.14
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar
AUTOCONF = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing autoconf
AUTOHEADER = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing autoheader
AUTOMAKE = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing automake-1.14
AWK = gawk
BOOST_CFLAGS = 
BOOST_LIBS = 
CC = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
CCAS = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm
CCDEPMODE = depmode=gcc3
CFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm
CFLAGS_MPI = -g -O -fno-omit-frame-pointer -Wall -fpic
CPP = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc -E
CPPFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm -DANDROID_HARDWARE_NEXUS_5
CXX = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEFAULT_SUPP = exp-sgcheck.supp xfree-3.supp xfree-4.supp bionic.supp 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DIFF = diff -u
DIS_PATH = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FLAG_FNO_IPA_ICF = 
FLAG_FNO_STACK_PROTECTOR = -fno-stack-protector
FLAG_FSANITIZE = 
FLAG_M32 = 
FLAG_M64 = 
FLAG_MIPS32 = 
FLAG_MIPS64 = 
FLAG_MLONG_DOUBLE_128 = -mlong-double-128
FLAG_MMMX = 
FLAG_MSSE = 
FLAG_NO_BUILD_ID = 
FLAG_OCTEON = 
FLAG_OCTEON2 = 
FLAG_T_TEXT = -Ttext-segment
FLAG_UNLIMITED_INLINE_UNIT_GROWTH = --param inline-unit-growth=900
FLAG_W_CAST_ALIGN = 
FLAG_W_CAST_QUAL = -Wcast-qual
FLAG_W_EMPTY_BODY = -Wempty-body
FLAG_W_EXTRA = -Wextra
FLAG_W_FORMAT = -Wformat
FLAG_W_FORMAT_SECURITY = -Wformat-security
FLAG_W_FORMAT_SIGNEDNESS = 
FLAG_W_IGNORED_QUALIFIERS = -Wignored-qualifiers
FLAG_W_MISSING_PARAMETER_TYPE = -Wmissing-parameter-type
FLAG_W_NO_INFINITE_RECURSION = 
FLAG_W_NO_MEMSET_TRANSPOSED_ARGS = 
FLAG_W_NO_MISMATCHED_NEW_DELETE = 
FLAG_W_NO_NONNULL = -Wno-nonnull
FLAG_W_NO_OVERFLOW = -Wno-overflow
FLAG_W_NO_POINTER_SIGN = -Wno-pointer-sign
FLAG_W_NO_STATIC_LOCAL_IN_INLINE = 
FLAG_W_NO_UNINITIALIZED = -Wno-uninitialized
FLAG_W_NO_UNUSED_FUNCTION = -Wno-unused-function
FLAG_W_OLD_STYLE_DECLARATION = -Wold-style-declaration
FLAG_W_WRITE_STRINGS = -Wwrite-strings
GDB = /usr/bin/gdb
GLIBC_VERSION = bionic
GREP = /bin/grep
HWCAP_HAS_ALTIVEC = 
HWCAP_HAS_DFP = 
HWCAP_HAS_HTM = 
HWCAP_HAS_ISA_2_05 = 
HWCAP_HAS_ISA_2_06 = 
HWCAP_HAS_ISA_2_07 = 
HWCAP_HAS_VSX = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LDFLAGS_MPI = -fpic -shared
LIBOBJS =  ${LIBOBJDIR}memcmp$U.o
LIBS = 
LIB_UBSAN = 
LN_S = ln -s
LTLIBOBJS =  ${LIBOBJDIR}memcmp$U.lo
MAINT = #
MAKEINFO = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing makeinfo
MKDIR_P = /bin/mkdir -p
MPI_CC = /usr/bin/mpicc
OBJEXT = o
PACKAGE = valgrind
PACKAGE_BUGREPORT = valgrind-users@lists.sourceforge.net
PACKAGE_NAME = Valgrind
PACKAGE_STRING = Valgrind 3.11.0
PACKAGE_TARNAME = valgrind
PACKAGE_URL = 
PACKAGE_VERSION = 3.11.0
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PREFERRED_STACK_BOUNDARY_2 = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VALT_LOAD_ADDRESS_PRI = 0x38000000
VALT_LOAD_ADDRESS_SEC = 0xUNSET
VERSION = 3.11.0
VGCONF_ARCH_PRI = arm
VGCONF_ARCH_SEC = 
VGCONF_OS = linux
VGCONF_PLATFORM_PRI_CAPS = ARM_LINUX
VGCONF_PLATFORM_SEC_CAPS = 
VGCONF_PLATVARIANT = android
VG_TMPDIR = /sdcard 
abs_builddir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/memcheck/tests/solaris
abs_srcdir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/memcheck/tests/solaris
abs_top_builddir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind
abs_top_srcdir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind
ac_ct_CC = 
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = armv7-unknown-linux-gnu
host_alias = armv7-unknown-linux
host_cpu = armv7
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /data/local/tmp/Inst
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = armv7-unknown-linux
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
inplacedir = $(top_builddir)/.in_place

#----------------------------------------------------------------------------
# Flags
#----------------------------------------------------------------------------

# Baseline flags for all compilations.  Aim here is to maximise
# performance and get whatever useful warnings we can out of gcc.
# -fno-builtin is important for defeating LLVM's idiom recognition
# that somehow causes VG_(memset) to get into infinite recursion.
AM_CFLAGS_BASE = -O2 -g -std=gnu99 -Wall -Wmissing-prototypes -Wshadow \
	-Wpointer-arith -Wstrict-prototypes -Wmissing-declarations \
	 -Wcast-qual -Wwrite-strings \
	-Wempty-body -Wformat  \
	-Wformat-security -Wignored-qualifiers \
	-Wmissing-parameter-type -Wold-style-declaration \
	-fno-stack-protector  \
	-fno-strict-aliasing -fno-builtin $(am__append_1)
AM_CFLAGS_PSO_BASE = -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
		     -fpic -fno-builtin 


# These flags are used for building the preload shared objects (PSOs).
# The aim is to give reasonable performance but also to have good
# stack traces, since users often see stack traces extending 
# into (and through) the preloads.  Also, we must use any
# -mpreferred-stack-boundary flag to build the preload shared
# objects, since that risks misaligning the client's stack and
# results in segfaults like (eg) #324050.
#AM_CFLAGS_PSO_BASE = -dynamic \
#		     -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
#		     -fpic -fPIC -fno-builtin 


# Flags for specific targets.
#
# Nb: the AM_CPPFLAGS_* values are suitable for building tools and auxprogs.
# For building the core, coregrind/Makefile.am files add some extra things.
AM_CPPFLAGS_ARM_LINUX = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/VEX/pub \
	-I$(top_builddir)/VEX/pub \
	-DVGA_arm=1 \
	-DVGO_linux=1 \
	-DVGP_arm_linux=1 \
	-DVGPV_arm_linux_android=1

#AM_CPPFLAGS_ = \
#	-I$(top_srcdir) \
#	-I$(top_srcdir)/include \
#	-I$(top_srcdir)/VEX/pub \
#	-I$(top_builddir)/VEX/pub \
#	-DVGA_=1 \
#	-DVGO_linux=1 \
#	-DVGP__linux=1 \
#	-DVGPV__linux_android=1

AM_FLAG_M3264_X86_LINUX = 
AM_CFLAGS_X86_LINUX =   \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_LINUX =  -g
AM_FLAG_M3264_AMD64_LINUX = 
AM_CFLAGS_AMD64_LINUX =  \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_LINUX =  -g
AM_FLAG_M3264_PPC32_LINUX = 
AM_CFLAGS_PPC32_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC32_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC32_LINUX =  -g
AM_FLAG_M3264_PPC64BE_LINUX = 
AM_CFLAGS_PPC64BE_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC64BE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64BE_LINUX =  -g
AM_FLAG_M3264_PPC64LE_LINUX = 
AM_CFLAGS_PPC64LE_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC64LE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64LE_LINUX =  -g
AM_FLAG_M3264_ARM_LINUX = 
AM_CFLAGS_ARM_LINUX =  \
			 	$(AM_CFLAGS_BASE) -marm -mcpu=cortex-a8

AM_CFLAGS_PSO_ARM_LINUX =  $(AM_CFLAGS_BASE) \
				-marm -mcpu=cortex-a8 $(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_ARM_LINUX =  \
				-marm -mcpu=cortex-a8 -g

AM_FLAG_M3264_ARM64_LINUX = 
AM_CFLAGS_ARM64_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_ARM64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_ARM64_LINUX =  -g
AM_FLAG_M3264_X86_DARWIN = -arch i386
AM_CFLAGS_X86_DARWIN = $(WERROR) -arch i386 $(AM_CFLAGS_BASE) \
				-mmacosx-version-min=10.5 \
				-fno-stack-protector -fno-pic -fno-PIC

AM_CFLAGS_PSO_X86_DARWIN = $(AM_CFLAGS_X86_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_DARWIN = -arch i386 -g
AM_FLAG_M3264_AMD64_DARWIN = -arch x86_64
AM_CFLAGS_AMD64_DARWIN = $(WERROR) -arch x86_64 $(AM_CFLAGS_BASE) \
			    -mmacosx-version-min=10.5 -fno-stack-protector

AM_CFLAGS_PSO_AMD64_DARWIN = $(AM_CFLAGS_AMD64_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_DARWIN = -arch x86_64 -g
AM_FLAG_M3264_S390X_LINUX = 
AM_CFLAGS_S390X_LINUX =  $(AM_CFLAGS_BASE) -fomit-frame-pointer
AM_CFLAGS_PSO_S390X_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_S390X_LINUX =  -g -mzarch -march=z900
AM_FLAG_M3264_MIPS32_LINUX = 
AM_CFLAGS_MIPS32_LINUX =  $(AM_CFLAGS_BASE) 
AM_CFLAGS_PSO_MIPS32_LINUX =  $(AM_CFLAGS_BASE)  \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS32_LINUX =  -g 
AM_FLAG_M3264_MIPS64_LINUX = 
AM_CFLAGS_MIPS64_LINUX =  $(AM_CFLAGS_BASE) 
AM_CFLAGS_PSO_MIPS64_LINUX =  $(AM_CFLAGS_BASE)  \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS64_LINUX =  -g 
AM_CFLAGS_TILEGX_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_TILEGX_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_FLAG_M3264_X86_SOLARIS = 
AM_CFLAGS_X86_SOLARIS =   \
			 	$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_SOLARIS =  -g -D_ASM
AM_FLAG_M3264_AMD64_SOLARIS = 
AM_CFLAGS_AMD64_SOLARIS =  \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_SOLARIS =  -g -D_ASM

# Flags for the primary target.  These must be used to build the
# regtests and performance tests.  In fact, these must be used to
# build anything which is built only once on a dual-arch build.
#
AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_ARM_LINUX)
AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_ARM_LINUX)
AM_CFLAGS_PRI = $(AM_CFLAGS_ARM_LINUX)
AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_ARM_LINUX)
AM_FLAG_M3264_SEC = 
#AM_FLAG_M3264_SEC = $(AM_FLAG_M3264_)

# Baseline link flags for making vgpreload shared objects.
#
PRELOAD_LDFLAGS_COMMON_LINUX = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_3)
PRELOAD_LDFLAGS_COMMON_DARWIN = -dynamic -dynamiclib -all_load
PRELOAD_LDFLAGS_COMMON_SOLARIS = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_2)
PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC64BE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC64LE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_ARM_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_ARM64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_X86_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch i386
PRELOAD_LDFLAGS_AMD64_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch x86_64
PRELOAD_LDFLAGS_S390X_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_MIPS32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_MIPS64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_TILEGX_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_X86_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) 
PRELOAD_LDFLAGS_AMD64_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) 
AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/include \
	-I$(top_srcdir)/coregrind -I$(top_builddir)/include \
	-I$(top_srcdir)/VEX/pub -I$(top_builddir)/VEX/pub \
	-DVGA_arm=1 -DVGO_linux=1 \
	-DVGP_arm_linux=1 \
	-DVGPV_arm_linux_android=1 \
	$(am__append_4)

# Nb: Tools need to augment these flags with an arch-selection option, such
# as $(AM_FLAG_M3264_PRI).
AM_CFLAGS = -Winline -Wall -Wshadow -Wno-long-long -g \
	-fno-stack-protector $(am__append_5) $(am__append_6) \
	$(AM_FLAG_M3264_PRI)
AM_CXXFLAGS = -Winline -Wall -Wshadow -Wno-long-long -g \
	-fno-stack-protector $(am__append_7) \
	$(AM_FLAG_M3264_PRI)
# Include AM_CPPFLAGS in AM_CCASFLAGS to allow for older versions of
# automake;  see comments in Makefile.all.am for more detail.
AM_CCASFLAGS = $(AM_CPPFLAGS)
#noinst_DSYMS = $(check_PROGRAMS)
dist_noinst_SCRIPTS = \
	filter_ldynsym \
	filter_name_service_door \
	filter_scalar \
	filter_sendfilev \
	filter_stderr \
	filter_syscall_at

noinst_HEADERS = scalar.h
EXTRA_DIST = \
	brk.stderr.exp brk.stdout.exp brk.vgtest \
	context_stack_die.stderr.exp context_stack_die.stdout.exp context_stack_die.vgtest \
	door_data.stderr.exp door_data.stdout.exp door_data.vgtest \
	door_kill.stderr.exp door_kill.stdout.exp door_kill.vgtest \
	execx.stderr.exp execx.stdout.exp execx.vgtest \
	getzoneoffset.stderr.exp getzoneoffset.vgtest \
	gethrtime.stderr.exp gethrtime.stdout.exp gethrtime.vgtest \
	ldynsym.stderr.exp ldynsym.stdout.exp ldynsym.vgtest \
	lsframe1.stderr.exp lsframe1.stdout.exp lsframe1.vgtest \
	lsframe2.stderr.exp lsframe2.stdout.exp lsframe2.vgtest \
	mmapobj_bssonly.stderr.exp mmapobj_bssonly.stdout.exp mmapobj_bssonly.vgtest \
	name_service_door.stderr.exp-amd64 name_service_door.stderr.exp-x86 \
	name_service_door.stdout.exp name_service_door.vgtest \
	pkcs11.stderr.exp-illumos pkcs11.stderr.exp-solaris pkcs11.stdout.exp pkcs11.vgtest \
	scalar.stderr.exp scalar.stdout.exp scalar.vgtest \
	scalar_frealpathat.stderr.exp scalar_frealpathat.stdout.exp scalar_frealpathat.vgtest \
	scalar_ioctl.stderr.exp scalar_ioctl.stdout.exp scalar_ioctl.vgtest \
	scalar_lwp_kill.stderr.exp scalar_lwp_kill.stdout.exp scalar_lwp_kill.vgtest \
	scalar_lwp_name.stderr.exp scalar_lwp_name.stdout.exp scalar_lwp_name.vgtest \
	scalar_lwp_sigqueue.stderr.exp scalar_lwp_sigqueue.stdout.exp scalar_lwp_sigqueue.vgtest \
	scalar_lwp_sigqueue_pid.stderr.exp scalar_lwp_sigqueue_pid.vgtest \
	scalar_obsolete.stderr.exp scalar_obsolete.stdout.exp scalar_obsolete.vgtest \
	scalar_shm_new.stderr.exp scalar_shm_new.stdout.exp scalar_shm_new.vgtest \
	scalar_spawn.stderr.exp scalar_spawn.stdout.exp scalar_spawn.vgtest \
	scalar_tsol_clearance.stderr.exp scalar_tsol_clearance.vgtest \
	scalar_utimensat.stderr.exp scalar_utimensat.stdout.exp scalar_utimensat.vgtest \
	scalar_utimesys.stderr.exp scalar_utimesys.stdout.exp scalar_utimesys.vgtest \
	scalar_uuidsys.stderr.exp scalar_uuidsys.stdout.exp scalar_uuidsys.vgtest \
	scalar_zone_defunct.stderr.exp scalar_zone_defunct.stdout.exp scalar_zone_defunct.vgtest \
	sendfilev.stderr.exp sendfilev.stdout.exp sendfilev.vgtest \
	shmat.stderr.exp shmat.stdout.exp shmat.vgtest \
	spawn.stderr.exp spawn.stdout.exp spawn.vgtest \
	strlcpy.stderr.exp strlcpy.stdout.exp strlcpy.vgtest \
	supponlyobj.stderr.exp supponlyobj.supp supponlyobj.vgtest \
	syscall_at.stderr.exp syscall_at.stdout.exp syscall_at.vgtest \
	thr_daemon_exit_libc.stderr.exp thr_daemon_exit_libc.stdout.exp thr_daemon_exit_libc.vgtest \
	thr_daemon_exit_standalone.stderr.exp thr_daemon_exit_standalone.stdout.exp thr_daemon_exit_standalone.vgtest

#scalar_tsol_clearance_LDADD = -ltsol
door_kill_LDADD = -lpthread
ldynsym_LDFLAGS = -Wl,--strip-all
pkcs11_LDADD = -lpkcs11
sendfilev_LDADD = -lsendfile
inlinfo_SOURCES = inlinfo.c
inlinfo_DEPENDENCIES = inlinfo_nested.so
inlinfo_LDFLAGS = -Wl,-rpath,$(top_builddir)/memcheck/tests/solaris
inlinfo_LDADD = inlinfo_nested.so
inlinfo_nested_so_SOURCES = inlinfo_nested.c
inlinfo_nested_so_CFLAGS = $(AM_CFLAGS) -fPIC
inlinfo_nested_so_LDFLAGS = -Wl,-rpath,$(top_builddir)/memcheck/tests/solaris -shared -fPIC
mmapobj_bssonly_SOURCES = mmapobj_bssonly.c
mmapobj_bssonly_DEPENDENCIES = mmapobj_bssonly.so
mmapobj_bssonly_LDFLAGS = -Wl,-rpath,$(top_builddir)/memcheck/tests/solaris
mmapobj_bssonly_LDADD = mmapobj_bssonly.so
mmapobj_bssonly_so_SOURCES = mmapobj_bssonly_lib.c
mmapobj_bssonly_so_CFLAGS = $(AM_CFLAGS) -fPIC
mmapobj_bssonly_so_LDFLAGS = -nostartfiles -nodefaultlibs -shared
thr_daemon_exit_standalone_LDFLAGS = -nostartfiles -nodefaultlibs
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign memcheck/tests/solaris/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign memcheck/tests/solaris/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

brk$(EXEEXT): $(brk_OBJECTS) $(brk_DEPENDENCIES) $(EXTRA_brk_DEPENDENCIES) 
	@rm -f brk$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(brk_OBJECTS) $(brk_LDADD) $(LIBS)

context_stack_die$(EXEEXT): $(context_stack_die_OBJECTS) $(context_stack_die_DEPENDENCIES) $(EXTRA_context_stack_die_DEPENDENCIES) 
	@rm -f context_stack_die$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(context_stack_die_OBJECTS) $(context_stack_die_LDADD) $(LIBS)

door_data$(EXEEXT): $(door_data_OBJECTS) $(door_data_DEPENDENCIES) $(EXTRA_door_data_DEPENDENCIES) 
	@rm -f door_data$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(door_data_OBJECTS) $(door_data_LDADD) $(LIBS)

door_kill$(EXEEXT): $(door_kill_OBJECTS) $(door_kill_DEPENDENCIES) $(EXTRA_door_kill_DEPENDENCIES) 
	@rm -f door_kill$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(door_kill_OBJECTS) $(door_kill_LDADD) $(LIBS)

execx$(EXEEXT): $(execx_OBJECTS) $(execx_DEPENDENCIES) $(EXTRA_execx_DEPENDENCIES) 
	@rm -f execx$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(execx_OBJECTS) $(execx_LDADD) $(LIBS)

gethrtime$(EXEEXT): $(gethrtime_OBJECTS) $(gethrtime_DEPENDENCIES) $(EXTRA_gethrtime_DEPENDENCIES) 
	@rm -f gethrtime$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(gethrtime_OBJECTS) $(gethrtime_LDADD) $(LIBS)

getzoneoffset$(EXEEXT): $(getzoneoffset_OBJECTS) $(getzoneoffset_DEPENDENCIES) $(EXTRA_getzoneoffset_DEPENDENCIES) 
	@rm -f getzoneoffset$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(getzoneoffset_OBJECTS) $(getzoneoffset_LDADD) $(LIBS)

inlinfo$(EXEEXT): $(inlinfo_OBJECTS) $(inlinfo_DEPENDENCIES) $(EXTRA_inlinfo_DEPENDENCIES) 
	@rm -f inlinfo$(EXEEXT)
	$(AM_V_CCLD)$(inlinfo_LINK) $(inlinfo_OBJECTS) $(inlinfo_LDADD) $(LIBS)

inlinfo_nested.so$(EXEEXT): $(inlinfo_nested_so_OBJECTS) $(inlinfo_nested_so_DEPENDENCIES) $(EXTRA_inlinfo_nested_so_DEPENDENCIES) 
	@rm -f inlinfo_nested.so$(EXEEXT)
	$(AM_V_CCLD)$(inlinfo_nested_so_LINK) $(inlinfo_nested_so_OBJECTS) $(inlinfo_nested_so_LDADD) $(LIBS)

ldynsym$(EXEEXT): $(ldynsym_OBJECTS) $(ldynsym_DEPENDENCIES) $(EXTRA_ldynsym_DEPENDENCIES) 
	@rm -f ldynsym$(EXEEXT)
	$(AM_V_CCLD)$(ldynsym_LINK) $(ldynsym_OBJECTS) $(ldynsym_LDADD) $(LIBS)

lsframe1$(EXEEXT): $(lsframe1_OBJECTS) $(lsframe1_DEPENDENCIES) $(EXTRA_lsframe1_DEPENDENCIES) 
	@rm -f lsframe1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(lsframe1_OBJECTS) $(lsframe1_LDADD) $(LIBS)

lsframe2$(EXEEXT): $(lsframe2_OBJECTS) $(lsframe2_DEPENDENCIES) $(EXTRA_lsframe2_DEPENDENCIES) 
	@rm -f lsframe2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(lsframe2_OBJECTS) $(lsframe2_LDADD) $(LIBS)

mmapobj_bssonly$(EXEEXT): $(mmapobj_bssonly_OBJECTS) $(mmapobj_bssonly_DEPENDENCIES) $(EXTRA_mmapobj_bssonly_DEPENDENCIES) 
	@rm -f mmapobj_bssonly$(EXEEXT)
	$(AM_V_CCLD)$(mmapobj_bssonly_LINK) $(mmapobj_bssonly_OBJECTS) $(mmapobj_bssonly_LDADD) $(LIBS)

mmapobj_bssonly.so$(EXEEXT): $(mmapobj_bssonly_so_OBJECTS) $(mmapobj_bssonly_so_DEPENDENCIES) $(EXTRA_mmapobj_bssonly_so_DEPENDENCIES) 
	@rm -f mmapobj_bssonly.so$(EXEEXT)
	$(AM_V_CCLD)$(mmapobj_bssonly_so_LINK) $(mmapobj_bssonly_so_OBJECTS) $(mmapobj_bssonly_so_LDADD) $(LIBS)

name_service_door$(EXEEXT): $(name_service_door_OBJECTS) $(name_service_door_DEPENDENCIES) $(EXTRA_name_service_door_DEPENDENCIES) 
	@rm -f name_service_door$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(name_service_door_OBJECTS) $(name_service_door_LDADD) $(LIBS)

pkcs11$(EXEEXT): $(pkcs11_OBJECTS) $(pkcs11_DEPENDENCIES) $(EXTRA_pkcs11_DEPENDENCIES) 
	@rm -f pkcs11$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pkcs11_OBJECTS) $(pkcs11_LDADD) $(LIBS)

scalar$(EXEEXT): $(scalar_OBJECTS) $(scalar_DEPENDENCIES) $(EXTRA_scalar_DEPENDENCIES) 
	@rm -f scalar$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_OBJECTS) $(scalar_LDADD) $(LIBS)

scalar_frealpathat$(EXEEXT): $(scalar_frealpathat_OBJECTS) $(scalar_frealpathat_DEPENDENCIES) $(EXTRA_scalar_frealpathat_DEPENDENCIES) 
	@rm -f scalar_frealpathat$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_frealpathat_OBJECTS) $(scalar_frealpathat_LDADD) $(LIBS)

scalar_ioctl$(EXEEXT): $(scalar_ioctl_OBJECTS) $(scalar_ioctl_DEPENDENCIES) $(EXTRA_scalar_ioctl_DEPENDENCIES) 
	@rm -f scalar_ioctl$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_ioctl_OBJECTS) $(scalar_ioctl_LDADD) $(LIBS)

scalar_lwp_kill$(EXEEXT): $(scalar_lwp_kill_OBJECTS) $(scalar_lwp_kill_DEPENDENCIES) $(EXTRA_scalar_lwp_kill_DEPENDENCIES) 
	@rm -f scalar_lwp_kill$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_lwp_kill_OBJECTS) $(scalar_lwp_kill_LDADD) $(LIBS)

scalar_lwp_name$(EXEEXT): $(scalar_lwp_name_OBJECTS) $(scalar_lwp_name_DEPENDENCIES) $(EXTRA_scalar_lwp_name_DEPENDENCIES) 
	@rm -f scalar_lwp_name$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_lwp_name_OBJECTS) $(scalar_lwp_name_LDADD) $(LIBS)

scalar_lwp_sigqueue$(EXEEXT): $(scalar_lwp_sigqueue_OBJECTS) $(scalar_lwp_sigqueue_DEPENDENCIES) $(EXTRA_scalar_lwp_sigqueue_DEPENDENCIES) 
	@rm -f scalar_lwp_sigqueue$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_lwp_sigqueue_OBJECTS) $(scalar_lwp_sigqueue_LDADD) $(LIBS)

scalar_lwp_sigqueue_pid$(EXEEXT): $(scalar_lwp_sigqueue_pid_OBJECTS) $(scalar_lwp_sigqueue_pid_DEPENDENCIES) $(EXTRA_scalar_lwp_sigqueue_pid_DEPENDENCIES) 
	@rm -f scalar_lwp_sigqueue_pid$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_lwp_sigqueue_pid_OBJECTS) $(scalar_lwp_sigqueue_pid_LDADD) $(LIBS)

scalar_obsolete$(EXEEXT): $(scalar_obsolete_OBJECTS) $(scalar_obsolete_DEPENDENCIES) $(EXTRA_scalar_obsolete_DEPENDENCIES) 
	@rm -f scalar_obsolete$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_obsolete_OBJECTS) $(scalar_obsolete_LDADD) $(LIBS)

scalar_shm_new$(EXEEXT): $(scalar_shm_new_OBJECTS) $(scalar_shm_new_DEPENDENCIES) $(EXTRA_scalar_shm_new_DEPENDENCIES) 
	@rm -f scalar_shm_new$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_shm_new_OBJECTS) $(scalar_shm_new_LDADD) $(LIBS)

scalar_spawn$(EXEEXT): $(scalar_spawn_OBJECTS) $(scalar_spawn_DEPENDENCIES) $(EXTRA_scalar_spawn_DEPENDENCIES) 
	@rm -f scalar_spawn$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_spawn_OBJECTS) $(scalar_spawn_LDADD) $(LIBS)

scalar_tsol_clearance$(EXEEXT): $(scalar_tsol_clearance_OBJECTS) $(scalar_tsol_clearance_DEPENDENCIES) $(EXTRA_scalar_tsol_clearance_DEPENDENCIES) 
	@rm -f scalar_tsol_clearance$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_tsol_clearance_OBJECTS) $(scalar_tsol_clearance_LDADD) $(LIBS)

scalar_utimensat$(EXEEXT): $(scalar_utimensat_OBJECTS) $(scalar_utimensat_DEPENDENCIES) $(EXTRA_scalar_utimensat_DEPENDENCIES) 
	@rm -f scalar_utimensat$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_utimensat_OBJECTS) $(scalar_utimensat_LDADD) $(LIBS)

scalar_utimesys$(EXEEXT): $(scalar_utimesys_OBJECTS) $(scalar_utimesys_DEPENDENCIES) $(EXTRA_scalar_utimesys_DEPENDENCIES) 
	@rm -f scalar_utimesys$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_utimesys_OBJECTS) $(scalar_utimesys_LDADD) $(LIBS)

scalar_uuidsys$(EXEEXT): $(scalar_uuidsys_OBJECTS) $(scalar_uuidsys_DEPENDENCIES) $(EXTRA_scalar_uuidsys_DEPENDENCIES) 
	@rm -f scalar_uuidsys$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_uuidsys_OBJECTS) $(scalar_uuidsys_LDADD) $(LIBS)

scalar_zone_defunct$(EXEEXT): $(scalar_zone_defunct_OBJECTS) $(scalar_zone_defunct_DEPENDENCIES) $(EXTRA_scalar_zone_defunct_DEPENDENCIES) 
	@rm -f scalar_zone_defunct$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(scalar_zone_defunct_OBJECTS) $(scalar_zone_defunct_LDADD) $(LIBS)

sendfilev$(EXEEXT): $(sendfilev_OBJECTS) $(sendfilev_DEPENDENCIES) $(EXTRA_sendfilev_DEPENDENCIES) 
	@rm -f sendfilev$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(sendfilev_OBJECTS) $(sendfilev_LDADD) $(LIBS)

shmat$(EXEEXT): $(shmat_OBJECTS) $(shmat_DEPENDENCIES) $(EXTRA_shmat_DEPENDENCIES) 
	@rm -f shmat$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(shmat_OBJECTS) $(shmat_LDADD) $(LIBS)

spawn$(EXEEXT): $(spawn_OBJECTS) $(spawn_DEPENDENCIES) $(EXTRA_spawn_DEPENDENCIES) 
	@rm -f spawn$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(spawn_OBJECTS) $(spawn_LDADD) $(LIBS)

strlcpy$(EXEEXT): $(strlcpy_OBJECTS) $(strlcpy_DEPENDENCIES) $(EXTRA_strlcpy_DEPENDENCIES) 
	@rm -f strlcpy$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(strlcpy_OBJECTS) $(strlcpy_LDADD) $(LIBS)

syscall_at$(EXEEXT): $(syscall_at_OBJECTS) $(syscall_at_DEPENDENCIES) $(EXTRA_syscall_at_DEPENDENCIES) 
	@rm -f syscall_at$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(syscall_at_OBJECTS) $(syscall_at_LDADD) $(LIBS)

thr_daemon_exit_libc$(EXEEXT): $(thr_daemon_exit_libc_OBJECTS) $(thr_daemon_exit_libc_DEPENDENCIES) $(EXTRA_thr_daemon_exit_libc_DEPENDENCIES) 
	@rm -f thr_daemon_exit_libc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(thr_daemon_exit_libc_OBJECTS) $(thr_daemon_exit_libc_LDADD) $(LIBS)

thr_daemon_exit_standalone$(EXEEXT): $(thr_daemon_exit_standalone_OBJECTS) $(thr_daemon_exit_standalone_DEPENDENCIES) $(EXTRA_thr_daemon_exit_standalone_DEPENDENCIES) 
	@rm -f thr_daemon_exit_standalone$(EXEEXT)
	$(AM_V_CCLD)$(thr_daemon_exit_standalone_LINK) $(thr_daemon_exit_standalone_OBJECTS) $(thr_daemon_exit_standalone_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/brk.Po
include ./$(DEPDIR)/context_stack_die.Po
include ./$(DEPDIR)/door_data.Po
include ./$(DEPDIR)/door_kill.Po
include ./$(DEPDIR)/execx.Po
include ./$(DEPDIR)/gethrtime.Po
include ./$(DEPDIR)/getzoneoffset.Po
include ./$(DEPDIR)/inlinfo.Po
include ./$(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Po
include ./$(DEPDIR)/ldynsym.Po
include ./$(DEPDIR)/lsframe1.Po
include ./$(DEPDIR)/lsframe2.Po
include ./$(DEPDIR)/mmapobj_bssonly.Po
include ./$(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Po
include ./$(DEPDIR)/name_service_door.Po
include ./$(DEPDIR)/pkcs11.Po
include ./$(DEPDIR)/scalar.Po
include ./$(DEPDIR)/scalar_frealpathat.Po
include ./$(DEPDIR)/scalar_ioctl.Po
include ./$(DEPDIR)/scalar_lwp_kill.Po
include ./$(DEPDIR)/scalar_lwp_name.Po
include ./$(DEPDIR)/scalar_lwp_sigqueue.Po
include ./$(DEPDIR)/scalar_lwp_sigqueue_pid.Po
include ./$(DEPDIR)/scalar_obsolete.Po
include ./$(DEPDIR)/scalar_shm_new.Po
include ./$(DEPDIR)/scalar_spawn.Po
include ./$(DEPDIR)/scalar_tsol_clearance.Po
include ./$(DEPDIR)/scalar_utimensat.Po
include ./$(DEPDIR)/scalar_utimesys.Po
include ./$(DEPDIR)/scalar_uuidsys.Po
include ./$(DEPDIR)/scalar_zone_defunct.Po
include ./$(DEPDIR)/sendfilev.Po
include ./$(DEPDIR)/shmat.Po
include ./$(DEPDIR)/spawn.Po
include ./$(DEPDIR)/strlcpy.Po
include ./$(DEPDIR)/syscall_at.Po
include ./$(DEPDIR)/thr_daemon_exit_libc.Po
include ./$(DEPDIR)/thr_daemon_exit_standalone.Po

.c.o:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

inlinfo_nested_so-inlinfo_nested.o: inlinfo_nested.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(inlinfo_nested_so_CFLAGS) $(CFLAGS) -MT inlinfo_nested_so-inlinfo_nested.o -MD -MP -MF $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Tpo -c -o inlinfo_nested_so-inlinfo_nested.o `test -f 'inlinfo_nested.c' || echo '$(srcdir)/'`inlinfo_nested.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Tpo $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Po
#	$(AM_V_CC)source='inlinfo_nested.c' object='inlinfo_nested_so-inlinfo_nested.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(inlinfo_nested_so_CFLAGS) $(CFLAGS) -c -o inlinfo_nested_so-inlinfo_nested.o `test -f 'inlinfo_nested.c' || echo '$(srcdir)/'`inlinfo_nested.c

inlinfo_nested_so-inlinfo_nested.obj: inlinfo_nested.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(inlinfo_nested_so_CFLAGS) $(CFLAGS) -MT inlinfo_nested_so-inlinfo_nested.obj -MD -MP -MF $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Tpo -c -o inlinfo_nested_so-inlinfo_nested.obj `if test -f 'inlinfo_nested.c'; then $(CYGPATH_W) 'inlinfo_nested.c'; else $(CYGPATH_W) '$(srcdir)/inlinfo_nested.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Tpo $(DEPDIR)/inlinfo_nested_so-inlinfo_nested.Po
#	$(AM_V_CC)source='inlinfo_nested.c' object='inlinfo_nested_so-inlinfo_nested.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(inlinfo_nested_so_CFLAGS) $(CFLAGS) -c -o inlinfo_nested_so-inlinfo_nested.obj `if test -f 'inlinfo_nested.c'; then $(CYGPATH_W) 'inlinfo_nested.c'; else $(CYGPATH_W) '$(srcdir)/inlinfo_nested.c'; fi`

mmapobj_bssonly_so-mmapobj_bssonly_lib.o: mmapobj_bssonly_lib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mmapobj_bssonly_so_CFLAGS) $(CFLAGS) -MT mmapobj_bssonly_so-mmapobj_bssonly_lib.o -MD -MP -MF $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Tpo -c -o mmapobj_bssonly_so-mmapobj_bssonly_lib.o `test -f 'mmapobj_bssonly_lib.c' || echo '$(srcdir)/'`mmapobj_bssonly_lib.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Tpo $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Po
#	$(AM_V_CC)source='mmapobj_bssonly_lib.c' object='mmapobj_bssonly_so-mmapobj_bssonly_lib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mmapobj_bssonly_so_CFLAGS) $(CFLAGS) -c -o mmapobj_bssonly_so-mmapobj_bssonly_lib.o `test -f 'mmapobj_bssonly_lib.c' || echo '$(srcdir)/'`mmapobj_bssonly_lib.c

mmapobj_bssonly_so-mmapobj_bssonly_lib.obj: mmapobj_bssonly_lib.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mmapobj_bssonly_so_CFLAGS) $(CFLAGS) -MT mmapobj_bssonly_so-mmapobj_bssonly_lib.obj -MD -MP -MF $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Tpo -c -o mmapobj_bssonly_so-mmapobj_bssonly_lib.obj `if test -f 'mmapobj_bssonly_lib.c'; then $(CYGPATH_W) 'mmapobj_bssonly_lib.c'; else $(CYGPATH_W) '$(srcdir)/mmapobj_bssonly_lib.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Tpo $(DEPDIR)/mmapobj_bssonly_so-mmapobj_bssonly_lib.Po
#	$(AM_V_CC)source='mmapobj_bssonly_lib.c' object='mmapobj_bssonly_so-mmapobj_bssonly_lib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mmapobj_bssonly_so_CFLAGS) $(CFLAGS) -c -o mmapobj_bssonly_so-mmapobj_bssonly_lib.obj `if test -f 'mmapobj_bssonly_lib.c'; then $(CYGPATH_W) 'mmapobj_bssonly_lib.c'; else $(CYGPATH_W) '$(srcdir)/mmapobj_bssonly_lib.c'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile $(SCRIPTS) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am check-local clean \
	clean-checkPROGRAMS clean-generic clean-local cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am


# This used to be required when Vex had a handwritten Makefile.  It
# shouldn't be needed any more, though.

#----------------------------------------------------------------------------
# noinst_PROGRAMS and noinst_DSYMS targets
#----------------------------------------------------------------------------

# On Darwin, for a program 'p', the DWARF debug info is stored in the
# directory 'p.dSYM'.  This must be generated after the executable is
# created, with 'dsymutil p'.  We could redefine LINK with a script that
# executes 'dsymutil' after linking, but that's a pain.  Instead we use this
# hook so that every time "make check" is run, we subsequently invoke
# 'dsymutil' on all the executables that lack a .dSYM directory, or that are
# newer than their corresponding .dSYM directory.
build-noinst_DSYMS: $(noinst_DSYMS)
	for f in $(noinst_DSYMS); do \
	  if [ ! -e $$f.dSYM  -o  $$f -nt $$f.dSYM ] ; then \
	      echo "dsymutil $$f"; \
	      dsymutil $$f; \
	  fi; \
	done

# This is used by coregrind/Makefile.am and Makefile.tool.am for doing
# "in-place" installs.  It copies $(noinst_PROGRAMS) into $inplacedir.
# It needs to be depended on by an 'all-local' rule.
inplace-noinst_PROGRAMS: $(noinst_PROGRAMS)
	mkdir -p $(inplacedir); \
	for f in $(noinst_PROGRAMS) ; do \
	  rm -f $(inplacedir)/$$f; \
	  ln -f -s ../$(subdir)/$$f $(inplacedir); \
	done

# Similar to inplace-noinst_PROGRAMS
inplace-noinst_DSYMS: build-noinst_DSYMS
	mkdir -p $(inplacedir); \
	for f in $(noinst_DSYMS); do \
	  rm -f $(inplacedir)/$$f.dSYM; \
	  ln -f -s ../$(subdir)/$$f.dSYM $(inplacedir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make install".  It copies $(noinst_PROGRAMS) into $prefix/lib/valgrind/.
# It needs to be depended on by an 'install-exec-local' rule.
install-noinst_PROGRAMS: $(noinst_PROGRAMS)
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_PROGRAMS); do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(pkglibdir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make uninstall".  It removes $(noinst_PROGRAMS) from $prefix/lib/valgrind/.
# It needs to be depended on by an 'uninstall-local' rule.
uninstall-noinst_PROGRAMS:
	for f in $(noinst_PROGRAMS); do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$f; \
	done

# Similar to install-noinst_PROGRAMS.
# Nb: we don't use $(INSTALL_PROGRAM) here because it doesn't work with
# directories.  XXX: not sure whether the resulting permissions will be
# correct when using 'cp -R'...
install-noinst_DSYMS: build-noinst_DSYMS
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_DSYMS); do \
	  cp -R $$f.dSYM $(DESTDIR)$(pkglibdir); \
	done

# Similar to uninstall-noinst_PROGRAMS.
uninstall-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$f.dSYM; \
	done

# This needs to be depended on by a 'clean-local' rule.
clean-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -rf $$f.dSYM; \
	done

check-local: build-noinst_DSYMS

clean-local: clean-noinst_DSYMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
