!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCESS_FLAG_NAMES	dt_oatparse.c	/^const HChar * ACCESS_FLAG_NAMES[20] = {$/;"	v
ACCESS_FLAG_VALUES	dt_oatparse.c	/^const UInt ACCESS_FLAG_VALUES[20] = {$/;"	v
ACC_ABSTRACT	dt_oatdexparse.h	/^	ACC_ABSTRACT     = 0x00000400,       \/\/ class, method, ic$/;"	e	enum:__anon9
ACC_ANNOTATION	dt_oatdexparse.h	/^	ACC_ANNOTATION   = 0x00002000,       \/\/ class, ic (1.5)$/;"	e	enum:__anon9
ACC_BRIDGE	dt_oatdexparse.h	/^	ACC_BRIDGE       = 0x00000040,       \/\/ method (1.5)$/;"	e	enum:__anon9
ACC_CLASS_MASK	dt_oatdexparse.h	/^	ACC_CLASS_MASK =$/;"	e	enum:__anon9
ACC_CONSTRUCTOR	dt_oatdexparse.h	/^	ACC_CONSTRUCTOR  = 0x00010000,       \/\/ method (Dalvik only)$/;"	e	enum:__anon9
ACC_DECLARED_SYNCHRONIZED	dt_oatdexparse.h	/^	ACC_DECLARED_SYNCHRONIZED =$/;"	e	enum:__anon9
ACC_ENUM	dt_oatdexparse.h	/^	ACC_ENUM         = 0x00004000,       \/\/ class, field, ic (1.5)$/;"	e	enum:__anon9
ACC_FIELD_MASK	dt_oatdexparse.h	/^	ACC_FIELD_MASK =$/;"	e	enum:__anon9
ACC_FINAL	dt_oatdexparse.h	/^	ACC_FINAL        = 0x00000010,       \/\/ class, field, method, ic$/;"	e	enum:__anon9
ACC_INNER_CLASS_MASK	dt_oatdexparse.h	/^	ACC_INNER_CLASS_MASK =$/;"	e	enum:__anon9
ACC_INTERFACE	dt_oatdexparse.h	/^	ACC_INTERFACE    = 0x00000200,       \/\/ class, ic$/;"	e	enum:__anon9
ACC_METHOD_MASK	dt_oatdexparse.h	/^	ACC_METHOD_MASK =$/;"	e	enum:__anon9
ACC_NATIVE	dt_oatdexparse.h	/^	ACC_NATIVE       = 0x00000100,       \/\/ method$/;"	e	enum:__anon9
ACC_NATIVE	dt_oatdexparse.h	1098;"	d
ACC_PRIVATE	dt_oatdexparse.h	/^	ACC_PRIVATE      = 0x00000002,       \/\/ field, method, ic$/;"	e	enum:__anon9
ACC_PROTECTED	dt_oatdexparse.h	/^	ACC_PROTECTED    = 0x00000004,       \/\/ field, method, ic$/;"	e	enum:__anon9
ACC_PUBLIC	dt_oatdexparse.h	/^	ACC_PUBLIC       = 0x00000001,       \/\/ class, field, method, ic$/;"	e	enum:__anon9
ACC_STATIC	dt_oatdexparse.h	/^	ACC_STATIC       = 0x00000008,       \/\/ field, method, ic$/;"	e	enum:__anon9
ACC_STRICT	dt_oatdexparse.h	/^	ACC_STRICT       = 0x00000800,       \/\/ method$/;"	e	enum:__anon9
ACC_SUPER	dt_oatdexparse.h	/^	ACC_SUPER        = 0x00000020,       \/\/ class (not used in Dalvik)$/;"	e	enum:__anon9
ACC_SYNCHRONIZED	dt_oatdexparse.h	/^	ACC_SYNCHRONIZED = 0x00000020,       \/\/ method (only allowed on natives)$/;"	e	enum:__anon9
ACC_SYNTHETIC	dt_oatdexparse.h	/^	ACC_SYNTHETIC    = 0x00001000,       \/\/ field, method, ic$/;"	e	enum:__anon9
ACC_TRANSIENT	dt_oatdexparse.h	/^	ACC_TRANSIENT    = 0x00000080,       \/\/ field$/;"	e	enum:__anon9
ACC_VARARGS	dt_oatdexparse.h	/^	ACC_VARARGS      = 0x00000080,       \/\/ method (1.5)$/;"	e	enum:__anon9
ACC_VOLATILE	dt_oatdexparse.h	/^	ACC_VOLATILE     = 0x00000040,       \/\/ field$/;"	e	enum:__anon9
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMD64CondAlways	dt_stmt2.c	/^      AMD64CondAlways = 16  \/* HACK *\/$/;"	e	enum:__anon1	file:
AMD64CondB	dt_stmt2.c	/^      AMD64CondB      = 2,  \/* below              *\/$/;"	e	enum:__anon1	file:
AMD64CondBE	dt_stmt2.c	/^      AMD64CondBE     = 6,  \/* below or equal     *\/$/;"	e	enum:__anon1	file:
AMD64CondL	dt_stmt2.c	/^      AMD64CondL      = 12, \/* jump less          *\/$/;"	e	enum:__anon1	file:
AMD64CondLE	dt_stmt2.c	/^      AMD64CondLE     = 14, \/* less or equal      *\/$/;"	e	enum:__anon1	file:
AMD64CondNB	dt_stmt2.c	/^      AMD64CondNB     = 3,  \/* not below          *\/$/;"	e	enum:__anon1	file:
AMD64CondNBE	dt_stmt2.c	/^      AMD64CondNBE    = 7,  \/* not below or equal *\/$/;"	e	enum:__anon1	file:
AMD64CondNL	dt_stmt2.c	/^      AMD64CondNL     = 13, \/* not less           *\/$/;"	e	enum:__anon1	file:
AMD64CondNLE	dt_stmt2.c	/^      AMD64CondNLE    = 15, \/* not less or equal  *\/$/;"	e	enum:__anon1	file:
AMD64CondNO	dt_stmt2.c	/^      AMD64CondNO     = 1,  \/* no overflow        *\/$/;"	e	enum:__anon1	file:
AMD64CondNP	dt_stmt2.c	/^      AMD64CondNP     = 11, \/* not parity even    *\/$/;"	e	enum:__anon1	file:
AMD64CondNS	dt_stmt2.c	/^      AMD64CondNS     = 9,  \/* not negative       *\/$/;"	e	enum:__anon1	file:
AMD64CondNZ	dt_stmt2.c	/^      AMD64CondNZ     = 5,  \/* not zero           *\/$/;"	e	enum:__anon1	file:
AMD64CondO	dt_stmt2.c	/^      AMD64CondO      = 0,  \/* overflow           *\/$/;"	e	enum:__anon1	file:
AMD64CondP	dt_stmt2.c	/^      AMD64CondP      = 10, \/* parity even        *\/$/;"	e	enum:__anon1	file:
AMD64CondS	dt_stmt2.c	/^      AMD64CondS      = 8,  \/* negative           *\/$/;"	e	enum:__anon1	file:
AMD64CondZ	dt_stmt2.c	/^      AMD64CondZ      = 4,  \/* zero               *\/$/;"	e	enum:__anon1	file:
AMD64Condcode	dt_stmt2.c	/^   AMD64Condcode;$/;"	t	typeref:enum:__anon1	file:
AMD64G_CC_OP_ADCB	dt_stmt2.c	/^    AMD64G_CC_OP_ADCB,    \/* 9 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADCL	dt_stmt2.c	/^    AMD64G_CC_OP_ADCL,    \/* 11 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADCQ	dt_stmt2.c	/^    AMD64G_CC_OP_ADCQ,    \/* 12 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADCW	dt_stmt2.c	/^    AMD64G_CC_OP_ADCW,    \/* 10 DEP1 = argL, DEP2 = argR ^ oldCarry, NDEP = oldCarry *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADDB	dt_stmt2.c	/^    AMD64G_CC_OP_ADDB,    \/* 1 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADDL	dt_stmt2.c	/^    AMD64G_CC_OP_ADDL,    \/* 3 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADDQ	dt_stmt2.c	/^    AMD64G_CC_OP_ADDQ,    \/* 4 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ADDW	dt_stmt2.c	/^    AMD64G_CC_OP_ADDW,    \/* 2 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_COPY	dt_stmt2.c	/^    AMD64G_CC_OP_COPY=0,  \/* DEP1 = current flags, DEP2 = 0, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_DECB	dt_stmt2.c	/^    AMD64G_CC_OP_DECB,    \/* 25 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_DECL	dt_stmt2.c	/^    AMD64G_CC_OP_DECL,    \/* 27 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_DECQ	dt_stmt2.c	/^    AMD64G_CC_OP_DECQ,    \/* 28 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_DECW	dt_stmt2.c	/^    AMD64G_CC_OP_DECW,    \/* 26 DEP1 = result, DEP2 = 0, NDEP = oldCarry (0 or 1) *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_INCB	dt_stmt2.c	/^    AMD64G_CC_OP_INCB,    \/* 21 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_INCL	dt_stmt2.c	/^    AMD64G_CC_OP_INCL,    \/* 23 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_INCQ	dt_stmt2.c	/^    AMD64G_CC_OP_INCQ,    \/* 24 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_INCW	dt_stmt2.c	/^    AMD64G_CC_OP_INCW,    \/* 22 DEP1 = result, DEP2 = 0, NDEP = oldCarry (0 or 1) *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_LOGICB	dt_stmt2.c	/^    AMD64G_CC_OP_LOGICB,  \/* 17 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_LOGICL	dt_stmt2.c	/^    AMD64G_CC_OP_LOGICL,  \/* 19 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_LOGICQ	dt_stmt2.c	/^    AMD64G_CC_OP_LOGICQ,  \/* 20 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_LOGICW	dt_stmt2.c	/^    AMD64G_CC_OP_LOGICW,  \/* 18 DEP1 = result, DEP2 = 0, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_NUMBER	dt_stmt2.c	/^    AMD64G_CC_OP_NUMBER$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ROLB	dt_stmt2.c	/^    AMD64G_CC_OP_ROLB,    \/* 37 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ROLL	dt_stmt2.c	/^    AMD64G_CC_OP_ROLL,    \/* 39 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ROLQ	dt_stmt2.c	/^    AMD64G_CC_OP_ROLQ,    \/* 40 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_ROLW	dt_stmt2.c	/^    AMD64G_CC_OP_ROLW,    \/* 38 DEP1 = res, DEP2 = 0, NDEP = old flags *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_RORB	dt_stmt2.c	/^    AMD64G_CC_OP_RORB,    \/* 41 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_RORL	dt_stmt2.c	/^    AMD64G_CC_OP_RORL,    \/* 43 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_RORQ	dt_stmt2.c	/^    AMD64G_CC_OP_RORQ,    \/* 44 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_RORW	dt_stmt2.c	/^    AMD64G_CC_OP_RORW,    \/* 42 DEP1 = res, DEP2 = 0, NDEP = old flags *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SBBB	dt_stmt2.c	/^    AMD64G_CC_OP_SBBB,    \/* 13 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SBBL	dt_stmt2.c	/^    AMD64G_CC_OP_SBBL,    \/* 15 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SBBQ	dt_stmt2.c	/^    AMD64G_CC_OP_SBBQ,    \/* 16 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SBBW	dt_stmt2.c	/^    AMD64G_CC_OP_SBBW,    \/* 14 DEP1 = argL, DEP2 = argR ^ oldCarry, NDEP = oldCarry *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHLB	dt_stmt2.c	/^    AMD64G_CC_OP_SHLB,    \/* 29 DEP1 = res, DEP2 = res', NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHLL	dt_stmt2.c	/^    AMD64G_CC_OP_SHLL,    \/* 31 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHLQ	dt_stmt2.c	/^    AMD64G_CC_OP_SHLQ,    \/* 32 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHLW	dt_stmt2.c	/^    AMD64G_CC_OP_SHLW,    \/* 30 where res' is like res but shifted one bit less *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHRB	dt_stmt2.c	/^    AMD64G_CC_OP_SHRB,    \/* 33 DEP1 = res, DEP2 = res', NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHRL	dt_stmt2.c	/^    AMD64G_CC_OP_SHRL,    \/* 35 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHRQ	dt_stmt2.c	/^    AMD64G_CC_OP_SHRQ,    \/* 36 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SHRW	dt_stmt2.c	/^    AMD64G_CC_OP_SHRW,    \/* 34 where res' is like res but shifted one bit less *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SMULB	dt_stmt2.c	/^    AMD64G_CC_OP_SMULB,   \/* 49 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SMULL	dt_stmt2.c	/^    AMD64G_CC_OP_SMULL,   \/* 51 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SMULQ	dt_stmt2.c	/^    AMD64G_CC_OP_SMULQ,   \/* 52 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SMULW	dt_stmt2.c	/^    AMD64G_CC_OP_SMULW,   \/* 50 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SUBB	dt_stmt2.c	/^    AMD64G_CC_OP_SUBB,    \/* 5 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SUBL	dt_stmt2.c	/^    AMD64G_CC_OP_SUBL,    \/* 7 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SUBQ	dt_stmt2.c	/^    AMD64G_CC_OP_SUBQ,    \/* 8 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_SUBW	dt_stmt2.c	/^    AMD64G_CC_OP_SUBW,    \/* 6 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_UMULB	dt_stmt2.c	/^    AMD64G_CC_OP_UMULB,   \/* 45 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_UMULL	dt_stmt2.c	/^    AMD64G_CC_OP_UMULL,   \/* 47 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_UMULQ	dt_stmt2.c	/^    AMD64G_CC_OP_UMULQ,   \/* 48 *\/$/;"	e	enum:__anon2	file:
AMD64G_CC_OP_UMULW	dt_stmt2.c	/^    AMD64G_CC_OP_UMULW,   \/* 46 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e	enum:__anon2	file:
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CCASFLAGS_AMD64_DARWIN	Makefile	/^AM_CCASFLAGS_AMD64_DARWIN = -arch x86_64 -g$/;"	m
AM_CCASFLAGS_AMD64_LINUX	Makefile	/^AM_CCASFLAGS_AMD64_LINUX =  -g$/;"	m
AM_CCASFLAGS_AMD64_SOLARIS	Makefile	/^AM_CCASFLAGS_AMD64_SOLARIS =  -g -D_ASM$/;"	m
AM_CCASFLAGS_ARM64_LINUX	Makefile	/^AM_CCASFLAGS_ARM64_LINUX =  -g$/;"	m
AM_CCASFLAGS_ARM_LINUX	Makefile	/^AM_CCASFLAGS_ARM_LINUX =  \\$/;"	m
AM_CCASFLAGS_MIPS32_LINUX	Makefile	/^AM_CCASFLAGS_MIPS32_LINUX =  -g $/;"	m
AM_CCASFLAGS_MIPS64_LINUX	Makefile	/^AM_CCASFLAGS_MIPS64_LINUX =  -g $/;"	m
AM_CCASFLAGS_PPC32_LINUX	Makefile	/^AM_CCASFLAGS_PPC32_LINUX =  -g$/;"	m
AM_CCASFLAGS_PPC64BE_LINUX	Makefile	/^AM_CCASFLAGS_PPC64BE_LINUX =  -g$/;"	m
AM_CCASFLAGS_PPC64LE_LINUX	Makefile	/^AM_CCASFLAGS_PPC64LE_LINUX =  -g$/;"	m
AM_CCASFLAGS_PRI	Makefile	/^AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_ARM_LINUX)$/;"	m
AM_CCASFLAGS_S390X_LINUX	Makefile	/^AM_CCASFLAGS_S390X_LINUX =  -g -mzarch -march=z900$/;"	m
AM_CCASFLAGS_X86_DARWIN	Makefile	/^AM_CCASFLAGS_X86_DARWIN = -arch i386 -g$/;"	m
AM_CCASFLAGS_X86_LINUX	Makefile	/^AM_CCASFLAGS_X86_LINUX =  -g$/;"	m
AM_CCASFLAGS_X86_SOLARIS	Makefile	/^AM_CCASFLAGS_X86_SOLARIS =  -g -D_ASM$/;"	m
AM_CFLAGS_AMD64_DARWIN	Makefile	/^AM_CFLAGS_AMD64_DARWIN = $(WERROR) -arch x86_64 $(AM_CFLAGS_BASE) \\$/;"	m
AM_CFLAGS_AMD64_LINUX	Makefile	/^AM_CFLAGS_AMD64_LINUX =  \\$/;"	m
AM_CFLAGS_AMD64_SOLARIS	Makefile	/^AM_CFLAGS_AMD64_SOLARIS =  \\$/;"	m
AM_CFLAGS_ARM64_LINUX	Makefile	/^AM_CFLAGS_ARM64_LINUX =  $(AM_CFLAGS_BASE)$/;"	m
AM_CFLAGS_ARM_LINUX	Makefile	/^AM_CFLAGS_ARM_LINUX =  \\$/;"	m
AM_CFLAGS_BASE	Makefile	/^AM_CFLAGS_BASE = -O2 -g -std=gnu99 -Wall -Wmissing-prototypes -Wshadow \\$/;"	m
AM_CFLAGS_MIPS32_LINUX	Makefile	/^AM_CFLAGS_MIPS32_LINUX =  $(AM_CFLAGS_BASE) $/;"	m
AM_CFLAGS_MIPS64_LINUX	Makefile	/^AM_CFLAGS_MIPS64_LINUX =  $(AM_CFLAGS_BASE) $/;"	m
AM_CFLAGS_PPC32_LINUX	Makefile	/^AM_CFLAGS_PPC32_LINUX =  $(AM_CFLAGS_BASE)$/;"	m
AM_CFLAGS_PPC64BE_LINUX	Makefile	/^AM_CFLAGS_PPC64BE_LINUX =  $(AM_CFLAGS_BASE)$/;"	m
AM_CFLAGS_PPC64LE_LINUX	Makefile	/^AM_CFLAGS_PPC64LE_LINUX =  $(AM_CFLAGS_BASE)$/;"	m
AM_CFLAGS_PRI	Makefile	/^AM_CFLAGS_PRI = $(AM_CFLAGS_ARM_LINUX)$/;"	m
AM_CFLAGS_PSO_AMD64_DARWIN	Makefile	/^AM_CFLAGS_PSO_AMD64_DARWIN = $(AM_CFLAGS_AMD64_DARWIN) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_AMD64_LINUX	Makefile	/^AM_CFLAGS_PSO_AMD64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_AMD64_SOLARIS	Makefile	/^AM_CFLAGS_PSO_AMD64_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_ARM64_LINUX	Makefile	/^AM_CFLAGS_PSO_ARM64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_ARM_LINUX	Makefile	/^AM_CFLAGS_PSO_ARM_LINUX =  $(AM_CFLAGS_BASE) \\$/;"	m
AM_CFLAGS_PSO_BASE	Makefile	/^AM_CFLAGS_PSO_BASE = -O -g -fno-omit-frame-pointer -fno-strict-aliasing \\$/;"	m
AM_CFLAGS_PSO_MIPS32_LINUX	Makefile	/^AM_CFLAGS_PSO_MIPS32_LINUX =  $(AM_CFLAGS_BASE)  \\$/;"	m
AM_CFLAGS_PSO_MIPS64_LINUX	Makefile	/^AM_CFLAGS_PSO_MIPS64_LINUX =  $(AM_CFLAGS_BASE)  \\$/;"	m
AM_CFLAGS_PSO_PPC32_LINUX	Makefile	/^AM_CFLAGS_PSO_PPC32_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_PPC64BE_LINUX	Makefile	/^AM_CFLAGS_PSO_PPC64BE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_PPC64LE_LINUX	Makefile	/^AM_CFLAGS_PSO_PPC64LE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_S390X_LINUX	Makefile	/^AM_CFLAGS_PSO_S390X_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_TILEGX_LINUX	Makefile	/^AM_CFLAGS_PSO_TILEGX_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_X86_DARWIN	Makefile	/^AM_CFLAGS_PSO_X86_DARWIN = $(AM_CFLAGS_X86_DARWIN) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_X86_LINUX	Makefile	/^AM_CFLAGS_PSO_X86_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_PSO_X86_SOLARIS	Makefile	/^AM_CFLAGS_PSO_X86_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)$/;"	m
AM_CFLAGS_S390X_LINUX	Makefile	/^AM_CFLAGS_S390X_LINUX =  $(AM_CFLAGS_BASE) -fomit-frame-pointer$/;"	m
AM_CFLAGS_TILEGX_LINUX	Makefile	/^AM_CFLAGS_TILEGX_LINUX =  $(AM_CFLAGS_BASE)$/;"	m
AM_CFLAGS_X86_DARWIN	Makefile	/^AM_CFLAGS_X86_DARWIN = $(WERROR) -arch i386 $(AM_CFLAGS_BASE) \\$/;"	m
AM_CFLAGS_X86_LINUX	Makefile	/^AM_CFLAGS_X86_LINUX =   \\$/;"	m
AM_CFLAGS_X86_SOLARIS	Makefile	/^AM_CFLAGS_X86_SOLARIS =   \\$/;"	m
AM_CPPFLAGS_ARM_LINUX	Makefile	/^AM_CPPFLAGS_ARM_LINUX = \\$/;"	m
AM_CPPFLAGS_PRI	Makefile	/^AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_ARM_LINUX)$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_FLAG_M3264_AMD64_DARWIN	Makefile	/^AM_FLAG_M3264_AMD64_DARWIN = -arch x86_64$/;"	m
AM_FLAG_M3264_AMD64_LINUX	Makefile	/^AM_FLAG_M3264_AMD64_LINUX = $/;"	m
AM_FLAG_M3264_AMD64_SOLARIS	Makefile	/^AM_FLAG_M3264_AMD64_SOLARIS = $/;"	m
AM_FLAG_M3264_ARM64_LINUX	Makefile	/^AM_FLAG_M3264_ARM64_LINUX = $/;"	m
AM_FLAG_M3264_ARM_LINUX	Makefile	/^AM_FLAG_M3264_ARM_LINUX = $/;"	m
AM_FLAG_M3264_MIPS32_LINUX	Makefile	/^AM_FLAG_M3264_MIPS32_LINUX = $/;"	m
AM_FLAG_M3264_MIPS64_LINUX	Makefile	/^AM_FLAG_M3264_MIPS64_LINUX = $/;"	m
AM_FLAG_M3264_PPC32_LINUX	Makefile	/^AM_FLAG_M3264_PPC32_LINUX = $/;"	m
AM_FLAG_M3264_PPC64BE_LINUX	Makefile	/^AM_FLAG_M3264_PPC64BE_LINUX = $/;"	m
AM_FLAG_M3264_PPC64LE_LINUX	Makefile	/^AM_FLAG_M3264_PPC64LE_LINUX = $/;"	m
AM_FLAG_M3264_PRI	Makefile	/^AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_ARM_LINUX)$/;"	m
AM_FLAG_M3264_S390X_LINUX	Makefile	/^AM_FLAG_M3264_S390X_LINUX = $/;"	m
AM_FLAG_M3264_SEC	Makefile	/^AM_FLAG_M3264_SEC = $/;"	m
AM_FLAG_M3264_X86_DARWIN	Makefile	/^AM_FLAG_M3264_X86_DARWIN = -arch i386$/;"	m
AM_FLAG_M3264_X86_LINUX	Makefile	/^AM_FLAG_M3264_X86_LINUX = $/;"	m
AM_FLAG_M3264_X86_SOLARIS	Makefile	/^AM_FLAG_M3264_X86_SOLARIS = $/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
APPEND_MEM	dt_dexparse.c	2045;"	d	file:
AR	Makefile	/^AR = \/home\/jeremy\/tools\/android-ndk-r10e\/toolchains\/arm-linux-androideabi-4.9\/prebuilt\/linux-x86_64\/bin\/arm-linux-androideabi-ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/missing automake-1.14$/;"	m
AUXMAP_L1_INSERT_IX	dt_taint.c	149;"	d	file:
AWK	Makefile	/^AWK = gawk$/;"	m
AccessFor	dt_oatdexparse.h	/^enum AccessFor {$/;"	g
AuxMapEnt	dt_taint.c	/^AuxMapEnt;$/;"	t	typeref:struct:__anon18	file:
BG_Z_LIBART_SONAME	dt_art_wrapper.c	3;"	d	file:
BOOST_CFLAGS	Makefile	/^BOOST_CFLAGS = $/;"	m
BOOST_LIBS	Makefile	/^BOOST_LIBS = $/;"	m
BYTES_PER_SEC_VBIT_NODE	dt_taint.c	521;"	d	file:
CC	Makefile	/^CC = \/home\/jeremy\/tools\/android-ndk-r10e\/toolchains\/arm-linux-androideabi-4.9\/prebuilt\/linux-x86_64\/bin\/arm-linux-androideabi-gcc$/;"	m
CCAS	Makefile	/^CCAS = \/home\/jeremy\/tools\/android-ndk-r10e\/toolchains\/arm-linux-androideabi-4.9\/prebuilt\/linux-x86_64\/bin\/arm-linux-androideabi-gcc$/;"	m
CCASDEPMODE	Makefile	/^CCASDEPMODE = depmode=gcc3$/;"	m
CCASFLAGS	Makefile	/^CCASFLAGS = --sysroot=\/home\/jeremy\/tools\/android-ndk-r10e\/platforms\/android-19\/arch-arm$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = --sysroot=\/home\/jeremy\/tools\/android-ndk-r10e\/platforms\/android-19\/arch-arm$/;"	m
CFLAGS_MPI	Makefile	/^CFLAGS_MPI = -g -O -fno-omit-frame-pointer -Wall -fpic$/;"	m
CLASS_ERROR	dt_oatdexparse.h	/^	CLASS_ERROR         = -1,$/;"	e	enum:ClassStatus
CLASS_FIELD_SLOTS	dt_oatdexparse.h	1096;"	d
CLASS_IDX	dt_oatdexparse.h	/^	CLASS_IDX           = 1,    \/* loaded, DEX idx in super or ifaces *\/$/;"	e	enum:ClassStatus
CLASS_INITIALIZED	dt_oatdexparse.h	/^	CLASS_INITIALIZED   = 7,    \/* ready to go *\/$/;"	e	enum:ClassStatus
CLASS_INITIALIZING	dt_oatdexparse.h	/^	CLASS_INITIALIZING  = 6,    \/* class init in progress *\/$/;"	e	enum:ClassStatus
CLASS_LOADED	dt_oatdexparse.h	/^	CLASS_LOADED        = 2,    \/* DEX idx values resolved *\/$/;"	e	enum:ClassStatus
CLASS_NOTREADY	dt_oatdexparse.h	/^	CLASS_NOTREADY      = 0,$/;"	e	enum:ClassStatus
CLASS_RESOLVED	dt_oatdexparse.h	/^	CLASS_RESOLVED      = 3,    \/* part of linking *\/$/;"	e	enum:ClassStatus
CLASS_VERIFIED	dt_oatdexparse.h	/^	CLASS_VERIFIED      = 5,    \/* logically part of linking; done pre-init *\/$/;"	e	enum:ClassStatus
CLASS_VERIFYING	dt_oatdexparse.h	/^	CLASS_VERIFYING     = 4,    \/* in the process of being verified *\/$/;"	e	enum:ClassStatus
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = \/home\/jeremy\/tools\/android-ndk-r10e\/toolchains\/arm-linux-androideabi-4.9\/prebuilt\/linux-x86_64\/bin\/arm-linux-androideabi-gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = --sysroot=\/home\/jeremy\/tools\/android-ndk-r10e\/platforms\/android-19\/arch-arm -DANDROID_HARDWARE_NEXUS_5$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = \/home\/jeremy\/tools\/android-ndk-r10e\/toolchains\/arm-linux-androideabi-4.9\/prebuilt\/linux-x86_64\/bin\/arm-linux-androideabi-g++$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
ClassLinker_DefineClass	dt_art_wrapper.c	/^void* ClassLinker_DefineClass(void* this, void* thread,void* descriptor, int hash, void* class_loader, void* dex_file, void* dex_class_def)$/;"	f
ClassObject	dt_oatdexparse.h	/^struct ClassObject{$/;"	s
ClassStatus	dt_oatdexparse.h	/^enum ClassStatus {$/;"	g
CodeItem	dt_oatdexparse.h	/^struct CodeItem {$/;"	s
DBG_ADVANCE_LINE	dt_oatdexparse.h	/^	DBG_ADVANCE_LINE         = 0x02,$/;"	e	enum:__anon7
DBG_ADVANCE_PC	dt_oatdexparse.h	/^	DBG_ADVANCE_PC           = 0x01,$/;"	e	enum:__anon7
DBG_CALL_INFO	dt_debug.h	77;"	d
DBG_CALL_INFO	dt_debug.h	85;"	d
DBG_CURRENT_LINE	dt_debug.h	19;"	d
DBG_END_LOCAL	dt_oatdexparse.h	/^	DBG_END_LOCAL            = 0x05,$/;"	e	enum:__anon7
DBG_END_SEQUENCE	dt_oatdexparse.h	/^	DBG_END_SEQUENCE         = 0x00,$/;"	e	enum:__anon7
DBG_FIRST_SPECIAL	dt_oatdexparse.h	/^	DBG_FIRST_SPECIAL        = 0x0a,$/;"	e	enum:__anon7
DBG_INSTRUMENT	dt_debug.h	16;"	d
DBG_LINE_BASE	dt_oatdexparse.h	/^	DBG_LINE_BASE            = -4,$/;"	e	enum:__anon7
DBG_LINE_RANGE	dt_oatdexparse.h	/^	DBG_LINE_RANGE           = 15,$/;"	e	enum:__anon7
DBG_MEM	dt_debug.h	8;"	d
DBG_MEM_INFO	dt_debug.h	64;"	d
DBG_MEM_INFO	dt_debug.h	72;"	d
DBG_REQUEST_INFO	dt_debug.h	22;"	d
DBG_REQUEST_INFO	dt_debug.h	27;"	d
DBG_RESTART_LOCAL	dt_oatdexparse.h	/^	DBG_RESTART_LOCAL        = 0x06,$/;"	e	enum:__anon7
DBG_SET_EPILOGUE_BEGIN	dt_oatdexparse.h	/^	DBG_SET_EPILOGUE_BEGIN   = 0x08,$/;"	e	enum:__anon7
DBG_SET_FILE	dt_oatdexparse.h	/^	DBG_SET_FILE             = 0x09,$/;"	e	enum:__anon7
DBG_SET_PROLOGUE_END	dt_oatdexparse.h	/^	DBG_SET_PROLOGUE_END     = 0x07,$/;"	e	enum:__anon7
DBG_START_LOCAL	dt_oatdexparse.h	/^	DBG_START_LOCAL          = 0x03,$/;"	e	enum:__anon7
DBG_START_LOCAL_EXTENDED	dt_oatdexparse.h	/^	DBG_START_LOCAL_EXTENDED = 0x04,$/;"	e	enum:__anon7
DBG_SYSCALL	dt_debug.h	9;"	d
DBT_TAINT_INFO	dt_debug.h	17;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_SUPP	Makefile	/^DEFAULT_SUPP = exp-sgcheck.supp xfree-3.supp xfree-4.supp bionic.supp $/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEXCLASS	dt_oatdexparse.h	529;"	d
DEXHEAD	dt_oatdexparse.h	527;"	d
DEXMETHOD	dt_oatdexparse.h	530;"	d
DEXOPTDATA	dt_oatdexparse.h	528;"	d
DEX_DEP_MAGIC	dt_oatdexparse.h	45;"	d
DEX_MAGIC	dt_oatdexparse.h	39;"	d
DEX_MAGIC_VERS	dt_oatdexparse.h	40;"	d
DEX_OPT_MAGIC	dt_oatdexparse.h	42;"	d
DEX_OPT_MAGIC_VERS	dt_oatdexparse.h	43;"	d
DIFF	Makefile	/^DIFF = diff -u$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(top_srcdir)\/Makefile.tool.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(datatrace_arm_linux_SOURCES) \\$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIS_PATH	Makefile	/^DIS_PATH = $/;"	m
DO_CREQ_W_W	datatrace.h	264;"	d
DO_CREQ_W_W	datatrace.h	279;"	d
DO_CREQ_W_WW	datatrace.h	266;"	d
DO_CREQ_W_WWW	datatrace.h	268;"	d
DO_CREQ_W_WWW	datatrace.h	312;"	d
DO_CREQ_v_W	datatrace.h	263;"	d
DO_CREQ_v_W	datatrace.h	270;"	d
DO_CREQ_v_WW	datatrace.h	265;"	d
DO_CREQ_v_WW	datatrace.h	290;"	d
DO_CREQ_v_WWW	datatrace.h	267;"	d
DO_CREQ_v_WWW	datatrace.h	300;"	d
DO_CREQ_v_WWWW	datatrace.h	327;"	d
DRIFTUP_GROWTH_FACTOR	dt_taint.c	540;"	d	file:
DRIFTUP_MAX_SIZE	dt_taint.c	541;"	d	file:
DRIFTUP_SURVIVOR_PROPORTION	dt_taint.c	539;"	d	file:
DT_	dt_taint.h	9;"	d
DT_ASSERT	dt_debug.h	53;"	d
DT_ASSERT	dt_debug.h	58;"	d
DT_DEBUG	dt_debug.h	7;"	d
DT_LOGE	dt_debug.h	45;"	d
DT_LOGE	dt_debug.h	57;"	d
DT_LOGI	dt_debug.h	37;"	d
DT_LOGI	dt_debug.h	56;"	d
DT_MALLOC_REDZONE_SZB	dt_wrappers.h	11;"	d
DT_WHITE_LIST	dt_taint.h	12;"	d
DexAnnotationItem	dt_oatdexparse.h	/^struct DexAnnotationItem {$/;"	s
DexAnnotationSetItem	dt_oatdexparse.h	/^struct DexAnnotationSetItem {$/;"	s
DexAnnotationSetRefItem	dt_oatdexparse.h	/^struct DexAnnotationSetRefItem {$/;"	s
DexAnnotationSetRefList	dt_oatdexparse.h	/^struct DexAnnotationSetRefList {$/;"	s
DexAnnotationsDirectoryItem	dt_oatdexparse.h	/^struct DexAnnotationsDirectoryItem {$/;"	s
DexClassData	dt_oatdexparse.h	/^struct DexClassData {$/;"	s
DexClassDataHeader	dt_oatdexparse.h	/^struct DexClassDataHeader {$/;"	s
DexClassDef	dt_oatdexparse.h	/^struct DexClassDef {$/;"	s
DexClassLookup	dt_oatdexparse.h	/^struct DexClassLookup {$/;"	s
DexCode	dt_oatdexparse.h	/^struct DexCode {$/;"	s
DexEncodedArray	dt_oatdexparse.h	/^struct DexEncodedArray {$/;"	s
DexField	dt_oatdexparse.h	/^struct DexField {$/;"	s
DexFieldAnnotationsItem	dt_oatdexparse.h	/^struct DexFieldAnnotationsItem {$/;"	s
DexFieldId	dt_oatdexparse.h	/^struct DexFieldId {$/;"	s
DexFile	dt_oatdexparse.h	/^struct DexFile { \/\/ 52 bytes$/;"	s
DexFileInfo	dt_oatdexparse.h	/^struct DexFileInfo {$/;"	s
DexFilePlus	dt_oatplus.h	/^struct DexFilePlus {$/;"	s
DexFilePlus2DexFile	dt_dexparse.c	/^	static struct DexFile *DexFilePlus2DexFile(struct DexFilePlus *pDexFilePlus) {$/;"	f	file:
DexFilePlusNode	dt_oatdexparse.h	/^struct DexFilePlusNode {$/;"	s
DexFile_DexFile	dt_art_wrapper.c	/^void* DexFile_DexFile(void *this, void *base, int size, void* location, int checksum, void* mem_map, void* oat_dex_file)$/;"	f
DexHeader	dt_oatdexparse.h	/^struct DexHeader { \/* 112 bytes *\/$/;"	s
DexLink	dt_oatdexparse.h	/^struct DexLink {$/;"	s
DexMapItem	dt_oatdexparse.h	/^struct DexMapItem {$/;"	s
DexMapList	dt_oatdexparse.h	/^struct DexMapList {$/;"	s
DexMemParse	dt_dexparse.c	/^	void DexMemParse(UChar* addr, Int len) {$/;"	f
DexMethod	dt_oatdexparse.h	/^struct DexMethod {$/;"	s
DexMethodAnnotationsItem	dt_oatdexparse.h	/^struct DexMethodAnnotationsItem {$/;"	s
DexMethodId	dt_oatdexparse.h	/^struct DexMethodId {$/;"	s
DexOptHeader	dt_oatdexparse.h	/^struct DexOptHeader {$/;"	s
DexOrJar	dt_oatdexparse.h	/^struct DexOrJar {$/;"	s
DexParameterAnnotationsItem	dt_oatdexparse.h	/^struct DexParameterAnnotationsItem {$/;"	s
DexProto	dt_oatdexparse.h	/^struct DexProto {$/;"	s
DexProtoId	dt_oatdexparse.h	/^struct DexProtoId {$/;"	s
DexStringCache	dt_oatdexparse.h	/^struct DexStringCache {$/;"	s
DexStringId	dt_oatdexparse.h	/^struct DexStringId {$/;"	s
DexTry	dt_oatdexparse.h	/^struct DexTry {$/;"	s
DexTypeId	dt_oatdexparse.h	/^struct DexTypeId {$/;"	s
DexTypeItem	dt_oatdexparse.h	/^struct DexTypeItem {$/;"	s
DexTypeList	dt_oatdexparse.h	/^struct DexTypeList {$/;"	s
DvmDex	dt_oatdexparse.h	/^struct DvmDex {$/;"	s
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = docs\/dt-manual.xml$/;"	m
FD_MAX	dt_wrappers.h	86;"	d
FD_MAX_PATH	dt_wrappers.h	87;"	d
FD_READ	dt_wrappers.h	88;"	d
FD_STAT	dt_wrappers.h	90;"	d
FD_WRITE	dt_wrappers.h	89;"	d
FLAG_FNO_IPA_ICF	Makefile	/^FLAG_FNO_IPA_ICF = $/;"	m
FLAG_FNO_STACK_PROTECTOR	Makefile	/^FLAG_FNO_STACK_PROTECTOR = -fno-stack-protector$/;"	m
FLAG_FSANITIZE	Makefile	/^FLAG_FSANITIZE = $/;"	m
FLAG_M32	Makefile	/^FLAG_M32 = $/;"	m
FLAG_M64	Makefile	/^FLAG_M64 = $/;"	m
FLAG_MIPS32	Makefile	/^FLAG_MIPS32 = $/;"	m
FLAG_MIPS64	Makefile	/^FLAG_MIPS64 = $/;"	m
FLAG_MLONG_DOUBLE_128	Makefile	/^FLAG_MLONG_DOUBLE_128 = -mlong-double-128$/;"	m
FLAG_MMMX	Makefile	/^FLAG_MMMX = $/;"	m
FLAG_MSSE	Makefile	/^FLAG_MSSE = $/;"	m
FLAG_NO_BUILD_ID	Makefile	/^FLAG_NO_BUILD_ID = $/;"	m
FLAG_OCTEON	Makefile	/^FLAG_OCTEON = $/;"	m
FLAG_OCTEON2	Makefile	/^FLAG_OCTEON2 = $/;"	m
FLAG_T_TEXT	Makefile	/^FLAG_T_TEXT = -Ttext-segment$/;"	m
FLAG_UNLIMITED_INLINE_UNIT_GROWTH	Makefile	/^FLAG_UNLIMITED_INLINE_UNIT_GROWTH = --param inline-unit-growth=900$/;"	m
FLAG_W_CAST_ALIGN	Makefile	/^FLAG_W_CAST_ALIGN = $/;"	m
FLAG_W_CAST_QUAL	Makefile	/^FLAG_W_CAST_QUAL = -Wcast-qual$/;"	m
FLAG_W_EMPTY_BODY	Makefile	/^FLAG_W_EMPTY_BODY = -Wempty-body$/;"	m
FLAG_W_EXTRA	Makefile	/^FLAG_W_EXTRA = -Wextra$/;"	m
FLAG_W_FORMAT	Makefile	/^FLAG_W_FORMAT = -Wformat$/;"	m
FLAG_W_FORMAT_SECURITY	Makefile	/^FLAG_W_FORMAT_SECURITY = -Wformat-security$/;"	m
FLAG_W_FORMAT_SIGNEDNESS	Makefile	/^FLAG_W_FORMAT_SIGNEDNESS = $/;"	m
FLAG_W_IGNORED_QUALIFIERS	Makefile	/^FLAG_W_IGNORED_QUALIFIERS = -Wignored-qualifiers$/;"	m
FLAG_W_MISSING_PARAMETER_TYPE	Makefile	/^FLAG_W_MISSING_PARAMETER_TYPE = -Wmissing-parameter-type$/;"	m
FLAG_W_NO_INFINITE_RECURSION	Makefile	/^FLAG_W_NO_INFINITE_RECURSION = $/;"	m
FLAG_W_NO_MEMSET_TRANSPOSED_ARGS	Makefile	/^FLAG_W_NO_MEMSET_TRANSPOSED_ARGS = $/;"	m
FLAG_W_NO_MISMATCHED_NEW_DELETE	Makefile	/^FLAG_W_NO_MISMATCHED_NEW_DELETE = $/;"	m
FLAG_W_NO_NONNULL	Makefile	/^FLAG_W_NO_NONNULL = -Wno-nonnull$/;"	m
FLAG_W_NO_OVERFLOW	Makefile	/^FLAG_W_NO_OVERFLOW = -Wno-overflow$/;"	m
FLAG_W_NO_POINTER_SIGN	Makefile	/^FLAG_W_NO_POINTER_SIGN = -Wno-pointer-sign$/;"	m
FLAG_W_NO_STATIC_LOCAL_IN_INLINE	Makefile	/^FLAG_W_NO_STATIC_LOCAL_IN_INLINE = $/;"	m
FLAG_W_NO_UNINITIALIZED	Makefile	/^FLAG_W_NO_UNINITIALIZED = -Wno-uninitialized$/;"	m
FLAG_W_NO_UNUSED_FUNCTION	Makefile	/^FLAG_W_NO_UNUSED_FUNCTION = -Wno-unused-function$/;"	m
FLAG_W_OLD_STYLE_DECLARATION	Makefile	/^FLAG_W_OLD_STYLE_DECLARATION = -Wold-style-declaration$/;"	m
FLAG_W_WRITE_STRINGS	Makefile	/^FLAG_W_WRITE_STRINGS = -Wwrite-strings$/;"	m
FNNAME_MAX	dt_wrappers.h	80;"	d
Field	dt_oatdexparse.h	/^struct Field {$/;"	s
FilterList	dt_taint.h	/^struct FilterList {$/;"	s
FunList	dt_taint.h	/^struct FunList {$/;"	s
GCs_done	dt_taint.c	/^static UInt GCs_done = 0;$/;"	v	file:
GDB	Makefile	/^GDB = \/usr\/bin\/gdb$/;"	m
GLIBC_VERSION	Makefile	/^GLIBC_VERSION = bionic$/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
Global	dt_wrappers.h	/^enum VariableType { Local = 3, Global = 4 };$/;"	e	enum:VariableType
GlobalFromApplication	dt_wrappers.h	/^enum VariableLocation { GlobalFromApplication = 5, GlobalFromElsewhere = 6 };$/;"	e	enum:VariableLocation
GlobalFromElsewhere	dt_wrappers.h	/^enum VariableLocation { GlobalFromApplication = 5, GlobalFromElsewhere = 6 };$/;"	e	enum:VariableLocation
H32_PC	dt_taint.c	2238;"	d	file:
H32_PC_OP	dt_taint.c	2244;"	d	file:
H32_PRINT	dt_taint.c	2301;"	d	file:
H32_PRINTC	dt_taint.c	2309;"	d	file:
H32_PRINTC_OP	dt_taint.c	2312;"	d	file:
H32_PRINT_OP	dt_taint.c	2304;"	d	file:
H64_PC	dt_taint.c	2250;"	d	file:
H64_PC_OP	dt_taint.c	2256;"	d	file:
H64_PRINT	dt_taint.c	2317;"	d	file:
H64_PRINTC	dt_taint.c	2325;"	d	file:
H64_PRINTC_OP	dt_taint.c	2328;"	d	file:
H64_PRINT_OP	dt_taint.c	2320;"	d	file:
HP_Chunk	dt_wrappers.h	/^} HP_Chunk;$/;"	t	typeref:struct:_HP_Chunk
HWCAP_HAS_ALTIVEC	Makefile	/^HWCAP_HAS_ALTIVEC = $/;"	m
HWCAP_HAS_DFP	Makefile	/^HWCAP_HAS_DFP = $/;"	m
HWCAP_HAS_HTM	Makefile	/^HWCAP_HAS_HTM = $/;"	m
HWCAP_HAS_ISA_2_05	Makefile	/^HWCAP_HAS_ISA_2_05 = $/;"	m
HWCAP_HAS_ISA_2_06	Makefile	/^HWCAP_HAS_ISA_2_06 = $/;"	m
HWCAP_HAS_ISA_2_07	Makefile	/^HWCAP_HAS_ISA_2_07 = $/;"	m
HWCAP_HAS_VSX	Makefile	/^HWCAP_HAS_VSX = $/;"	m
H_EXIT_EARLY	dt_taint.c	2274;"	d	file:
H_EXIT_EARLY_LDST	dt_taint.c	2283;"	d	file:
H_SMT2	dt_taint.c	2333;"	d	file:
H_SMT2_LOAD	dt_taint.c	2341;"	d	file:
H_SMT2_not_implemented	dt_taint.c	2349;"	d	file:
H_VAR	dt_taint.c	2262;"	d	file:
H_WRTMP_BOOKKEEPING	dt_taint.c	2289;"	d	file:
INLINE	dt_oatdexparse.h	10;"	d
INLINE	dt_taint.h	119;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IRAtom	dt_translate.c	/^typedef  IRExpr  IRAtom;$/;"	t	file:
IRConst_string	dt_string.h	/^const char *IRConst_string[] = {$/;"	v
IREndness_string	dt_string.h	/^const char *IREndness_string[] = {$/;"	v
IRExpr_string	dt_string.h	/^const char *IRExpr_string[] = {$/;"	v
IRJumpKind_string	dt_string.h	/^const char *IRJumpKind_string[] = {$/;"	v
IRStmt_string	dt_string.h	/^const char *IRStmt_string[] = {$/;"	v
IRType_MAX	dt_string.h	24;"	d
IRType_string	dt_string.h	/^const char *IRType_string[] = {$/;"	v
IS_SYSCALL_ALLOWED	dt_wrappers.h	108;"	d
InitiatingLoaderList	dt_oatdexparse.h	/^struct InitiatingLoaderList {$/;"	s
InstField	dt_oatdexparse.h	/^struct InstField {$/;"	s
InstructionSet	dt_oatdexparse.h	/^} InstructionSet;$/;"	t	typeref:enum:__anon12
InterfaceEntry	dt_oatdexparse.h	/^struct InterfaceEntry {$/;"	s
InterpBreak	dt_oatdexparse.h	/^union InterpBreak {$/;"	u
InterpSaveState	dt_oatdexparse.h	/^struct InterpSaveState {$/;"	s
JValue	dt_oatdexparse.h	/^union JValue {$/;"	u
JavaVMExt_LoadNativeLibrary	dt_art_wrapper.c	/^Bool JavaVMExt_LoadNativeLibrary(void *this, void *env, char* path, void* class_loader, char* error_msg)$/;"	f
KMAG	dt_taint.c	22;"	d	file:
KNRM	dt_taint.c	23;"	d	file:
KRED	dt_taint.c	21;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS_MPI	Makefile	/^LDFLAGS_MPI = -fpic -shared$/;"	m
LIBART_FUNC	dt_art_wrapper.c	/^LIBART_FUNC(Bool, _ZN3art9JavaVMExt17LoadNativeLibraryEP7_JNIEnvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP8_jobjectPS9_,$/;"	f
LIBART_FUNC	dt_art_wrapper.c	/^LIBART_FUNC(void*,  _ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE,$/;"	f
LIBART_FUNC	dt_art_wrapper.c	/^LIBART_FUNC(void*, _ZN3art7DexFileC2EPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileE,$/;"	f
LIBART_FUNC	dt_art_wrapper.c	4;"	d	file:
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, pthread_mutex_loack,	pthread_mutex_t* mutex) {$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, pthread_mutex_unloack,	pthread_mutex_t* mutex) {$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, read,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, recv,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, recvfrom, $/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, send,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, sendto,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(int, write,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(size_t, fread,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	/^LIBC_FUNC(size_t, fwrite,$/;"	f
LIBC_FUNC	dt_replace_wrapper.c	56;"	d	file:
LIBC_FUNC	dt_replace_wrapper.c	59;"	d	file:
LIBOBJS	Makefile	/^LIBOBJS =  ${LIBOBJDIR}memcmp$U.o$/;"	m
LIBREPLACEMALLOC_AMD64_DARWIN	Makefile	/^LIBREPLACEMALLOC_AMD64_DARWIN = \\$/;"	m
LIBREPLACEMALLOC_AMD64_LINUX	Makefile	/^LIBREPLACEMALLOC_AMD64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_AMD64_SOLARIS	Makefile	/^LIBREPLACEMALLOC_AMD64_SOLARIS = \\$/;"	m
LIBREPLACEMALLOC_ARM64_LINUX	Makefile	/^LIBREPLACEMALLOC_ARM64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_ARM_LINUX	Makefile	/^LIBREPLACEMALLOC_ARM_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_AMD64_DARWIN	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_AMD64_DARWIN = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_AMD64_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_AMD64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_AMD64_SOLARIS	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_AMD64_SOLARIS = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_ARM64_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_ARM64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_ARM_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_ARM_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_MIPS32_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_MIPS32_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_MIPS64_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_MIPS64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_PPC32_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_PPC32_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_PPC64BE_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_PPC64BE_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_PPC64LE_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_PPC64LE_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_S390X_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_S390X_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_TILEGX_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_TILEGX_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_X86_DARWIN	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_X86_DARWIN = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_X86_LINUX	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_X86_LINUX = \\$/;"	m
LIBREPLACEMALLOC_LDFLAGS_X86_SOLARIS	Makefile	/^LIBREPLACEMALLOC_LDFLAGS_X86_SOLARIS = \\$/;"	m
LIBREPLACEMALLOC_MIPS32_LINUX	Makefile	/^LIBREPLACEMALLOC_MIPS32_LINUX = \\$/;"	m
LIBREPLACEMALLOC_MIPS64_LINUX	Makefile	/^LIBREPLACEMALLOC_MIPS64_LINUX = \\$/;"	m
LIBREPLACEMALLOC_PPC32_LINUX	Makefile	/^LIBREPLACEMALLOC_PPC32_LINUX = \\$/;"	m
LIBREPLACEMALLOC_PPC64BE_LINUX	Makefile	/^LIBREPLACEMALLOC_PPC64BE_LINUX = \\$/;"	m
LIBREPLACEMALLOC_PPC64LE_LINUX	Makefile	/^LIBREPLACEMALLOC_PPC64LE_LINUX = \\$/;"	m
LIBREPLACEMALLOC_S390X_LINUX	Makefile	/^LIBREPLACEMALLOC_S390X_LINUX = \\$/;"	m
LIBREPLACEMALLOC_TILEGX_LINUX	Makefile	/^LIBREPLACEMALLOC_TILEGX_LINUX = \\$/;"	m
LIBREPLACEMALLOC_X86_DARWIN	Makefile	/^LIBREPLACEMALLOC_X86_DARWIN = \\$/;"	m
LIBREPLACEMALLOC_X86_LINUX	Makefile	/^LIBREPLACEMALLOC_X86_LINUX = \\$/;"	m
LIBREPLACEMALLOC_X86_SOLARIS	Makefile	/^LIBREPLACEMALLOC_X86_SOLARIS = \\$/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIB_UBSAN	Makefile	/^LIB_UBSAN = $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS =  ${LIBOBJDIR}memcmp$U.lo$/;"	m
LibList	dt_taint.h	/^struct LibList {$/;"	s
Local	dt_wrappers.h	/^enum VariableType { Local = 3, Global = 4 };$/;"	e	enum:VariableType
MAINT	Makefile	/^MAINT = #$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/missing makeinfo$/;"	m
MASK	dt_taint.c	1423;"	d	file:
MAX_LEN	dt_taint.h	14;"	d
MAX_PATH	dt_taint.h	262;"	d
MAX_PRIMARY_ADDRESS	dt_taint.h	65;"	d
MAX_REG_WRITE_SIZE	dt_main.c	71;"	d	file:
MAX_REG_WRITE_SIZE	dt_main.c	80;"	d	file:
MAX_SPILL_JIT_IA	dt_oatdexparse.h	1363;"	d
MCEnv	dt_instrument.h	/^} MCEnv;$/;"	t	typeref:struct:_MCEnv
MCEnv	dt_translate.c	/^MCEnv;$/;"	t	typeref:struct:_MCEnv	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MPI_CC	Makefile	/^MPI_CC = \/usr\/bin\/mpicc$/;"	m
MemMapPlus	dt_oatplus.h	/^struct MemMapPlus {$/;"	s
MemMapping	dt_oatdexparse.h	/^struct MemMapping {$/;"	s
Method	dt_oatdexparse.h	/^struct Method {$/;"	s
MonitorDexFile	dt_oatdexparse.h	/^struct MonitorDexFile {$/;"	s
NONE_SOURCES_COMMON	Makefile	/^NONE_SOURCES_COMMON = dt_main.c 	\\$/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_INDEX	dt_oatdexparse.h	26;"	d
NUM_FLAGS	dt_dexparse.c	868;"	d	file:
N_AUXMAP_L1	dt_taint.c	144;"	d	file:
N_PRIMARY_BITS	dt_taint.h	58;"	d
N_PRIMARY_BITS	dt_taint.h	60;"	d
N_PRIMARY_MAP	dt_taint.h	63;"	d
N_PROF_EVENTS	dt_wrappers.h	22;"	d
OAT_CLASS_TYPE	dt_oatparse.c	/^const HChar * OAT_CLASS_TYPE[3] = {$/;"	v
OAT_DEBUG	dt_oatdexparse.h	13;"	d
OAT_LOGD	dt_oatdexparse.h	15;"	d
OAT_LOGD	dt_oatdexparse.h	18;"	d
OAT_LOGD	dt_oatdexparse.h	20;"	d
OAT_LOGE	dt_oatdexparse.h	24;"	d
OAT_LOGI	dt_oatdexparse.h	23;"	d
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OatClassHeader	dt_oatdexparse.h	/^struct OatClassHeader {$/;"	s
OatClassOffset	dt_oatdexparse.h	/^struct OatClassOffset {$/;"	s
OatClassType	dt_oatdexparse.h	/^} OatClassType;$/;"	t	typeref:enum:__anon11
OatDexFilePlus	dt_oatplus.h	/^struct OatDexFilePlus {$/;"	s
OatHeader	dt_oatdexparse.h	/^struct OatHeader {$/;"	s
OatQuickMethodHeader	dt_oatdexparse.h	/^struct OatQuickMethodHeader {$/;"	s
OatSec	dt_oatdexparse.h	/^struct OatSec {$/;"	s
Object	dt_oatdexparse.h	/^struct Object {$/;"	s
Orig	dt_instrument.h	/^typedef enum { Orig=1, VSh=2 }$/;"	e	enum:__anon24
Orig	dt_translate.c	/^enum { Orig=1, VSh=2 } \/\/, BSh=3 }  Not doing origin tracking$/;"	e	enum:__anon22	file:
PACKAGE	Makefile	/^PACKAGE = valgrind$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = valgrind-users@lists.sourceforge.net$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = Valgrind$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = Valgrind 3.12.0.SVN$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = valgrind$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 3.12.0.SVN$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PERF_FAST_LOADV	dt_taint.h	50;"	d
PERF_FAST_SARP	dt_taint.h	52;"	d
PERF_FAST_STOREV	dt_taint.h	51;"	d
PERL	Makefile	/^PERL = \/usr\/bin\/perl$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PREFERRED_STACK_BOUNDARY_2	Makefile	/^PREFERRED_STACK_BOUNDARY_2 = $/;"	m
PRELOAD_LDFLAGS_AMD64_DARWIN	Makefile	/^PRELOAD_LDFLAGS_AMD64_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch x86_64$/;"	m
PRELOAD_LDFLAGS_AMD64_LINUX	Makefile	/^PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_AMD64_SOLARIS	Makefile	/^PRELOAD_LDFLAGS_AMD64_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) $/;"	m
PRELOAD_LDFLAGS_ARM64_LINUX	Makefile	/^PRELOAD_LDFLAGS_ARM64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_ARM_LINUX	Makefile	/^PRELOAD_LDFLAGS_ARM_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_COMMON_DARWIN	Makefile	/^PRELOAD_LDFLAGS_COMMON_DARWIN = -dynamic -dynamiclib -all_load$/;"	m
PRELOAD_LDFLAGS_COMMON_LINUX	Makefile	/^PRELOAD_LDFLAGS_COMMON_LINUX = -nodefaultlibs -shared \\$/;"	m
PRELOAD_LDFLAGS_COMMON_SOLARIS	Makefile	/^PRELOAD_LDFLAGS_COMMON_SOLARIS = -nodefaultlibs -shared \\$/;"	m
PRELOAD_LDFLAGS_MIPS32_LINUX	Makefile	/^PRELOAD_LDFLAGS_MIPS32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_MIPS64_LINUX	Makefile	/^PRELOAD_LDFLAGS_MIPS64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_PPC32_LINUX	Makefile	/^PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_PPC64BE_LINUX	Makefile	/^PRELOAD_LDFLAGS_PPC64BE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_PPC64LE_LINUX	Makefile	/^PRELOAD_LDFLAGS_PPC64LE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_S390X_LINUX	Makefile	/^PRELOAD_LDFLAGS_S390X_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_TILEGX_LINUX	Makefile	/^PRELOAD_LDFLAGS_TILEGX_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_X86_DARWIN	Makefile	/^PRELOAD_LDFLAGS_X86_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch i386$/;"	m
PRELOAD_LDFLAGS_X86_LINUX	Makefile	/^PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) $/;"	m
PRELOAD_LDFLAGS_X86_SOLARIS	Makefile	/^PRELOAD_LDFLAGS_X86_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) $/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIM_BOOLEAN	dt_oatdexparse.h	/^	PRIM_BOOLEAN    = 2,$/;"	e	enum:PrimitiveType
PRIM_BYTE	dt_oatdexparse.h	/^	PRIM_BYTE       = 3,$/;"	e	enum:PrimitiveType
PRIM_CHAR	dt_oatdexparse.h	/^	PRIM_CHAR       = 5,$/;"	e	enum:PrimitiveType
PRIM_DOUBLE	dt_oatdexparse.h	/^	PRIM_DOUBLE     = 9,$/;"	e	enum:PrimitiveType
PRIM_FLOAT	dt_oatdexparse.h	/^	PRIM_FLOAT      = 8,$/;"	e	enum:PrimitiveType
PRIM_INT	dt_oatdexparse.h	/^	PRIM_INT        = 6,$/;"	e	enum:PrimitiveType
PRIM_LONG	dt_oatdexparse.h	/^	PRIM_LONG       = 7,$/;"	e	enum:PrimitiveType
PRIM_NOT	dt_oatdexparse.h	/^	PRIM_NOT        = 0,       \/* value is a reference type, not a primitive type *\/$/;"	e	enum:PrimitiveType
PRIM_SHORT	dt_oatdexparse.h	/^	PRIM_SHORT      = 4,$/;"	e	enum:PrimitiveType
PRIM_VOID	dt_oatdexparse.h	/^	PRIM_VOID       = 1,$/;"	e	enum:PrimitiveType
PROF_EVENT	dt_wrappers.h	27;"	d
PROF_EVENT	dt_wrappers.h	37;"	d
PROGRAMS	Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PrimitiveType	dt_oatdexparse.h	/^enum PrimitiveType {$/;"	g
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RECORD_OVERLAP_ERROR	dt_replace_wrapper.c	369;"	d	file:
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RI_MAX	dt_taint.h	134;"	d
RegisterMap	dt_oatdexparse.h	/^struct RegisterMap {$/;"	s
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SMT2_ty	dt_stmt2.c	/^const Int SMT2_ty[] = {$/;"	v
SM_CHUNKS	dt_taint.h	71;"	d
SM_DIST_NOACCESS	dt_taint.c	41;"	d	file:
SM_DIST_TAINTED	dt_taint.c	42;"	d	file:
SM_DIST_UNTAINTED	dt_taint.c	43;"	d	file:
SM_MASK	dt_taint.h	80;"	d
SM_OFF	dt_taint.h	72;"	d
SM_OFF_16	dt_taint.h	73;"	d
SM_SIZE	dt_taint.h	79;"	d
SOURCES	Makefile	/^SOURCES = $(datatrace_arm_linux_SOURCES) \\$/;"	m
STACK_SIZE	dt_taint.h	15;"	d
STACK_TRACE_SIZE	dt_wrappers.h	10;"	d
STEPUP_GROWTH_FACTOR	dt_taint.c	526;"	d	file:
STEPUP_SURVIVOR_PROPORTION	dt_taint.c	525;"	d	file:
STRIP	Makefile	/^STRIP = strip$/;"	m
STRRCHR	dt_replace_wrapper.c	378;"	d	file:
SUBDIRS	Makefile	/^SUBDIRS = . tests$/;"	m
SYSCALLS_MAX	dt_wrappers.h	106;"	d
SecMap	dt_taint.h	/^} SecMap;$/;"	t	typeref:struct:__anon26
SecVBitNode	dt_taint.c	/^SecVBitNode;$/;"	t	typeref:struct:__anon20	file:
StaticField	dt_oatdexparse.h	/^struct StaticField{$/;"	s
StdString	dt_oatplus.h	/^struct StdString {$/;"	s
TG_N_THREADS	dt_wrappers.h	91;"	d
TI_MAX	dt_taint.h	133;"	d
TOOL_DEPENDENCIES_ARM_LINUX	Makefile	/^TOOL_DEPENDENCIES_ARM_LINUX = \\$/;"	m
TOOL_LDADD_ARM_LINUX	Makefile	/^TOOL_LDADD_ARM_LINUX = \\$/;"	m
TOOL_LDADD_COMMON	Makefile	/^TOOL_LDADD_COMMON = -lgcc$/;"	m
TOOL_LDFLAGS_AMD64_DARWIN	Makefile	/^TOOL_LDFLAGS_AMD64_DARWIN = \\$/;"	m
TOOL_LDFLAGS_AMD64_LINUX	Makefile	/^TOOL_LDFLAGS_AMD64_LINUX = \\$/;"	m
TOOL_LDFLAGS_AMD64_SOLARIS	Makefile	/^TOOL_LDFLAGS_AMD64_SOLARIS = \\$/;"	m
TOOL_LDFLAGS_ARM64_LINUX	Makefile	/^TOOL_LDFLAGS_ARM64_LINUX = \\$/;"	m
TOOL_LDFLAGS_ARM_LINUX	Makefile	/^TOOL_LDFLAGS_ARM_LINUX = $(TOOL_LDFLAGS_COMMON_LINUX)  \\$/;"	m
TOOL_LDFLAGS_COMMON_DARWIN	Makefile	/^TOOL_LDFLAGS_COMMON_DARWIN = \\$/;"	m
TOOL_LDFLAGS_COMMON_LINUX	Makefile	/^TOOL_LDFLAGS_COMMON_LINUX = \\$/;"	m
TOOL_LDFLAGS_COMMON_SOLARIS	Makefile	/^TOOL_LDFLAGS_COMMON_SOLARIS = \\$/;"	m
TOOL_LDFLAGS_MIPS32_LINUX	Makefile	/^TOOL_LDFLAGS_MIPS32_LINUX = \\$/;"	m
TOOL_LDFLAGS_MIPS64_LINUX	Makefile	/^TOOL_LDFLAGS_MIPS64_LINUX = \\$/;"	m
TOOL_LDFLAGS_PPC32_LINUX	Makefile	/^TOOL_LDFLAGS_PPC32_LINUX = \\$/;"	m
TOOL_LDFLAGS_PPC64BE_LINUX	Makefile	/^TOOL_LDFLAGS_PPC64BE_LINUX = \\$/;"	m
TOOL_LDFLAGS_PPC64LE_LINUX	Makefile	/^TOOL_LDFLAGS_PPC64LE_LINUX = \\$/;"	m
TOOL_LDFLAGS_S390X_LINUX	Makefile	/^TOOL_LDFLAGS_S390X_LINUX = \\$/;"	m
TOOL_LDFLAGS_TILEGX_LINUX	Makefile	/^TOOL_LDFLAGS_TILEGX_LINUX = \\$/;"	m
TOOL_LDFLAGS_X86_DARWIN	Makefile	/^TOOL_LDFLAGS_X86_DARWIN = \\$/;"	m
TOOL_LDFLAGS_X86_LINUX	Makefile	/^TOOL_LDFLAGS_X86_LINUX = \\$/;"	m
TOOL_LDFLAGS_X86_SOLARIS	Makefile	/^TOOL_LDFLAGS_X86_SOLARIS = \\$/;"	m
TRACE_DEX_FILE_DATA	dt_oatdexparse.h	48;"	d
TempKind	dt_instrument.h	/^TempKind;$/;"	t	typeref:enum:__anon24
TempKind	dt_translate.c	/^TempKind;$/;"	t	typeref:enum:__anon22	file:
TempMapEnt	dt_instrument.h	/^} TempMapEnt;$/;"	t	typeref:struct:__anon25
TempMapEnt	dt_translate.c	/^TempMapEnt;$/;"	t	typeref:struct:__anon23	file:
Thread	dt_oatdexparse.h	/^struct Thread {$/;"	s
UNALIGNED_OR_HIGH	dt_taint.c	1427;"	d	file:
VALGRIND_CHECK_MEM_TAINTED	datatrace.h	57;"	d
VALGRIND_CHECK_VALUE_IS_DEFINED	dt_replace_wrapper.c	372;"	d	file:
VALGRIND_COPY_MEM_TAINT	datatrace.h	82;"	d
VALGRIND_DISCARD_INS_CACHE	datatrace.h	51;"	d
VALGRIND_MAKE_MEM_NOACCESS	datatrace.h	63;"	d
VALGRIND_MAKE_MEM_TAINTED	datatrace.h	70;"	d
VALGRIND_MAKE_MEM_UNTAINTED	datatrace.h	77;"	d
VALT_LOAD_ADDRESS_PRI	Makefile	/^VALT_LOAD_ADDRESS_PRI = 0x38000000$/;"	m
VALT_LOAD_ADDRESS_SEC	Makefile	/^VALT_LOAD_ADDRESS_SEC = 0xUNSET$/;"	m
VAR_MAX	dt_wrappers.h	96;"	d
VAR_READ	dt_wrappers.h	97;"	d
VAR_WRITE	dt_wrappers.h	98;"	d
VA_BITS16_NOACCESS	dt_taint.h	115;"	d
VA_BITS16_TAINTED	dt_taint.h	116;"	d
VA_BITS16_UNTAINTED	dt_taint.h	117;"	d
VA_BITS2_NOACCESS	dt_taint.h	99;"	d
VA_BITS2_PARTUNTAINTED	dt_taint.h	102;"	d
VA_BITS2_TAINTED	dt_taint.h	100;"	d
VA_BITS2_UNTAINTED	dt_taint.h	101;"	d
VA_BITS4_NOACCESS	dt_taint.h	105;"	d
VA_BITS4_TAINTED	dt_taint.h	106;"	d
VA_BITS4_UNTAINTED	dt_taint.h	107;"	d
VA_BITS8_NOACCESS	dt_taint.h	110;"	d
VA_BITS8_TAINTED	dt_taint.h	111;"	d
VA_BITS8_UNTAINTED	dt_taint.h	112;"	d
VERSION	Makefile	/^VERSION = 3.12.0.SVN$/;"	m
VGCONF_ARCH_PRI	Makefile	/^VGCONF_ARCH_PRI = arm$/;"	m
VGCONF_ARCH_SEC	Makefile	/^VGCONF_ARCH_SEC = $/;"	m
VGCONF_OS	Makefile	/^VGCONF_OS = linux$/;"	m
VGCONF_PLATFORM_PRI_CAPS	Makefile	/^VGCONF_PLATFORM_PRI_CAPS = ARM_LINUX$/;"	m
VGCONF_PLATFORM_SEC_CAPS	Makefile	/^VGCONF_PLATFORM_SEC_CAPS = $/;"	m
VGCONF_PLATVARIANT	Makefile	/^VGCONF_PLATVARIANT = android$/;"	m
VG_TMPDIR	Makefile	/^VG_TMPDIR = \/sdcard $/;"	m
VG_USERREQ__CHECK_MEM_TAINTED	datatrace.h	/^	VG_USERREQ__CHECK_MEM_TAINTED,$/;"	e	enum:__anon21
VG_USERREQ__COPY_MEM_TAINT	datatrace.h	/^	VG_USERREQ__COPY_MEM_TAINT,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_READ	datatrace.h	/^	VG_USERREQ__DATATRACE_READ,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_RECV	datatrace.h	/^	VG_USERREQ__DATATRACE_RECV,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_RECVFROM	datatrace.h	/^	VG_USERREQ__DATATRACE_RECVFROM,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_SEND	datatrace.h	/^	VG_USERREQ__DATATRACE_SEND,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_SENDTO	datatrace.h	/^	VG_USERREQ__DATATRACE_SENDTO,$/;"	e	enum:__anon21
VG_USERREQ__DATATRACE_WRITE	datatrace.h	/^	VG_USERREQ__DATATRACE_WRITE,$/;"	e	enum:__anon21
VG_USERREQ__MAKE_MEM_NOACCESS	datatrace.h	/^	VG_USERREQ__MAKE_MEM_NOACCESS,$/;"	e	enum:__anon21
VG_USERREQ__MAKE_MEM_TAINTED	datatrace.h	/^	VG_USERREQ__MAKE_MEM_TAINTED,$/;"	e	enum:__anon21
VG_USERREQ__MAKE_MEM_UNTAINTED	datatrace.h	/^	VG_USERREQ__MAKE_MEM_UNTAINTED,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_DEFINECLASS	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_DEFINECLASS,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_DEFINECLASS_PRE	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_DEFINECLASS_PRE,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_DEXFILE	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_DEXFILE,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_DEXFILE_PRE	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_DEXFILE_PRE,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY_PRE	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY_PRE,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_TEST	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_TEST,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_ART_TEST_PRE	datatrace.h	/^  VG_USERREQ__WRAPPER_ART_TEST_PRE,$/;"	e	enum:__anon21
VG_USERREQ__WRAPPER_SYSTEM	datatrace.h	/^	 VG_USERREQ__WRAPPER_SYSTEM$/;"	e	enum:__anon21
VSh	dt_instrument.h	/^typedef enum { Orig=1, VSh=2 }$/;"	e	enum:__anon24
VSh	dt_translate.c	/^enum { Orig=1, VSh=2 } \/\/, BSh=3 }  Not doing origin tracking$/;"	e	enum:__anon22	file:
V_BITS16_TAINTED	dt_taint.h	89;"	d
V_BITS16_UNTAINTED	dt_taint.h	88;"	d
V_BITS32_TAINTED	dt_taint.h	92;"	d
V_BITS32_UNTAINTED	dt_taint.h	91;"	d
V_BITS64_TAINTED	dt_taint.h	95;"	d
V_BITS64_UNTAINTED	dt_taint.h	94;"	d
V_BITS8_TAINTED	dt_taint.h	86;"	d
V_BITS8_UNTAINTED	dt_taint.h	85;"	d
V_BIT_TAINTED	dt_taint.h	83;"	d
V_BIT_UNTAINTED	dt_taint.h	82;"	d
VariableLocation	dt_wrappers.h	/^enum VariableLocation { GlobalFromApplication = 5, GlobalFromElsewhere = 6 };$/;"	g
VariableType	dt_wrappers.h	/^enum VariableType { Local = 3, Global = 4 };$/;"	g
Vg_DatatraceClientRequest	datatrace.h	/^} Vg_DatatraceClientRequest;$/;"	t	typeref:enum:__anon21
WITH_JIT	dt_oatdexparse.h	1362;"	d
XcurFrame	dt_oatdexparse.h	/^	void*       XcurFrame;$/;"	m	struct:Thread
_DT_DEBUG_H	dt_debug.h	2;"	d
_DT_INSTRUMENT_H	dt_instrument.h	2;"	d
_DT_OAT_DEX_PARSE_H	dt_oatdexparse.h	2;"	d
_DT_OAT_PLUS_H	dt_oatplus.h	2;"	d
_DT_TAINT_H	dt_taint.h	2;"	d
_DT_WRAPPERS_h	dt_wrappers.h	2;"	d
_HP_Chunk	dt_wrappers.h	/^typedef struct _HP_Chunk {$/;"	s
_MCEnv	dt_instrument.h	/^typedef struct _MCEnv {$/;"	s
_MCEnv	dt_translate.c	/^struct _MCEnv {$/;"	s	file:
__COPY_H	copy.h	33;"	d
__DATATRACE_H	datatrace.h	2;"	d
__DT_STRING_H	dt_string.h	2;"	d
__builtin_delete	dt_mem_wrappers.c	/^void DT_(__builtin_delete) ( ThreadId tid, void* p )$/;"	f
__builtin_new	dt_mem_wrappers.c	/^void* DT_(__builtin_new) ( ThreadId tid, SizeT szB )$/;"	f
__builtin_vec_delete	dt_mem_wrappers.c	/^void DT_(__builtin_vec_delete) ( ThreadId tid, void* p )$/;"	f
__builtin_vec_new	dt_mem_wrappers.c	/^void* DT_(__builtin_vec_new) ( ThreadId tid, SizeT szB )$/;"	f
_b	dt_oatdexparse.h	/^		s1    _b[3];$/;"	m	struct:JValue::__anon14
_c	dt_oatdexparse.h	/^		u2    _c;$/;"	m	struct:JValue::__anon15
_s	dt_oatdexparse.h	/^		s2    _s;$/;"	m	struct:JValue::__anon16
_ti	dt_taint.h	277;"	d
_z	dt_oatdexparse.h	/^		u1    _z[3];$/;"	m	struct:JValue::__anon13
a	dt_taint.c	/^	Addr  a;$/;"	m	struct:__anon20	file:
a2t32	dt_stmt2.c	38;"	d	file:
a2t64	dt_stmt2.c	44;"	d	file:
a2v32	dt_stmt2.c	35;"	d	file:
a2v64	dt_stmt2.c	41;"	d	file:
abs_builddir	Makefile	/^abs_builddir = \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/datatrace$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/datatrace$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = $/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = $/;"	m
accessFlags	dt_oatdexparse.h	/^	UInt              accessFlags;$/;"	m	struct:ClassObject
accessFlags	dt_oatdexparse.h	/^	UInt             accessFlags;$/;"	m	struct:Field
accessFlags	dt_oatdexparse.h	/^	UInt accessFlags;$/;"	m	struct:DexField
accessFlags	dt_oatdexparse.h	/^	UInt accessFlags;$/;"	m	struct:DexMethod
accessFlags	dt_oatdexparse.h	/^	\/*0x04*\/ UInt  accessFlags;$/;"	m	struct:DexClassDef
accessFlags	dt_oatdexparse.h	/^	u4		          accessFlags;$/;"	m	struct:Method
addDexFileList	dt_dexparse.c	/^struct MonitorDexFile* addDexFileList( struct DexFile* pDexFile ) {$/;"	f
addFilterFun	dt_translate.c	/^Bool addFilterFun(const HChar* soname, const HChar* fnname) {$/;"	f
addFilterList	dt_translate.c	/^void addFilterList( Addr avma, SizeT size ) {$/;"	f
addStmt	dt_translate.c	/^static inline void addStmt( MCEnv *mce, IRStmt *st) {$/;"	f	file:
addr	dt_oatdexparse.h	/^	void*   addr;           \/* start of data *\/$/;"	m	struct:MemMapping
adler32Checksum	dt_oatdexparse.h	/^	UInt  adler32Checksum;$/;"	m	struct:OatHeader
all	dt_oatdexparse.h	/^	volatile Long   all;$/;"	m	union:InterpBreak
alloc_and_record_block	dt_mem_wrappers.c	/^void* alloc_and_record_block ( ThreadId tid, SizeT req_szB, SizeT req_alignB,$/;"	f	file:
allocatedSize	dt_oatdexparse.h	/^	Int allocatedSize; \/* size of the allocated buffer, if allocated *\/$/;"	m	struct:DexStringCache
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__append_3	Makefile	/^am__append_3 = -nostdlib$/;"	m
am__append_4	Makefile	/^am__append_4 = -Wl,-z,noexecstack$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__datatrace__linux_SOURCES_DIST	Makefile	/^am__datatrace__linux_SOURCES_DIST = dt_main.c \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__objects_1	Makefile	/^am__objects_1 =  \\$/;"	m
am__objects_2	Makefile	/^am__objects_2 =  \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am_datatrace_arm_linux_OBJECTS	Makefile	/^am_datatrace_arm_linux_OBJECTS = $(am__objects_1)$/;"	m
annotation	dt_oatdexparse.h	/^	UChar  annotation[1];              \/* data in encoded_annotation format *\/$/;"	m	struct:DexAnnotationItem
annotationsOff	dt_oatdexparse.h	/^	UInt  annotationsOff;             \/* offset to DexAnnotationSetItem *\/$/;"	m	struct:DexAnnotationSetRefItem
annotationsOff	dt_oatdexparse.h	/^	UInt  annotationsOff;             \/* offset to DexAnnotationSetItem *\/$/;"	m	struct:DexFieldAnnotationsItem
annotationsOff	dt_oatdexparse.h	/^	UInt  annotationsOff;             \/* offset to DexAnnotationSetItem *\/$/;"	m	struct:DexMethodAnnotationsItem
annotationsOff	dt_oatdexparse.h	/^	UInt  annotationsOff;             \/* offset to DexAnotationSetRefList *\/$/;"	m	struct:DexParameterAnnotationsItem
annotationsOff	dt_oatdexparse.h	/^	\/*0x14*\/ UInt  annotationsOff;     \/* file offset to annotations_directory_item *\/$/;"	m	struct:DexClassDef
anonymous_obj	dt_main.c	/^static const HChar *anonymous_obj = "???";$/;"	v	file:
array	dt_oatdexparse.h	/^	UChar  array[1];                   \/* data in encoded_array format *\/$/;"	m	struct:DexEncodedArray
arrayDim	dt_oatdexparse.h	/^	Int								arrayDim;$/;"	m	struct:ClassObject
asciify	dt_dexparse.c	/^static void asciify(HChar* out, const UChar* data, UInt len)$/;"	f	file:
assign	dt_translate.c	/^void assign ( HChar cat, MCEnv* mce, IRTemp tmp, IRExpr* expr ) {$/;"	f	file:
assignNew	dt_translate.c	/^static IRAtom* assignNew ( HChar cat, MCEnv* mce, IRType ty, IRExpr* e ) \/\/418$/;"	f	file:
atoi	dt_taint.c	/^Int atoi( HChar *s ){$/;"	f
atom2vbits	dt_translate.c	/^IRExpr* atom2vbits ( MCEnv* mce, IRAtom* atom )$/;"	f	file:
auxmap_L1	dt_taint.c	/^auxmap_L1[N_AUXMAP_L1];$/;"	v	typeref:struct:__anon19	file:
auxmap_L2	dt_taint.c	/^static OSet* auxmap_L2 = NULL;$/;"	v	file:
b	dt_oatdexparse.h	/^		s1    b;$/;"	m	struct:JValue::__anon14
b	dt_oatdexparse.h	/^	s1      b;$/;"	m	union:JValue
bailPtr	dt_oatdexparse.h	/^	void*										bailPtr;$/;"	m	struct:InterpSaveState
base	dt_taint.c	/^	Addr       base;$/;"	m	struct:__anon19	file:
base	dt_taint.c	/^	Addr    base;$/;"	m	struct:__anon18	file:
baseAddr	dt_oatdexparse.h	/^	Addr						baseAddr;$/;"	m	struct:MonitorDexFile
baseAddr	dt_oatdexparse.h	/^	const UChar*       baseAddr;$/;"	m	struct:DexFile
baseAddr	dt_oatdexparse.h	/^	void*   baseAddr;       \/* page-aligned base address *\/$/;"	m	struct:MemMapping
baseLength	dt_oatdexparse.h	/^	Int  baseLength;     \/* length of mapping *\/$/;"	m	struct:MemMapping
base_begin_	dt_oatplus.h	/^	\/*0x14*\/ void*  base_begin_;$/;"	m	struct:MemMapPlus
base_size	dt_oatplus.h	/^	\/*0x18*\/ UInt		base_size;$/;"	m	struct:MemMapPlus
begin	dt_oatdexparse.h	/^	Addr		begin;			\/* The beginning address of mapped memory *\/$/;"	m	struct:DexFileInfo
begin_	dt_oatplus.h	/^	\/*0x04*\/ UChar*	begin_;$/;"	m	struct:DexFilePlus
begin_	dt_oatplus.h	/^	\/*0x0c*\/ UChar* begin_;$/;"	m	struct:MemMapPlus
binary16Ix16	dt_translate.c	/^IRAtom* binary16Ix16 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary16Ix2	dt_translate.c	/^IRAtom* binary16Ix2 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary16Ix4	dt_translate.c	/^IRAtom* binary16Ix4 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary16Ix8	dt_translate.c	/^IRAtom* binary16Ix8 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary32F0x4	dt_translate.c	/^IRAtom* binary32F0x4 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY )$/;"	f	file:
binary32Fx2	dt_translate.c	/^IRAtom* binary32Fx2 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY )$/;"	f	file:
binary32Fx4	dt_translate.c	/^IRAtom* binary32Fx4 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY ) \/\/1761$/;"	f	file:
binary32Fx4_w_rm	dt_translate.c	/^IRAtom* binary32Fx4_w_rm ( MCEnv* mce, IRAtom* vRM,$/;"	f	file:
binary32Fx8	dt_translate.c	/^IRAtom* binary32Fx8 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY )$/;"	f	file:
binary32Fx8_w_rm	dt_translate.c	/^IRAtom* binary32Fx8_w_rm ( MCEnv* mce, IRAtom* vRM,$/;"	f	file:
binary32Ix2	dt_translate.c	/^IRAtom* binary32Ix2 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary32Ix4	dt_translate.c	/^IRAtom* binary32Ix4 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary32Ix8	dt_translate.c	/^IRAtom* binary32Ix8 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary64F0x2	dt_translate.c	/^IRAtom* binary64F0x2 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY )$/;"	f	file:
binary64Fx2	dt_translate.c	/^IRAtom* binary64Fx2 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY ) \/\/1807$/;"	f	file:
binary64Fx2_w_rm	dt_translate.c	/^IRAtom* binary64Fx2_w_rm ( MCEnv* mce, IRAtom* vRM,$/;"	f	file:
binary64Fx4	dt_translate.c	/^IRAtom* binary64Fx4 ( MCEnv* mce, IRAtom* vatomX, IRAtom* vatomY )$/;"	f	file:
binary64Fx4_w_rm	dt_translate.c	/^IRAtom* binary64Fx4_w_rm ( MCEnv* mce, IRAtom* vRM,$/;"	f	file:
binary64Ix1	dt_translate.c	/^IRAtom* binary64Ix1 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary64Ix2	dt_translate.c	/^IRAtom* binary64Ix2 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary64Ix4	dt_translate.c	/^IRAtom* binary64Ix4 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary8Ix16	dt_translate.c	/^IRAtom* binary8Ix16 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 ) \/\/1927$/;"	f	file:
binary8Ix32	dt_translate.c	/^IRAtom* binary8Ix32 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary8Ix4	dt_translate.c	/^IRAtom* binary8Ix4 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
binary8Ix8	dt_translate.c	/^IRAtom* binary8Ix8 ( MCEnv* mce, IRAtom* vatom1, IRAtom* vatom2 )$/;"	f	file:
bind_shadow_tmp_to_orig	dt_translate.c	/^static void bind_shadow_tmp_to_orig ( UChar how,$/;"	f	file:
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
binop	dt_translate.c	301;"	d	file:
bleargh	dt_oatdexparse.h	/^	UChar  bleargh;$/;"	m	struct:DexLink
bogusLiterals	dt_instrument.h	/^	Bool		bogusLiterals;$/;"	m	struct:_MCEnv
bogusLiterals	dt_translate.c	/^	Bool    bogusLiterals;$/;"	m	struct:_MCEnv	file:
breakFlags	dt_oatdexparse.h	/^		UChar			 breakFlags;$/;"	m	struct:InterpBreak::__anon17
buffer	dt_oatdexparse.h	/^	HChar buffer[120];     \/* buffer used to hold small-enough results *\/$/;"	m	struct:DexStringCache
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
byteOffset	dt_oatdexparse.h	/^	Int             byteOffset;$/;"	m	struct:InstField
byte_offset_w	dt_taint.c	/^static INLINE UWord byte_offset_w ( UWord wordszB, Bool bigendian, UWord byteno ) {$/;"	f	file:
c	dt_oatdexparse.h	/^		u2    c;$/;"	m	struct:JValue::__anon15
c	dt_oatdexparse.h	/^	u2      c;$/;"	m	union:JValue
calloc	dt_mem_wrappers.c	/^void* DT_(calloc) ( ThreadId tid, SizeT m, SizeT szB )$/;"	f
cardTable	dt_oatdexparse.h	/^	UChar*         cardTable;$/;"	m	struct:Thread
checkForBogusLiterals	dt_translate.c	/^static Bool checkForBogusLiterals ( \/*FLAT*\/ IRStmt* st )$/;"	f	file:
check_fd_access	dt_syswrap.c	/^void DT_(check_fd_access)(ThreadId tid, UInt fd, Int fd_request) {$/;"	f
check_mem_tainted	dt_taint.c	/^Bool DT_(check_mem_tainted)( Addr a, SizeT len ) {$/;"	f
checksum	dt_oatdexparse.h	/^	UInt  checksum;           \/* adler32 checksum covering deps\/opt *\/$/;"	m	struct:DexOptHeader
checksum	dt_oatdexparse.h	/^	\/* 08 *\/UInt  checksum;           \/* adler32 checksum *\/$/;"	m	struct:DexHeader
classAnnotationsOff	dt_oatdexparse.h	/^	UInt  classAnnotationsOff;  \/* offset to DexAnnotationSetItem *\/$/;"	m	struct:DexAnnotationsDirectoryItem
classDataOff	dt_oatdexparse.h	/^	\/*0x18*\/ UInt  classDataOff;       \/* file offset to class_data_item *\/$/;"	m	struct:DexClassDef
classDefOffset	dt_oatdexparse.h	/^		Int		classDefOffset;         \/\/ in bytes, from start of DEX$/;"	m	struct:DexClassLookup::__anon10
classDefsOff	dt_oatdexparse.h	/^	\/* 64 *\/UInt  classDefsOff;$/;"	m	struct:DexHeader
classDefsSize	dt_oatdexparse.h	/^	\/* 60 *\/UInt  classDefsSize;$/;"	m	struct:DexHeader
classDescriptorHash	dt_oatdexparse.h	/^		UInt  classDescriptorHash;    \/\/ class descriptor hash code$/;"	m	struct:DexClassLookup::__anon10
classDescriptorOffset	dt_oatdexparse.h	/^		Int   classDescriptorOffset;  \/\/ in bytes, from start of DEX$/;"	m	struct:DexClassLookup::__anon10
classIdx	dt_oatdexparse.h	/^	UShort  classIdx;$/;"	m	struct:DexMethodId
classIdx	dt_oatdexparse.h	/^	UShort classIdx;$/;"	m	struct:DexFieldId
classIdx	dt_oatdexparse.h	/^	\/*0x00*\/ UInt  classIdx;           \/* index into typeIds for this class *\/$/;"	m	struct:DexClassDef
classLoader	dt_oatdexparse.h	/^	struct Object*         classLoader;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::Object
class_def_index_	dt_oatplus.h	/^	\/*0x40*\/ void		*class_def_index_; $/;"	m	struct:DexFilePlus
class_defs_	dt_oatplus.h	/^	\/*0x38*\/ struct ClassDef	*class_defs_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::ClassDef
clazz	dt_oatdexparse.h	/^	struct ClassObject*			clazz;$/;"	m	struct:Method	typeref:struct:Method::ClassObject
clazz	dt_oatdexparse.h	/^	struct ClassObject*    clazz;$/;"	m	struct:InterfaceEntry	typeref:struct:InterfaceEntry::ClassObject
clazz	dt_oatdexparse.h	/^	void*		  				clazz;$/;"	m	struct:Field
clazz	dt_oatdexparse.h	/^	void* clazz;$/;"	m	struct:Object
clear_mem_tainted	dt_taint.c	/^void DT_(clear_mem_tainted)() { }$/;"	f
client_binary_name	dt_taint.c	/^HChar* client_binary_name = NULL;$/;"	v
clo_critical_ins_only	dt_main.c	/^Bool          DT_(clo_critical_ins_only)      = False;$/;"	v
clo_smt2	dt_main.c	/^Bool          DT_(clo_smt2)                   = False;$/;"	v
clo_taint_all	dt_main.c	/^Bool          DT_(clo_taint_all)              = False;$/;"	v
clo_taint_begin	dt_main.c	/^Bool					DT_(clo_taint_begin)						= False;$/;"	v
clo_taint_len	dt_main.c	/^Int           DT_(clo_taint_len)              = 0x8;$/;"	v
clo_taint_start	dt_main.c	/^Int           DT_(clo_taint_start)            = 0;$/;"	v
clo_tainted_ins_only	dt_main.c	/^Bool          DT_(clo_tainted_ins_only)       = False;$/;"	v
cloneLen	dt_oatdexparse.h	/^	UInt						cloneLen;$/;"	m	struct:MonitorDexFile
cloneMem	dt_oatdexparse.h	/^	Addr						cloneMem;$/;"	m	struct:MonitorDexFile
close_dex_fun_	dt_oatplus.h	/^	\/*0x00*\/ void*  close_dex_fun_;$/;"	m	struct:DexFilePlus
codeOff	dt_oatdexparse.h	/^	UInt codeOff;      \/* file offset to a code_item *\/$/;"	m	struct:DexMethod
codeSize	dt_oatdexparse.h	/^	UInt codeSize;$/;"	m	struct:OatQuickMethodHeader
complainIfTainted	dt_translate.c	/^static void complainIfTainted ( MCEnv* mce, IRAtom* atom, IRDirty* di2 )$/;"	f	file:
convert_Value	dt_translate.c	/^static IRExpr* convert_Value( MCEnv* mce, IRAtom* value ){$/;"	f	file:
copyAllClasses	dt_dexparse.c	/^	Bool copyAllClasses(const struct DexFile* pDexFile) {$/;"	f
copyDexClass	dt_dexparse.c	/^	Bool copyDexClass(const struct DexFile* pDexFile, Int idx, HChar* desc) {$/;"	f
copyDexFileHead	dt_dexparse.c	/^	Bool copyDexFileHead(const struct DexFile* pDexFile) {$/;"	f
copyDexFileOptHeader	dt_dexparse.c	/^	Bool copyDexFileOptHeader(const struct DexFile* pDexFile) {$/;"	f
copyMethod	dt_dexparse.c	/^	static	Bool copyMethod(struct MonitorDexFile* pMDexFile, $/;"	f	file:
copyMthCode	dt_dexparse.c	/^	Bool copyMthCode(const struct DexFile* pDexFile, const struct Method* pMethod) {$/;"	f
copyOneClass	dt_dexparse.c	/^	Bool copyOneClass(const struct DexFile* pDexFile, HChar* desc) {$/;"	f
copy_address_range_state	dt_taint.c	/^void DT_(copy_address_range_state) (Addr src, Addr dst, SizeT len) {$/;"	f
copy_for_writing	dt_taint.c	/^static SecMap* copy_for_writing ( SecMap* dist_sm )$/;"	f	file:
coreSpillMask	dt_oatdexparse.h	/^	UInt coreSpillMask;$/;"	m	struct:OatQuickMethodHeader
countOnes	dt_dexparse.c	/^static Int countOnes(UInt val)$/;"	f	file:
createAccessFlagStr	dt_dexparse.c	/^static HChar* createAccessFlagStr(UInt flags, enum AccessFor forWhat)$/;"	f	file:
createDexFileMem	dt_dexparse.c	/^	struct MonitorDexFile* createDexFileMem(const struct DexFile* pDexFile, Addr addr, UInt len) {$/;"	f
createSecVBitTable	dt_taint.c	/^static OSet* createSecVBitTable(void)$/;"	f	file:
create_dirty_BINOP	dt_translate.c	/^IRDirty* create_dirty_BINOP( MCEnv* mce, IRStmt *clone,$/;"	f
create_dirty_CAS	dt_translate.c	/^IRDirty* create_dirty_CAS( MCEnv* mce, IRCAS* details ){$/;"	f
create_dirty_CCALL	dt_translate.c	/^IRDirty* create_dirty_CCALL( MCEnv* mce, IRStmt *clone, IRTemp tmp,$/;"	f
create_dirty_DIRTY	dt_translate.c	/^IRDirty* create_dirty_DIRTY( MCEnv* mce, IRDirty* details ){$/;"	f
create_dirty_EXIT	dt_translate.c	/^IRDirty* create_dirty_EXIT( MCEnv* mce, IRStmt *clone, IRExpr* guard, IRJumpKind jk, IRConst* dst ){$/;"	f
create_dirty_GET	dt_translate.c	/^IRDirty* create_dirty_GET( MCEnv* mce, IRStmt *clone, IRTemp tmp, Int offset, IRType ty ){$/;"	f
create_dirty_GETI	dt_translate.c	/^IRDirty* create_dirty_GETI( MCEnv* mce, IRStmt *clone, IRTemp tmp, IRRegArray* descr, IRExpr* ix, Int bias ){$/;"	f
create_dirty_ITE	dt_translate.c	/^IRDirty* create_dirty_ITE( MCEnv* mce, IRStmt *clone, IRTemp tmp,$/;"	f
create_dirty_LOAD	dt_translate.c	/^IRDirty* create_dirty_LOAD( MCEnv* mce, IRStmt *clone, IRTemp tmp,$/;"	f
create_dirty_NEXT	dt_translate.c	/^IRDirty* create_dirty_NEXT( MCEnv* mce, IRExpr* next ){$/;"	f
create_dirty_PUT	dt_translate.c	/^IRDirty* create_dirty_PUT( MCEnv* mce, IRStmt *clone, Int offset, IRExpr* data ){$/;"	f
create_dirty_PUTI	dt_translate.c	/^IRDirty* create_dirty_PUTI( MCEnv* mce, IRRegArray* descr, IRExpr* ix, Int bias, IRExpr* data ){$/;"	f
create_dirty_QOP	dt_translate.c	/^IRDirty* create_dirty_QOP( MCEnv* mce, IRStmt *clone, IRTemp tmp, IROp op,$/;"	f
create_dirty_RDTMP	dt_translate.c	/^IRDirty* create_dirty_RDTMP( MCEnv* mce, IRStmt *clone, IRTemp tmp, IRTemp data ){$/;"	f
create_dirty_STORE	dt_translate.c	/^IRDirty* create_dirty_STORE( MCEnv* mce, IRStmt *clone,$/;"	f
create_dirty_TRIOP	dt_translate.c	/^IRDirty* create_dirty_TRIOP( MCEnv* mce, IRStmt *clone, IRTemp tmp, IROp op,$/;"	f
create_dirty_UNOP	dt_translate.c	/^IRDirty* create_dirty_UNOP( MCEnv* mce, IRStmt *clone, IRTemp tmp, IROp op, IRExpr* arg ){$/;"	f
create_dirty_WRTMP	dt_translate.c	/^IRDirty* create_dirty_WRTMP( MCEnv* mce, IRStmt *clone, IRTemp tmp, IRExpr* e ){$/;"	f
create_dirty_WRTMP_const	dt_translate.c	/^IRDirty *create_dirty_WRTMP_const( MCEnv *mce, IRStmt *clone, IRTemp tmp )$/;"	f
create_dirty_from_dirty	dt_translate.c	/^IRDirty* create_dirty_from_dirty( IRDirty* di_old ){$/;"	f
ctl	dt_oatdexparse.h	/^	} ctl;$/;"	m	union:InterpBreak	typeref:struct:InterpBreak::__anon17
ctoi	dt_taint.c	/^Int ctoi( HChar c ){$/;"	f
ctoi_test	dt_taint.c	/^Int ctoi_test( HChar c ){$/;"	f
curFrame	dt_oatdexparse.h	/^	UInt*										curFrame;   \/\/ Dalvik frame pointer$/;"	m	struct:InterpSaveState
curHandlerTable	dt_oatdexparse.h	/^		void*			 curHandlerTable;$/;"	m	struct:InterpBreak::__anon17
d	dt_oatdexparse.h	/^	Double  d;$/;"	m	union:JValue
d	dt_oatdexparse.h	/^	double  d;$/;"	m	union:JValue
data	dt_oatdexparse.h	/^	u1      data[1];$/;"	m	struct:RegisterMap
data	dt_oatplus.h	/^	\/*0x08*\/ HChar*	data;$/;"	m	struct:StdString
data	dt_wrappers.h	/^	Addr		data;								\/\/ Address of the actual block$/;"	m	struct:_HP_Chunk
dataOff	dt_oatdexparse.h	/^	\/* 6c *\/UInt  dataOff;$/;"	m	struct:DexHeader
dataSize	dt_oatdexparse.h	/^	\/* 68 *\/UInt  dataSize;$/;"	m	struct:DexHeader
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datatrace__linux_DEPENDENCIES	Makefile	/^datatrace__linux_DEPENDENCIES =$/;"	m
datatrace__linux_OBJECTS	Makefile	/^datatrace__linux_OBJECTS =  \\$/;"	m
datatrace_arm_linux_CFLAGS	Makefile	/^datatrace_arm_linux_CFLAGS = \\$/;"	m
datatrace_arm_linux_CPPFLAGS	Makefile	/^datatrace_arm_linux_CPPFLAGS = \\$/;"	m
datatrace_arm_linux_DEPENDENCIES	Makefile	/^datatrace_arm_linux_DEPENDENCIES = \\$/;"	m
datatrace_arm_linux_LDADD	Makefile	/^datatrace_arm_linux_LDADD = \\$/;"	m
datatrace_arm_linux_LDFLAGS	Makefile	/^datatrace_arm_linux_LDFLAGS = \\$/;"	m
datatrace_arm_linux_LINK	Makefile	/^datatrace_arm_linux_LINK = \\$/;"	m
datatrace_arm_linux_OBJECTS	Makefile	/^datatrace_arm_linux_OBJECTS =  \\$/;"	m
datatrace_arm_linux_SOURCES	Makefile	/^datatrace_arm_linux_SOURCES = \\$/;"	m
dbgSuspendCount	dt_oatdexparse.h	/^	int dbgSuspendCount;$/;"	m	struct:Thread
debugInfoOff	dt_oatdexparse.h	/^	UInt	  debugInfoOff;       \/* file offset to debug info stream *\/$/;"	m	struct:DexCode
debugInfoOff	dt_oatdexparse.h	/^	UInt	 debugInfoOff;$/;"	m	struct:CodeItem
debugIsMethodEntry	dt_oatdexparse.h	/^	Bool        debugIsMethodEntry;$/;"	m	struct:Thread
deepMallocIRCallee	copy.c	/^IRCallee* deepMallocIRCallee(IRCallee* ce)$/;"	f
deepMallocIRConst	copy.c	/^IRConst* deepMallocIRConst(IRConst* c)$/;"	f
deepMallocIRDirty	copy.c	/^IRDirty* deepMallocIRDirty(IRDirty* d)$/;"	f
deepMallocIRExpr	copy.c	/^IRExpr* deepMallocIRExpr(IRExpr* e)$/;"	f
deepMallocIRExprVec	copy.c	/^IRExpr** deepMallocIRExprVec(IRExpr** vec)$/;"	f
deepMallocIRRegArray	copy.c	/^IRRegArray* deepMallocIRRegArray(IRRegArray* d)$/;"	f
deepMallocIRStmt	copy.c	/^IRStmt* deepMallocIRStmt(IRStmt* s)$/;"	f
definedOfType	dt_translate.c	/^static IRExpr* definedOfType ( IRType ty ) { \/\/367$/;"	f	file:
delDexFileList	dt_dexparse.c	/^void delDexFileList( struct DexFile* pDexFile ) {$/;"	f
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depsLength	dt_oatdexparse.h	/^	UInt  depsLength;$/;"	m	struct:DexOptHeader
depsOffset	dt_oatdexparse.h	/^	UInt  depsOffset;         \/* offset of optimized DEX dependency table *\/$/;"	m	struct:DexOptHeader
describe_data	dt_taint.c	/^void DT_(describe_data)(Addr addr, HChar* varnamebuf, UInt bufsize, enum VariableType* type, enum VariableLocation* loc) {$/;"	f
descriptor	dt_oatdexparse.h	/^	const HChar*			descriptor;$/;"	m	struct:ClassObject
descriptorAlloc	dt_oatdexparse.h	/^	HChar*						descriptorAlloc;$/;"	m	struct:ClassObject
descriptorClassToDot	dt_dexparse.c	/^static HChar* descriptorClassToDot(const HChar* str)$/;"	f	file:
descriptorIdx	dt_oatdexparse.h	/^	UInt descriptorIdx;$/;"	m	struct:DexTypeId
descriptorToDot	dt_dexparse.c	/^static HChar* descriptorToDot(const HChar* str)$/;"	f	file:
dexComputeChecksum	dt_dexparse.c	/^static UInt dexComputeChecksum(const struct DexHeader* pHeader)$/;"	f	file:
dexCopyDescriptorFromMethodId	dt_dexparse.c	/^INLINE HChar* dexCopyDescriptorFromMethodId(const struct DexFile* pDexFile,$/;"	f
dexFile	dt_oatdexparse.h	/^	const struct DexFile* dexFile;     \/* file the idx refers to *\/$/;"	m	struct:DexProto	typeref:struct:DexProto::DexFile
dexFileCount	dt_oatdexparse.h	/^	UInt  dexFileCount;$/;"	m	struct:OatHeader
dexFileList	dt_dexparse.c	/^static struct MonitorDexFile *dexFileList = NULL;$/;"	v	typeref:struct:MonitorDexFile	file:
dexFileParse	dt_dexparse.c	/^	static struct DexFile* dexFileParse(UChar* dexBuf, UInt length) {$/;"	f	file:
dexFileSetupBasicPoInters	dt_dexparse.c	/^	void dexFileSetupBasicPoInters(struct DexFile* pDexFile, const UChar* data) {$/;"	f
dexGetAnnotationItem	dt_oatdexparse.h	/^INLINE const struct DexAnnotationItem* dexGetAnnotationItem($/;"	f
dexGetAnnotationOff	dt_oatdexparse.h	/^INLINE UInt dexGetAnnotationOff($/;"	f
dexGetAnnotationsDirectoryItem	dt_oatdexparse.h	/^INLINE const struct DexAnnotationsDirectoryItem* dexGetAnnotationsDirectoryItem($/;"	f
dexGetCatchHandlerData	dt_oatdexparse.h	/^INLINE const UChar* dexGetCatchHandlerData(const struct DexCode* pCode) {$/;"	f
dexGetClassAnnotationSet	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetItem* dexGetClassAnnotationSet($/;"	f
dexGetClassData	dt_oatdexparse.h	/^INLINE const UChar* dexGetClassData(const struct DexFile* pDexFile,$/;"	f
dexGetClassDef	dt_oatdexparse.h	/^INLINE const struct DexClassDef* dexGetClassDef(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetClassDescriptor	dt_oatdexparse.h	/^INLINE const UChar* dexGetClassDescriptor(const struct DexFile* pDexFile,$/;"	f
dexGetCode	dt_dexparse.c	/^INLINE const struct DexCode* dexGetCode(const struct DexFile* pDexFile,$/;"	f
dexGetDebugInfoStream	dt_oatdexparse.h	/^INLINE const UChar* dexGetDebugInfoStream(const struct DexFile* pDexFile,$/;"	f
dexGetDescriptorFromMethodId	dt_dexparse.c	/^INLINE const HChar* dexGetDescriptorFromMethodId(const struct DexFile* pDexFile,$/;"	f
dexGetFieldAnnotationSetItem	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetItem* dexGetFieldAnnotationSetItem($/;"	f
dexGetFieldAnnotations	dt_oatdexparse.h	/^INLINE const struct DexFieldAnnotationsItem* dexGetFieldAnnotations($/;"	f
dexGetFieldAnnotationsSize	dt_oatdexparse.h	/^INLINE Int dexGetFieldAnnotationsSize(const struct DexFile* pDexFile,$/;"	f
dexGetFieldId	dt_oatdexparse.h	/^INLINE const struct DexFieldId* dexGetFieldId(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetIndexForClassDef	dt_oatdexparse.h	/^INLINE UInt dexGetIndexForClassDef(const struct DexFile* pDexFile,$/;"	f
dexGetInterfacesList	dt_oatdexparse.h	/^INLINE const struct DexTypeList* dexGetInterfacesList(const struct DexFile* pDexFile,$/;"	f
dexGetMap	dt_oatdexparse.h	/^INLINE const struct DexMapList* dexGetMap(const struct DexFile* pDexFile) {$/;"	f
dexGetMethodAnnotationSetItem	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetItem* dexGetMethodAnnotationSetItem($/;"	f
dexGetMethodAnnotations	dt_oatdexparse.h	/^INLINE const struct DexMethodAnnotationsItem* dexGetMethodAnnotations($/;"	f
dexGetMethodAnnotationsSize	dt_oatdexparse.h	/^INLINE Int dexGetMethodAnnotationsSize(const struct DexFile* pDexFile,$/;"	f
dexGetMethodId	dt_oatdexparse.h	/^INLINE const struct DexMethodId* dexGetMethodId(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetParameterAnnotationSetRef	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetRefItem* dexGetParameterAnnotationSetRef($/;"	f
dexGetParameterAnnotationSetRefList	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetRefList* dexGetParameterAnnotationSetRefList($/;"	f
dexGetParameterAnnotationSetRefSize	dt_oatdexparse.h	/^INLINE Int dexGetParameterAnnotationSetRefSize(const struct DexFile* pDexFile,$/;"	f
dexGetParameterAnnotations	dt_oatdexparse.h	/^INLINE const struct DexParameterAnnotationsItem* dexGetParameterAnnotations($/;"	f
dexGetParameterAnnotationsSize	dt_oatdexparse.h	/^INLINE Int dexGetParameterAnnotationsSize(const struct DexFile* pDexFile,$/;"	f
dexGetProtoId	dt_oatdexparse.h	/^INLINE const struct DexProtoId* dexGetProtoId(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetProtoParameters	dt_oatdexparse.h	/^INLINE const struct DexTypeList* dexGetProtoParameters($/;"	f
dexGetSetRefItemItem	dt_oatdexparse.h	/^INLINE const struct DexAnnotationSetItem* dexGetSetRefItemItem($/;"	f
dexGetSourceFile	dt_oatdexparse.h	/^INLINE const UChar* dexGetSourceFile($/;"	f
dexGetStaticValuesList	dt_oatdexparse.h	/^INLINE const struct DexEncodedArray* dexGetStaticValuesList($/;"	f
dexGetStringData	dt_oatdexparse.h	/^INLINE const HChar* dexGetStringData(const struct DexFile* pDexFile,$/;"	f
dexGetStringId	dt_oatdexparse.h	/^INLINE const struct DexStringId* dexGetStringId(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetSuperClassDescriptor	dt_oatdexparse.h	/^INLINE const UChar* dexGetSuperClassDescriptor(const struct DexFile* pDexFile,$/;"	f
dexGetTries	dt_oatdexparse.h	/^INLINE const struct DexTry* dexGetTries(const struct DexCode* pCode) {$/;"	f
dexGetTypeId	dt_oatdexparse.h	/^INLINE const struct DexTypeId* dexGetTypeId(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexGetTypeItem	dt_oatdexparse.h	/^INLINE const struct DexTypeItem* dexGetTypeItem(const struct DexTypeList* pList,$/;"	f
dexHeaderParse	dt_dexparse.c	/^	void dexHeaderParse( struct DexHeader* dh) $/;"	f
dexLength	dt_oatdexparse.h	/^	UInt  dexLength;$/;"	m	struct:DexOptHeader
dexOffset	dt_oatdexparse.h	/^	UInt  dexOffset;          \/* file offset of DEX header *\/$/;"	m	struct:DexOptHeader
dexParseOptData	dt_dexparse.c	/^	Bool dexParseOptData(const UChar* data, UInt length, struct DexFile* pDexFile)$/;"	f
dexProtoCopyMethodDescriptor	dt_dexparse.c	/^INLINE HChar* dexProtoCopyMethodDescriptor(const struct DexProto* pProto) {$/;"	f
dexProtoGetMethodDescriptor	dt_dexparse.c	/^const HChar* dexProtoGetMethodDescriptor(const struct DexProto* pProto,$/;"	f
dexProtoGetShorty	dt_dexparse.c	/^static INLINE const char* dexProtoGetShorty(const struct DexProto* pProto) {$/;"	f	file:
dexProtoSetFromMethodId	dt_dexparse.c	/^INLINE void dexProtoSetFromMethodId(struct DexProto* pProto,$/;"	f
dexReadAndVerifyClassData	dt_dexparse.c	/^struct DexClassData* dexReadAndVerifyClassData(const UChar** pData, const UChar* pLimit) {$/;"	f
dexReadAndVerifyClassDataField	dt_dexparse.c	/^Bool dexReadAndVerifyClassDataField(const UChar** pData, const UChar* pLimit,$/;"	f
dexReadAndVerifyClassDataHeader	dt_dexparse.c	/^Bool dexReadAndVerifyClassDataHeader(const UChar** pData, const UChar* pLimit,$/;"	f
dexReadAndVerifyClassDataMethod	dt_dexparse.c	/^Bool dexReadAndVerifyClassDataMethod(const UChar** pData, const UChar* pLimit,$/;"	f
dexReadClassDataField	dt_dexparse.c	/^INLINE void dexReadClassDataField(const UInt** pData, struct DexField* pField,$/;"	f
dexReadClassDataHeader	dt_dexparse.c	/^INLINE void dexReadClassDataHeader(const UChar** pData,$/;"	f
dexReadClassDataMethod	dt_dexparse.c	/^INLINE void dexReadClassDataMethod(const UChar** pData, struct DexMethod* pMethod,$/;"	f
dexStringById	dt_oatdexparse.h	/^INLINE const HChar* dexStringById(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexStringByTypeIdx	dt_oatdexparse.h	/^INLINE const char* dexStringByTypeIdx(const struct DexFile* pDexFile, UInt idx) {$/;"	f
dexStringCacheAbandon	dt_dexparse.c	/^HChar* dexStringCacheAbandon(struct DexStringCache* pCache, const HChar* value) {$/;"	f
dexStringCacheAlloc	dt_dexparse.c	/^void dexStringCacheAlloc(struct DexStringCache* pCache, Int length) {$/;"	f
dexStringCacheEnsureCopy	dt_dexparse.c	/^HChar* dexStringCacheEnsureCopy(struct DexStringCache* pCache, const HChar* value) {$/;"	f
dexStringCacheInit	dt_dexparse.c	/^void dexStringCacheInit(struct DexStringCache* pCache) {$/;"	f
dexStringCacheRelease	dt_dexparse.c	/^void dexStringCacheRelease(struct DexStringCache* pCache) {$/;"	f
dexTypeListGetIdx	dt_oatdexparse.h	/^INLINE UInt dexTypeListGetIdx(const struct DexTypeList* pList, UInt idx) {$/;"	f
dex_object	dt_oatdexparse.h	/^	void*								dex_object; \/\/ jobject is type _jobject* in native layer$/;"	m	struct:DvmDex
directMethodCount	dt_oatdexparse.h	/^	Int								directMethodCount;$/;"	m	struct:ClassObject
directMethods	dt_oatdexparse.h	/^	struct DexMethod*         directMethods;$/;"	m	struct:DexClassData	typeref:struct:DexClassData::DexMethod
directMethods	dt_oatdexparse.h	/^	struct Method*    directMethods;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::Method
directMethodsSize	dt_oatdexparse.h	/^	UInt directMethodsSize;$/;"	m	struct:DexClassDataHeader
doCmpORD	dt_translate.c	/^static IRAtom* doCmpORD ( MCEnv*  mce,$/;"	f	file:
do_print	dt_main.c	/^Int           DT_(do_print)                   = 1;$/;"	v
do_shadow_CAS	dt_translate.c	/^void do_shadow_CAS ( MCEnv* mce, IRCAS* cas )$/;"	f	file:
do_shadow_CAS_double	dt_translate.c	/^static void do_shadow_CAS_double ( MCEnv* mce, IRCAS* cas )$/;"	f	file:
do_shadow_CAS_single	dt_translate.c	/^static void do_shadow_CAS_single ( MCEnv* mce, IRCAS* cas )$/;"	f	file:
do_shadow_Dirty	dt_translate.c	/^void do_shadow_Dirty ( MCEnv* mce, IRDirty* d )$/;"	f	file:
do_shadow_LLSC	dt_translate.c	/^static void do_shadow_LLSC ( MCEnv*    mce,$/;"	f	file:
do_shadow_LoadG	dt_translate.c	/^static void do_shadow_LoadG ( MCEnv* mce, IRLoadG* lg )$/;"	f	file:
do_shadow_PUT	dt_translate.c	/^void do_shadow_PUT ( MCEnv* mce, IRStmt *clone, Int offset,$/;"	f	file:
do_shadow_PUTI	dt_translate.c	/^void do_shadow_PUTI ( MCEnv* mce, IRPutI *puti )$/;"	f	file:
do_shadow_Store	dt_translate.c	/^void do_shadow_Store ( MCEnv* mce,$/;"	f	file:
do_shadow_StoreG	dt_translate.c	/^static void do_shadow_StoreG ( MCEnv* mce, IRStoreG* sg )$/;"	f	file:
do_shadow_WRTMP	dt_translate.c	/^void do_shadow_WRTMP ( MCEnv* mce, IRStmt *clone, IRTemp tmp, IRExpr* expr )$/;"	f	file:
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dt_LOADV16	dt_taint.c	/^UWord dt_LOADV16 ( Addr a, Bool isBigEndian )$/;"	f	file:
dt_LOADV32	dt_taint.c	/^UWord dt_LOADV32 ( Addr a, Bool isBigEndian )$/;"	f	file:
dt_LOADV64	dt_taint.c	/^ULong dt_LOADV64 ( Addr a, Bool isBigEndian )$/;"	f	file:
dt_LOADV_128_or_256	dt_taint.c	/^void dt_LOADV_128_or_256 ( \/*OUT*\/ULong* res,$/;"	f	file:
dt_LOADV_128_or_256_slow	dt_taint.c	/^void dt_LOADV_128_or_256_slow ( \/*OUT*\/ULong* res,$/;"	f	file:
dt_LOADVn_slow	dt_taint.c	/^ULong dt_LOADVn_slow ( Addr a, SizeT nBits, Bool bigendian )$/;"	f	file:
dt_STOREV16	dt_taint.c	/^void dt_STOREV16 ( Addr a, UWord vbits16, Bool isBigEndian )$/;"	f	file:
dt_STOREV32	dt_taint.c	/^void dt_STOREV32 ( Addr a, UWord vbits32, Bool isBigEndian )$/;"	f	file:
dt_STOREV64	dt_taint.c	/^void dt_STOREV64 ( Addr a, ULong vbits64, Bool isBigEndian )$/;"	f	file:
dt_STOREVn_slow	dt_taint.c	/^void dt_STOREVn_slow ( Addr a, SizeT nBits, ULong vbytes, Bool bigendian )$/;"	f	file:
dt_ban_mem_stack	dt_main.c	/^static void dt_ban_mem_stack ( Addr a, SizeT len )$/;"	f	file:
dt_copy_address_range_state	dt_main.c	/^static void dt_copy_address_range_state ( Addr src, Addr dst, SizeT len) {$/;"	f	file:
dt_copy_mem_to_reg	dt_main.c	/^static void dt_copy_mem_to_reg ( CorePart part, ThreadId tid, Addr a,$/;"	f	file:
dt_copy_reg_to_mem	dt_main.c	/^static void dt_copy_reg_to_mem ( CorePart part, ThreadId tid, $/;"	f	file:
dt_die_mem_stack	dt_main.c	/^static void dt_die_mem_stack ( Addr a, SizeT len )$/;"	f	file:
dt_discard_superblock_info	dt_main.c	/^void dt_discard_superblock_info ( Addr orig_addr, VexGuestExtents vge )$/;"	f	file:
dt_fini	dt_main.c	/^static void dt_fini(Int exitcode)$/;"	f	file:
dt_get_bb_info	dt_main.c	/^void dt_get_bb_info(Addr addr)$/;"	f	file:
dt_get_debug_info	dt_main.c	/^Bool dt_get_debug_info( Addr instr_addr,$/;"	f	file:
dt_instrument	dt_main.c	/^IRSB* dt_instrument ( VgCallbackClosure* closure,$/;"	f	file:
dt_isatty	dt_main.c	/^static int dt_isatty(void) {$/;"	f	file:
dt_new_mem_stack	dt_main.c	/^static void dt_new_mem_stack ( Addr a, SizeT len )$/;"	f	file:
dt_new_mem_startup	dt_main.c	/^static void dt_new_mem_startup ( Addr a, SizeT len, Bool rr, Bool ww, Bool xx, $/;"	f	file:
dt_post_clo_init	dt_main.c	/^static void dt_post_clo_init(void) {$/;"	f	file:
dt_post_mem_write	dt_main.c	/^void dt_post_mem_write ( CorePart part, ThreadId tid, Addr a, SizeT len) {$/;"	f	file:
dt_post_reg_write	dt_main.c	/^static void dt_post_reg_write ( CorePart part, ThreadId tid,$/;"	f	file:
dt_post_reg_write_clientcall	dt_main.c	/^static void dt_post_reg_write_clientcall ( ThreadId tid,$/;"	f	file:
dt_post_syscall	dt_main.c	/^static void dt_post_syscall(ThreadId tid, UInt syscallno, UWord *args, UInt nArgs, SysRes res) {$/;"	f	file:
dt_pre_clo_init	dt_main.c	/^static void dt_pre_clo_init(void)$/;"	f	file:
dt_pre_mem_read	dt_main.c	/^void dt_pre_mem_read ( CorePart part, ThreadId tid, const HChar* s,$/;"	f	file:
dt_pre_mem_read_asciiz	dt_main.c	/^void dt_pre_mem_read_asciiz ( CorePart part, ThreadId tid, const HChar* s,$/;"	f	file:
dt_pre_mem_write	dt_main.c	/^void dt_pre_mem_write ( CorePart part, ThreadId tid, const HChar* s,$/;"	f	file:
dt_pre_syscall	dt_main.c	/^static void dt_pre_syscall(ThreadId tid, UInt syscallno, UWord *args, UInt nArgs) {$/;"	f	file:
dt_print_usage	dt_main.c	/^static void dt_print_usage(void) {$/;"	f	file:
dt_process_cmd_line_options	dt_main.c	/^static Bool dt_process_cmd_line_options(const HChar* arg) {$/;"	f	file:
dt_smt2_amd64g_calculate_condition_cond	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_cond( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_ct	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_ct( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_ct_common	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_ct_common( IRStmt *clone, char *buf, ULong dep1c, UInt dep2tmp )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_tc	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_tc( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_tc_common	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_tc_common( IRStmt *clone, char *buf, UInt dep1tmp, ULong dep2c )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_tt_01	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_tt_01( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_tt_10	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_tt_10( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_amd64g_calculate_condition_op_tt_11	dt_stmt2.c	/^static char *dt_smt2_amd64g_calculate_condition_op_tt_11( IRStmt *clone, char *buf )$/;"	f	file:
dt_smt2_binop_ct_common	dt_stmt2.c	/^static void dt_smt2_binop_ct_common ( UInt op, UInt ltmp, UInt rtmp, ULong c ) {$/;"	f	file:
dt_smt2_binop_tc_common	dt_stmt2.c	/^static void dt_smt2_binop_tc_common ( UInt op, UInt ltmp, UInt rtmp, ULong c ) {$/;"	f	file:
dt_smt2_binop_tt_01	dt_stmt2.c	/^static void dt_smt2_binop_tt_01 ( IRStmt *clone )$/;"	f	file:
dt_smt2_binop_tt_10	dt_stmt2.c	/^static void dt_smt2_binop_tt_10 ( IRStmt *clone )$/;"	f	file:
dt_smt2_binop_tt_11	dt_stmt2.c	/^static void dt_smt2_binop_tt_11 ( IRStmt *clone )$/;"	f	file:
dt_smt2_concat_32	dt_stmt2.c	/^static char *dt_smt2_concat_32( char *buf, ULong addr, UInt c, UInt v, UInt t )$/;"	f	file:
dt_smt2_concat_64	dt_stmt2.c	/^static char *dt_smt2_concat_64( char *buf, ULong addr, UInt c, ULong v, ULong t )$/;"	f	file:
dt_smt2_concat_indexed	dt_stmt2.c	/^static char *dt_smt2_concat_indexed( char *buf, UInt t, UInt c, UInt max )$/;"	f	file:
dt_smt2_load_ltmp_32	dt_stmt2.c	/^static void dt_smt2_load_ltmp_32 ( UInt ltmp, UInt ty, ULong address, UInt value, UInt taint )$/;"	f	file:
dt_smt2_load_ltmp_64	dt_stmt2.c	/^static void dt_smt2_load_ltmp_64 ( UInt ltmp, UInt ty, ULong address, ULong value, ULong taint )$/;"	f	file:
dt_smt2_loadstore_atmp	dt_stmt2.c	/^static void dt_smt2_loadstore_atmp ( UInt atmp, ULong address )$/;"	f	file:
dt_smt2_store_dtmp	dt_stmt2.c	/^static void dt_smt2_store_dtmp( UInt dtmp, ULong address )$/;"	f	file:
dt_track_die_mem_brk	dt_main.c	/^static void dt_track_die_mem_brk (Addr a, SizeT len) {$/;"	f	file:
dt_track_die_mem_munmap	dt_main.c	/^static void dt_track_die_mem_munmap (Addr a, SizeT len) {$/;"	f	file:
dt_track_die_mem_stack_signal	dt_main.c	/^static void dt_track_die_mem_stack_signal (Addr a, SizeT len) {$/;"	f	file:
dt_track_new_mem_mmap	dt_main.c	/^static void dt_track_new_mem_mmap ( Addr a, SizeT len, Bool rr, Bool ww, Bool xx,$/;"	f	file:
dumpClass	dt_dexparse.c	/^void dumpClass(struct DexFile* pDexFile, Int idx, HChar** pLastPackage)$/;"	f
dumpClassData	dt_dexparse.c	/^void dumpClassData(const struct DexFile* pDexFile, const struct MonitorDexFile* pMDexFile) $/;"	f
dumpClassDef	dt_dexparse.c	/^void dumpClassDef(struct DexFile* pDexFile, Int idx)$/;"	f
dumpCode	dt_dexparse.c	/^void dumpCode(const struct DexCode *pCode, Int i)$/;"	f	file:
dumpDexFile	dt_dexparse.c	/^	void dumpDexFile(UChar* addr, Int len) {$/;"	f
dumpDexFileBasicPointers	dt_dexparse.c	/^		void dumpDexFileBasicPointers(struct DexFile* pDexFile) {$/;"	f	file:
dumpDifferentialCompressedMap	dt_dexparse.c	/^	void dumpDifferentialCompressedMap(const UChar** pData)$/;"	f
dumpFileHeader	dt_dexparse.c	/^static Bool dumpFileHeader(const struct DexFile* pDexFile, const struct MonitorDexFile* pMDexFile)$/;"	f	file:
dumpIField	dt_dexparse.c	/^void dumpIField(const struct DexFile* pDexFile, const struct DexField* pIField, Int i)$/;"	f
dumpInterface	dt_dexparse.c	/^void dumpInterface(const struct DexFile* pDexFile, const struct DexTypeItem* pTypeItem,$/;"	f
dumpMethod	dt_dexparse.c	/^void dumpMethod(struct DexFile* pDexFile, const struct DexMethod* pDexMethod, Int i)$/;"	f
dumpMethodMap	dt_dexparse.c	/^	void dumpMethodMap(struct DexFile* pDexFile, const struct DexMethod* pDexMethod, Int idx,$/;"	f
dumpOptDirectory	dt_dexparse.c	/^void dumpOptDirectory(const struct DexFile* pDexFile, const struct MonitorDexFile* pMDexFile)$/;"	f
dumpRawData	dt_dexparse.c	/^static Bool dumpRawData(UChar* buf, UInt size, Addr a) {$/;"	f	file:
dumpRegisterMaps	dt_dexparse.c	/^	static void dumpRegisterMaps(const struct DexFile* pDexFile, const struct MonitorDexFile* pMDexFile)$/;"	f	file:
dumpSField	dt_dexparse.c	/^void dumpSField(const struct DexFile* pDexFile, const struct DexField* pSField, Int i)$/;"	f
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
elementClass	dt_oatdexparse.h	/^	struct ClassObject*    elementClass;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::ClassObject
endAddr	dt_oatdexparse.h	/^	Addr						endAddr;$/;"	m	struct:MonitorDexFile
endianTag	dt_oatdexparse.h	/^	\/* 28 *\/UInt  endianTag;$/;"	m	struct:DexHeader
ent	dt_taint.c	/^	AuxMapEnt* ent; \/\/ pointer to the matching auxmap_L2 node$/;"	m	struct:__anon19	file:
entries	dt_oatdexparse.h	/^	UInt  entries[1];                 \/* offset to DexAnnotationItem *\/$/;"	m	struct:DexAnnotationSetItem
exception	dt_oatdexparse.h	/^	void*			  exception;$/;"	m	struct:Thread
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
executableOffset	dt_oatdexparse.h	/^	UInt  executableOffset;$/;"	m	struct:OatHeader
expensiveAddSub	dt_translate.c	/^IRAtom* expensiveAddSub ( MCEnv*  mce,$/;"	f	file:
expensiveCmpEQorNE	dt_translate.c	/^static IRAtom* expensiveCmpEQorNE ( MCEnv*  mce, \/\/774$/;"	f	file:
expensiveCountTrailingZeroes	dt_translate.c	/^IRAtom* expensiveCountTrailingZeroes ( MCEnv* mce, IROp czop,$/;"	f	file:
expr2vbits	dt_translate.c	/^IRExpr* expr2vbits ( MCEnv* mce, IRExpr* e )$/;"	f	file:
expr2vbits_Binop	dt_translate.c	/^IRAtom* expr2vbits_Binop ( MCEnv* mce,$/;"	f	file:
expr2vbits_ITE	dt_translate.c	/^IRAtom* expr2vbits_ITE ( MCEnv* mce, \/\/2881$/;"	f	file:
expr2vbits_Load	dt_translate.c	/^IRAtom* expr2vbits_Load ( MCEnv* mce,$/;"	f	file:
expr2vbits_Load_WRK	dt_translate.c	/^IRAtom* expr2vbits_Load_WRK ( MCEnv* mce,$/;"	f	file:
expr2vbits_Load_guarded_General	dt_translate.c	/^IRAtom* expr2vbits_Load_guarded_General ( MCEnv* mce,$/;"	f	file:
expr2vbits_Load_guarded_Simple	dt_translate.c	/^IRAtom* expr2vbits_Load_guarded_Simple ( MCEnv* mce,$/;"	f	file:
expr2vbits_Qop	dt_translate.c	/^IRAtom* expr2vbits_Qop ( MCEnv* mce, \/\/1997$/;"	f	file:
expr2vbits_Triop	dt_translate.c	/^IRAtom* expr2vbits_Triop ( MCEnv* mce,$/;"	f	file:
expr2vbits_Unop	dt_translate.c	/^IRExpr* expr2vbits_Unop ( MCEnv* mce, IROp op, IRAtom* atom )$/;"	f	file:
extract_IRAtom	dt_translate.c	/^Int extract_IRAtom( IRAtom* atom ){$/;"	f
extract_IRConst	dt_translate.c	/^Int extract_IRConst( IRConst* con ){$/;"	f
extract_IRConst64	dt_translate.c	/^ULong extract_IRConst64( IRConst* con ){$/;"	f
extract_vabits2_from_vabits8	dt_taint.c	/^UChar extract_vabits2_from_vabits8 ( Addr a, UChar vabits8 )$/;"	f	file:
extract_vabits4_from_vabits8	dt_taint.c	/^UChar extract_vabits4_from_vabits8 ( Addr a, UChar vabits8 )$/;"	f	file:
f	dt_oatdexparse.h	/^	Float   f;$/;"	m	union:JValue
f	dt_oatdexparse.h	/^	float   f;$/;"	m	union:JValue
fastJni	dt_oatdexparse.h	/^	Bool fastJni;$/;"	m	struct:Method
fd	dt_oatdexparse.h	/^	Int			fd;					\/* fd of the opened file *\/$/;"	m	struct:DexFileInfo
field	dt_oatdexparse.h	/^	struct Field				field;$/;"	m	struct:StaticField	typeref:struct:StaticField::Field
field	dt_oatdexparse.h	/^	struct Field		field;$/;"	m	struct:InstField	typeref:struct:InstField::Field
fieldIdsOff	dt_oatdexparse.h	/^	\/* 54 *\/UInt  fieldIdsOff;$/;"	m	struct:DexHeader
fieldIdsSize	dt_oatdexparse.h	/^	\/* 50 *\/UInt  fieldIdsSize;$/;"	m	struct:DexHeader
fieldIdx	dt_oatdexparse.h	/^	UInt  fieldIdx;$/;"	m	struct:DexFieldAnnotationsItem
fieldIdx	dt_oatdexparse.h	/^	UInt fieldIdx;    \/* index to a field_id_item *\/$/;"	m	struct:DexField
field_ids_	dt_oatplus.h	/^	\/*0x2c*\/ struct FieldId		*field_ids_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::FieldId
fieldsSize	dt_oatdexparse.h	/^	UInt  fieldsSize;           \/* count of DexFieldAnnotationsItem *\/$/;"	m	struct:DexAnnotationsDirectoryItem
fileName	dt_oatdexparse.h	/^	char*       fileName;$/;"	m	struct:DexOrJar
fileSize	dt_oatdexparse.h	/^	\/* 20 *\/UInt  fileSize;           \/* length of entire file *\/$/;"	m	struct:DexHeader
file_index	dt_dexparse.c	/^static Int file_index = 0;$/;"	v	file:
filterNum	dt_translate.c	/^static Int filterNum = 0;$/;"	v	file:
findLib	dt_translate.c	/^static struct LibList* findLib(const HChar* soname) {$/;"	f	file:
findShadowTmpV	dt_translate.c	/^static IRTemp findShadowTmpV ( MCEnv* mce, IRTemp orig )$/;"	f	file:
find_class_def_misses_	dt_oatplus.h	/^	\/*0x3b*\/ UInt		find_class_def_misses_;$/;"	m	struct:DexFilePlus
find_or_alloc_in_auxmap	dt_taint.c	/^static AuxMapEnt* find_or_alloc_in_auxmap ( Addr a )$/;"	f	file:
fl	dt_translate.c	/^static struct FilterList *fl = NULL;$/;"	v	typeref:struct:FilterList	file:
flags	dt_oatdexparse.h	/^	UInt  flags;              \/* some info flags *\/$/;"	m	struct:DexOptHeader
flist	dt_taint.h	/^	struct Funlist *flist;$/;"	m	struct:LibList	typeref:struct:LibList::Funlist
format	dt_oatdexparse.h	/^	u1      format;         \/* enum RegisterMapFormat; MUST be first entry *\/$/;"	m	struct:RegisterMap
fpSpillMask	dt_oatdexparse.h	/^	UInt fpSpillMask;$/;"	m	struct:OatQuickMethodHeader
frameSizeInBytes	dt_oatdexparse.h	/^	UInt frameSizeInBytes;$/;"	m	struct:OatQuickMethodHeader
fread_wrapper	dt_replace_wrapper.c	/^size_t  fread_wrapper(void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f
free	dt_mem_wrappers.c	/^void DT_(free) ( ThreadId tid __attribute__((unused)), void* p )$/;"	f
fwrite_wrapper	dt_replace_wrapper.c	/^size_t fwrite_wrapper(const void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f
gcMapOffset	dt_oatdexparse.h	/^	UInt gcMapOffset;$/;"	m	struct:OatQuickMethodHeader
gcSecVBitTable	dt_taint.c	/^static void gcSecVBitTable(void)$/;"	f	file:
get2LE	dt_dexparse.c	/^static INLINE UShort get2LE(UChar const* pSrc)$/;"	f	file:
get4LE	dt_dexparse.c	/^static INLINE UInt get4LE(UChar const* pSrc)$/;"	f	file:
getClassFileName	dt_oatparse.c	/^void getClassFileName(UChar* dex, struct StringID *strIdList, $/;"	f
getClassMethods	dt_dexparse.c	/^	Bool getClassMethods(const struct DexFile *pDexFile, struct ClassObject *pClazz) {$/;"	f
getCodeOffset	dt_oatparse.c	/^UInt getCodeOffset(UShort type, UChar* bitmap, UInt* offsets, UInt mid, UInt *nid) {$/;"	f
getMethod	dt_dexparse.c	/^	static struct Method* getMethod(struct Method* mth, Int count, $/;"	f	file:
getMethodCode	dt_dexparse.c	/^	static Bool getMethodCode(struct DexFile *pDexFile, struct DexMethod* pDexMethod, struct Method *mths, Int count)$/;"	f	file:
getProtoDesc	dt_oatparse.c	/^void getProtoDesc(UChar* dex, struct StringID *strIdList,$/;"	f
getProtoId	dt_dexparse.c	/^static INLINE const struct DexProtoId* getProtoId(const struct DexProto* pProto) {$/;"	f	file:
getStringValue	dt_oatparse.c	/^void getStringValue(UChar* dex, struct StringID *strIdList,$/;"	f
getTypeDesc	dt_oatparse.c	/^void getTypeDesc(UChar* dex, struct StringID *strIdList,$/;"	f
getTypeDescForClass	dt_oatparse.c	/^UInt getTypeDescForClass(UChar* dex, struct StringID* strIdList,$/;"	f
getUnsignedLebValue	dt_oatparse.c	/^void getUnsignedLebValue(UChar* dex, UChar* stringData,$/;"	f
get_and_check_reg	dt_taint.c	/^Int get_and_check_reg( HChar *reg ){$/;"	f
get_and_check_tvar	dt_taint.c	/^Int get_and_check_tvar( HChar *tmp ){$/;"	f
get_fnname	dt_syswrap.c	/^void DT_(get_fnname)(ThreadId tid, const HChar** buf) {$/;"	f
get_sec_vbits8	dt_taint.c	/^static UWord get_sec_vbits8(Addr a)$/;"	f	file:
get_secmap_for_reading	dt_taint.c	/^static INLINE SecMap* get_secmap_for_reading ( Addr a )$/;"	f	file:
get_secmap_for_reading_high	dt_taint.c	/^static INLINE SecMap* get_secmap_for_reading_high ( Addr a )$/;"	f	file:
get_secmap_for_reading_low	dt_taint.c	/^static INLINE SecMap* get_secmap_for_reading_low ( Addr a )$/;"	f	file:
get_secmap_for_writing	dt_taint.c	/^static SecMap* get_secmap_for_writing ( Addr a )$/;"	f	file:
get_secmap_for_writing_high	dt_taint.c	/^static INLINE SecMap* get_secmap_for_writing_high ( Addr a )$/;"	f	file:
get_secmap_for_writing_low	dt_taint.c	/^static INLINE SecMap* get_secmap_for_writing_low ( Addr a)$/;"	f	file:
get_secmap_high_ptr	dt_taint.c	/^static INLINE SecMap** get_secmap_high_ptr ( Addr a )$/;"	f	file:
get_secmap_low_ptr	dt_taint.c	/^static INLINE SecMap** get_secmap_low_ptr ( Addr a )$/;"	f	file:
get_secmap_ptr	dt_taint.c	/^static SecMap** get_secmap_ptr ( Addr a )$/;"	f	file:
get_vabits2	dt_taint.c	/^UChar get_vabits2 ( Addr a )$/;"	f
get_vabits8_for_aligned_word32	dt_taint.c	/^UChar get_vabits8_for_aligned_word32 ( Addr a )$/;"	f	file:
get_vbits8	dt_taint.c	/^Bool get_vbits8 ( Addr a, UChar* vbits8 )$/;"	f	file:
h32_binop_cc	dt_taint.c	/^	void DT_(h32_binop_cc) ($/;"	f
h32_binop_ct	dt_taint.c	/^	void DT_(h32_binop_ct) ($/;"	f
h32_binop_tc	dt_taint.c	/^	void DT_(h32_binop_tc) ($/;"	f
h32_binop_tt	dt_taint.c	/^	void DT_(h32_binop_tt) ($/;"	f
h32_ccall	dt_taint.c	/^	void DT_(h32_ccall) ($/;"	f
h32_exit_c	dt_taint.c	/^	void DT_(h32_exit_c) ($/;"	f
h32_exit_t	dt_taint.c	/^	void DT_(h32_exit_t) ($/;"	f
h32_get	dt_taint.c	/^	void DT_(h32_get) ($/;"	f
h32_geti	dt_taint.c	/^	void DT_(h32_geti) ($/;"	f
h32_ite_cc	dt_taint.c	/^	void DT_(h32_ite_cc) ($/;"	f
h32_ite_ct	dt_taint.c	/^	void DT_(h32_ite_ct) ($/;"	f
h32_ite_tc	dt_taint.c	/^	void DT_(h32_ite_tc) ($/;"	f
h32_ite_tt	dt_taint.c	/^	void DT_(h32_ite_tt) ($/;"	f
h32_load_c	dt_taint.c	/^	void DT_(h32_load_c) ($/;"	f
h32_load_t	dt_taint.c	/^	void DT_(h32_load_t) ($/;"	f
h32_next_c	dt_taint.c	/^	void DT_(h32_next_c) ($/;"	f
h32_next_t	dt_taint.c	/^	void DT_(h32_next_t) ($/;"	f
h32_none	dt_taint.c	/^	void DT_(h32_none) ( $/;"	f
h32_put_c	dt_taint.c	/^	void DT_(h32_put_c) ($/;"	f
h32_put_t	dt_taint.c	/^	void DT_(h32_put_t) ($/;"	f
h32_puti	dt_taint.c	/^	void DT_(h32_puti) ($/;"	f
h32_qop	dt_taint.c	/^	void DT_(h32_qop) ($/;"	f
h32_rdtmp	dt_taint.c	/^	void DT_(h32_rdtmp) ($/;"	f
h32_store_ct	dt_taint.c	/^	void DT_(h32_store_ct) ($/;"	f
h32_store_tc	dt_taint.c	/^	void DT_(h32_store_tc) ($/;"	f
h32_store_tt	dt_taint.c	/^	void DT_(h32_store_tt) ($/;"	f
h32_triop	dt_taint.c	/^	void DT_(h32_triop) ($/;"	f
h32_unop_c	dt_taint.c	/^	void DT_(h32_unop_c) ($/;"	f
h32_unop_t	dt_taint.c	/^	void DT_(h32_unop_t) ($/;"	f
h32_wrtmp_c	dt_taint.c	/^	void DT_(h32_wrtmp_c) ($/;"	f
h32_x86g_calculate_condition	dt_taint.c	/^	void DT_(h32_x86g_calculate_condition) ($/;"	f
h64_amd64g_calculate_condition	dt_taint.c	/^	void DT_(h64_amd64g_calculate_condition) ($/;"	f
h64_binop_cc	dt_taint.c	/^	void DT_(h64_binop_cc) ($/;"	f
h64_binop_ct	dt_taint.c	/^	void DT_(h64_binop_ct) ($/;"	f
h64_binop_tc	dt_taint.c	/^	void DT_(h64_binop_tc) ($/;"	f
h64_binop_tt	dt_taint.c	/^	void DT_(h64_binop_tt) ($/;"	f
h64_ccall	dt_taint.c	/^	void DT_(h64_ccall) ($/;"	f
h64_exit_c	dt_taint.c	/^	void DT_(h64_exit_c) ($/;"	f
h64_exit_t	dt_taint.c	/^	void DT_(h64_exit_t) ($/;"	f
h64_get	dt_taint.c	/^	void DT_(h64_get) ($/;"	f
h64_geti	dt_taint.c	/^	void DT_(h64_geti) ($/;"	f
h64_ite_cc	dt_taint.c	/^	void DT_(h64_ite_cc) ($/;"	f
h64_ite_ct	dt_taint.c	/^	void DT_(h64_ite_ct) ($/;"	f
h64_ite_tc	dt_taint.c	/^	void DT_(h64_ite_tc) ($/;"	f
h64_ite_tt	dt_taint.c	/^	void DT_(h64_ite_tt) ($/;"	f
h64_load_c	dt_taint.c	/^	void DT_(h64_load_c) ($/;"	f
h64_load_t	dt_taint.c	/^	void DT_(h64_load_t) ($/;"	f
h64_next_c	dt_taint.c	/^	void DT_(h64_next_c) ($/;"	f
h64_next_t	dt_taint.c	/^	void DT_(h64_next_t) ($/;"	f
h64_none	dt_taint.c	/^	void DT_(h64_none) ( $/;"	f
h64_put_c	dt_taint.c	/^	void DT_(h64_put_c) ($/;"	f
h64_put_t	dt_taint.c	/^	void DT_(h64_put_t) ($/;"	f
h64_puti	dt_taint.c	/^	void DT_(h64_puti) ($/;"	f
h64_qop	dt_taint.c	/^	void DT_(h64_qop) ($/;"	f
h64_rdtmp	dt_taint.c	/^	void DT_(h64_rdtmp) ($/;"	f
h64_store_ct	dt_taint.c	/^	void DT_(h64_store_ct) ($/;"	f
h64_store_tc	dt_taint.c	/^	void DT_(h64_store_tc) ($/;"	f
h64_store_tt	dt_taint.c	/^	void DT_(h64_store_tt) ($/;"	f
h64_triop	dt_taint.c	/^	void DT_(h64_triop) ($/;"	f
h64_unop_c	dt_taint.c	/^	void DT_(h64_unop_c) ($/;"	f
h64_unop_t	dt_taint.c	/^	void DT_(h64_unop_t) ($/;"	f
h64_wrtmp_c	dt_taint.c	/^	void DT_(h64_wrtmp_c) ($/;"	f
hWordTy	dt_instrument.h	/^	IRType	hWordTy;$/;"	m	struct:_MCEnv
hWordTy	dt_translate.c	/^	IRType hWordTy;$/;"	m	struct:_MCEnv	file:
handle_client_requests	dt_main.c	/^Bool DT_(handle_client_requests) ( ThreadId tid, UWord *arg, UWord *ret) {$/;"	f
handlerOff	dt_oatdexparse.h	/^	UShort  handlerOff;         \/* offset in encoded handler data to handlers *\/$/;"	m	struct:DexTry
header	dt_oatdexparse.h	/^	struct DexClassDataHeader header;$/;"	m	struct:DexClassData	typeref:struct:DexClassData::DexClassDataHeader
headerSize	dt_oatdexparse.h	/^	\/* 24 *\/UInt  headerSize;         \/* offset to start of next section *\/$/;"	m	struct:DexHeader
header_	dt_oatplus.h	/^	\/*0x20*\/ struct DexHeader	*header_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::DexHeader
helperc_LOADV128be	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_LOADV128be) ( \/*OUT*\/V128* res, Addr a )$/;"	f
helperc_LOADV128le	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_LOADV128le) ( \/*OUT*\/V128* res, Addr a )$/;"	f
helperc_LOADV16be	dt_taint.c	/^VG_REGPARM(1) UWord DT_(helperc_LOADV16be) ( Addr a )$/;"	f
helperc_LOADV16le	dt_taint.c	/^VG_REGPARM(1) UWord DT_(helperc_LOADV16le) ( Addr a )$/;"	f
helperc_LOADV256be	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_LOADV256be) ( \/*OUT*\/V256* res, Addr a )$/;"	f
helperc_LOADV256le	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_LOADV256le) ( \/*OUT*\/V256* res, Addr a )$/;"	f
helperc_LOADV32be	dt_taint.c	/^VG_REGPARM(1) UWord DT_(helperc_LOADV32be) ( Addr a )$/;"	f
helperc_LOADV32le	dt_taint.c	/^VG_REGPARM(1) UWord DT_(helperc_LOADV32le) ( Addr a )$/;"	f
helperc_LOADV64be	dt_taint.c	/^VG_REGPARM(1) ULong DT_(helperc_LOADV64be) ( Addr a )$/;"	f
helperc_LOADV64le	dt_taint.c	/^VG_REGPARM(1) ULong DT_(helperc_LOADV64le) ( Addr a )$/;"	f
helperc_LOADV8	dt_taint.c	/^VG_REGPARM(1) UWord DT_(helperc_LOADV8) ( Addr a )$/;"	f
helperc_STOREV16be	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_STOREV16be) ( Addr a, UWord vbits16 )$/;"	f
helperc_STOREV16le	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_STOREV16le) ( Addr a, UWord vbits16 )$/;"	f
helperc_STOREV32be	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_STOREV32be) ( Addr a, UWord vbits32 )$/;"	f
helperc_STOREV32le	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_STOREV32le) ( Addr a, UWord vbits32 )$/;"	f
helperc_STOREV64be	dt_taint.c	/^VG_REGPARM(1) void DT_(helperc_STOREV64be) ( Addr a, ULong vbits64 )$/;"	f
helperc_STOREV64le	dt_taint.c	/^VG_REGPARM(1) void DT_(helperc_STOREV64le) ( Addr a, ULong vbits64 )$/;"	f
helperc_STOREV8	dt_taint.c	/^VG_REGPARM(2) void DT_(helperc_STOREV8) ( Addr a, UWord vbits8 )$/;"	f
host	Makefile	/^host = armv7-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = armv7-unknown-linux$/;"	m
host_cpu	Makefile	/^host_cpu = armv7$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = armv7-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
i	dt_oatdexparse.h	/^	s4      i;$/;"	m	union:JValue
i128_const_zero	dt_translate.c	/^static IRExpr *i128_const_zero(void)$/;"	f	file:
ifieldCount	dt_oatdexparse.h	/^	Int								ifieldCount;$/;"	m	struct:ClassObject
ifieldRefCount	dt_oatdexparse.h	/^	Int								ifieldRefCount; \/\/ number of fields that are object refs$/;"	m	struct:ClassObject
ifields	dt_oatdexparse.h	/^	struct InstField* ifields;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::InstField
iftable	dt_oatdexparse.h	/^	struct InterfaceEntry*		iftable;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::InterfaceEntry
iftableCount	dt_oatdexparse.h	/^	Int								iftableCount;$/;"	m	struct:ClassObject
ifviPool	dt_oatdexparse.h	/^	Int*							ifviPool;$/;"	m	struct:ClassObject
ifviPoolCount	dt_oatdexparse.h	/^	Int								ifviPoolCount;$/;"	m	struct:ClassObject
imageFileLocationOatChecksum	dt_oatdexparse.h	/^	UInt  imageFileLocationOatChecksum;					\/\/ Adler-32 checksum of boot.oat's header$/;"	m	struct:OatHeader
imageFileLocationOatDataBegin	dt_oatdexparse.h	/^	UInt  imageFileLocationOatDataBegin;				\/\/ The virtual address of boot.oat's oatdata section$/;"	m	struct:OatHeader
imagePatchDelta	dt_oatdexparse.h	/^	UInt  imagePatchDelta;											\/\/ The image relocated address delta$/;"	m	struct:OatHeader
inProfile	dt_oatdexparse.h	/^	Bool            inProfile;$/;"	m	struct:Method
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
infer_client_binary_name	dt_taint.c	/^void infer_client_binary_name(UInt pc) {$/;"	f
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initFilterlist	dt_translate.c	/^void initFilterlist() {$/;"	f
initThreadId	dt_oatdexparse.h	/^	UInt              initThreadId;$/;"	m	struct:ClassObject
init_auxmap_L1_L2	dt_taint.c	/^static void init_auxmap_L1_L2 ( void )$/;"	f	file:
init_shadow_memory	dt_taint.c	/^void init_shadow_memory(void) {$/;"	f
init_soaap_data	dt_taint.c	/^void init_soaap_data() {$/;"	f
initiatingLoaderCount	dt_oatdexparse.h	/^	Int						  initiatingLoaderCount;$/;"	m	struct:InitiatingLoaderList
initiatingLoaderList	dt_oatdexparse.h	/^	struct InitiatingLoaderList initiatingLoaderList;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::InitiatingLoaderList
initiatingLoaders	dt_oatdexparse.h	/^	struct Object**  initiatingLoaders;$/;"	m	struct:InitiatingLoaderList	typeref:struct:InitiatingLoaderList::Object
inplacedir	Makefile	/^inplacedir = $(top_builddir)\/.in_place$/;"	m
insSize	dt_oatdexparse.h	/^	UShort  insSize;$/;"	m	struct:DexCode
insSize	dt_oatdexparse.h	/^	UShort insSize;$/;"	m	struct:CodeItem
insSize	dt_oatdexparse.h	/^	u2              insSize;$/;"	m	struct:Method
insert_into_auxmap_L1_at	dt_taint.c	/^static void insert_into_auxmap_L1_at ( Word rank, AuxMapEnt* ent )$/;"	f	file:
insert_vabits2_into_vabits8	dt_taint.c	/^void insert_vabits2_into_vabits8 ( Addr a, UChar vabits2, UChar* vabits8 ) \/\/682$/;"	f	file:
insert_vabits4_into_vabits8	dt_taint.c	/^void insert_vabits4_into_vabits8 ( Addr a, UChar vabits4, UChar* vabits8 )$/;"	f	file:
insnCount	dt_oatdexparse.h	/^	UShort  insnCount;          \/* instruction count, in 16-bit code units *\/$/;"	m	struct:DexTry
insns	dt_oatdexparse.h	/^	UShort  insns[1];$/;"	m	struct:DexCode
insns	dt_oatdexparse.h	/^	UShort insns[1];$/;"	m	struct:CodeItem
insns	dt_oatdexparse.h	/^	const u2*       insns;          \/* instructions, in memory-mapped .dex *\/$/;"	m	struct:Method
insnsSize	dt_oatdexparse.h	/^	UInt	  insnsSize;          \/* size of the insns array, in u2 units *\/$/;"	m	struct:DexCode
insnsSizeInCodeUnits	dt_oatdexparse.h	/^	UInt	 insnsSizeInCodeUnits;$/;"	m	struct:CodeItem
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/jeremy\/Project\/BinaryTransfer\/valgrind\/valgrind-src\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instanceData	dt_oatdexparse.h	/^	UInt							instanceData[CLASS_FIELD_SLOTS];$/;"	m	struct:ClassObject
instanceFields	dt_oatdexparse.h	/^	struct DexField*          instanceFields;$/;"	m	struct:DexClassData	typeref:struct:DexClassData::DexField
instanceFieldsSize	dt_oatdexparse.h	/^	UInt instanceFieldsSize;$/;"	m	struct:DexClassDataHeader
instructionSet	dt_oatdexparse.h	/^	UInt  instructionSet;$/;"	m	struct:OatHeader
instructionSetFeatures	dt_oatdexparse.h	/^	UInt  instructionSetFeatures;$/;"	m	struct:OatHeader
instrument	dt_translate.c	/^IRSB* DT_(instrument)( VgCallbackClosure* closure,$/;"	f
interfaceCount	dt_oatdexparse.h	/^	Int								interfaceCount;$/;"	m	struct:ClassObject
interfaces	dt_oatdexparse.h	/^	struct ClassObject**   interfaces;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::ClassObject
interfacesOff	dt_oatdexparse.h	/^	\/*0x0c*\/ UInt  interfacesOff;      \/* file offset to DexTypeList *\/$/;"	m	struct:DexClassDef
interpBreak	dt_oatdexparse.h	/^	union InterpBreak interpBreak;$/;"	m	struct:Thread	typeref:union:Thread::InterpBreak
interpSave	dt_oatdexparse.h	/^	struct InterpSaveState	interpSave;$/;"	m	struct:Thread	typeref:struct:Thread::InterpSaveState
interpStackEnd	dt_oatdexparse.h	/^	const UChar*   interpStackEnd;$/;"	m	struct:Thread
interpStackSize	dt_oatdexparse.h	/^	int         interpStackSize;$/;"	m	struct:Thread
interpreterToCompiledCodeBridgeOffset	dt_oatdexparse.h	/^	UInt  interpreterToCompiledCodeBridgeOffset;$/;"	m	struct:OatHeader
interpreterToInterpreterBridgeOffset	dt_oatdexparse.h	/^	UInt  interpreterToInterpreterBridgeOffset;$/;"	m	struct:OatHeader
isAlwaysDefd	dt_translate.c	/^static Bool isAlwaysDefd ( MCEnv* mce, Int offset, Int size ) \/\/1159$/;"	f	file:
isBogusAtom	dt_translate.c	/^static Bool isBogusAtom ( IRAtom* at )$/;"	f	file:
isCloneMemValid	dt_dexparse.c	/^	static INLINE Bool isCloneMemValid(const struct DexFile* pDexFile, const struct MonitorDexFile* pMDexFile) {$/;"	f	file:
isDex	dt_oatdexparse.h	/^	Bool        isDex;$/;"	m	struct:DexOrJar
isInDexFileList	dt_dexparse.c	/^struct MonitorDexFile* isInDexFileList( struct DexFile* pDexFile ) {$/;"	f
isMappedReadOnly	dt_oatdexparse.h	/^	Bool                isMappedReadOnly;$/;"	m	struct:DvmDex
isOriginalAtom	dt_translate.c	/^static Bool isOriginalAtom ( MCEnv* mce, IRAtom* a1 ) \/\/303$/;"	f	file:
isShadowAtom	dt_translate.c	/^static Bool isShadowAtom ( MCEnv* mce, IRAtom* a1 )$/;"	f	file:
isValidPoInter	dt_dexparse.c	/^static INLINE Bool isValidPoInter(const UChar* ptr, const UChar* start, const UChar* end)$/;"	f	file:
isZeroU32	dt_translate.c	/^static Bool isZeroU32 ( IRAtom* e ) \/\/886$/;"	f	file:
isZeroU64	dt_translate.c	/^static Bool isZeroU64 ( IRAtom* e )$/;"	f	file:
is_distinguished_sm	dt_taint.c	/^static INLINE Bool is_distinguished_sm ( SecMap* sm ) {$/;"	f	file:
is_instrument_needed	dt_translate.c	/^Bool is_instrument_needed( VgCallbackClosure* closure ) {$/;"	f	file:
is_overlap	dt_replace_wrapper.c	/^Bool is_overlap ( void* dst, const void* src, SizeT dstlen, SizeT srclen )$/;"	f	file:
is_start_of_sm	dt_taint.h	/^static INLINE Bool is_start_of_sm ( Addr a ) {$/;"	f
is_tainted	dt_taint.h	278;"	d
istty	dt_taint.c	/^int istty = 0;$/;"	v
j	dt_oatdexparse.h	/^	s8      j;$/;"	m	union:JValue
jniArgInfo	dt_oatdexparse.h	/^	int             jniArgInfo;$/;"	m	struct:Method
jniDlsymLookupOffset	dt_oatdexparse.h	/^	UInt  jniDlsymLookupOffset;$/;"	m	struct:OatHeader
kAccessForClass	dt_oatdexparse.h	/^	kAccessForClass = 0, kAccessForMethod = 1, kAccessForField = 2,$/;"	e	enum:AccessFor
kAccessForField	dt_oatdexparse.h	/^	kAccessForClass = 0, kAccessForMethod = 1, kAccessForField = 2,$/;"	e	enum:AccessFor
kAccessForMAX	dt_oatdexparse.h	/^	kAccessForMAX$/;"	e	enum:AccessFor
kAccessForMethod	dt_oatdexparse.h	/^	kAccessForClass = 0, kAccessForMethod = 1, kAccessForField = 2,$/;"	e	enum:AccessFor
kArm	dt_oatdexparse.h	/^	kArm,$/;"	e	enum:__anon12
kArm64	dt_oatdexparse.h	/^	kArm64,$/;"	e	enum:__anon12
kDexAnnotationAnnotation	dt_oatdexparse.h	/^	kDexAnnotationAnnotation    = 0x1d,$/;"	e	enum:__anon4
kDexAnnotationArray	dt_oatdexparse.h	/^	kDexAnnotationArray         = 0x1c,$/;"	e	enum:__anon4
kDexAnnotationBoolean	dt_oatdexparse.h	/^	kDexAnnotationBoolean       = 0x1f,$/;"	e	enum:__anon4
kDexAnnotationByte	dt_oatdexparse.h	/^	kDexAnnotationByte          = 0x00,$/;"	e	enum:__anon4
kDexAnnotationChar	dt_oatdexparse.h	/^	kDexAnnotationChar          = 0x03,$/;"	e	enum:__anon4
kDexAnnotationDouble	dt_oatdexparse.h	/^	kDexAnnotationDouble        = 0x11,$/;"	e	enum:__anon4
kDexAnnotationEnum	dt_oatdexparse.h	/^	kDexAnnotationEnum          = 0x1b,$/;"	e	enum:__anon4
kDexAnnotationField	dt_oatdexparse.h	/^	kDexAnnotationField         = 0x19,$/;"	e	enum:__anon4
kDexAnnotationFloat	dt_oatdexparse.h	/^	kDexAnnotationFloat         = 0x10,$/;"	e	enum:__anon4
kDexAnnotationInt	dt_oatdexparse.h	/^	kDexAnnotationInt           = 0x04,$/;"	e	enum:__anon4
kDexAnnotationLong	dt_oatdexparse.h	/^	kDexAnnotationLong          = 0x06,$/;"	e	enum:__anon4
kDexAnnotationMethod	dt_oatdexparse.h	/^	kDexAnnotationMethod        = 0x1a,$/;"	e	enum:__anon4
kDexAnnotationNull	dt_oatdexparse.h	/^	kDexAnnotationNull          = 0x1e,$/;"	e	enum:__anon4
kDexAnnotationShort	dt_oatdexparse.h	/^	kDexAnnotationShort         = 0x02,$/;"	e	enum:__anon4
kDexAnnotationString	dt_oatdexparse.h	/^	kDexAnnotationString        = 0x17,$/;"	e	enum:__anon4
kDexAnnotationType	dt_oatdexparse.h	/^	kDexAnnotationType          = 0x18,$/;"	e	enum:__anon4
kDexAnnotationValueArgShift	dt_oatdexparse.h	/^	kDexAnnotationValueArgShift = 5,$/;"	e	enum:__anon4
kDexAnnotationValueTypeMask	dt_oatdexparse.h	/^	kDexAnnotationValueTypeMask = 0x1f,     \/* low 5 bits *\/$/;"	e	enum:__anon4
kDexChunkClassLookup	dt_oatdexparse.h	/^	kDexChunkClassLookup            = 0x434c4b50,   \/* CLKP *\/$/;"	e	enum:__anon6
kDexChunkEnd	dt_oatdexparse.h	/^	kDexChunkEnd                    = 0x41454e44,   \/* AEND *\/$/;"	e	enum:__anon6
kDexChunkRegisterMaps	dt_oatdexparse.h	/^	kDexChunkRegisterMaps           = 0x524d4150,   \/* RMAP *\/$/;"	e	enum:__anon6
kDexEndianConstant	dt_oatdexparse.h	/^	kDexEndianConstant = 0x12345678,    \/* the endianness indicator *\/$/;"	e	enum:__anon8
kDexNoIndex	dt_oatdexparse.h	/^	kDexNoIndex = 0xffffffff,           \/* not a valid index value *\/$/;"	e	enum:__anon8
kDexTypeAnnotationItem	dt_oatdexparse.h	/^	kDexTypeAnnotationItem           = 0x2004,$/;"	e	enum:__anon5
kDexTypeAnnotationSetItem	dt_oatdexparse.h	/^	kDexTypeAnnotationSetItem        = 0x1003,$/;"	e	enum:__anon5
kDexTypeAnnotationSetRefList	dt_oatdexparse.h	/^	kDexTypeAnnotationSetRefList     = 0x1002,$/;"	e	enum:__anon5
kDexTypeAnnotationsDirectoryItem	dt_oatdexparse.h	/^	kDexTypeAnnotationsDirectoryItem = 0x2006,$/;"	e	enum:__anon5
kDexTypeClassDataItem	dt_oatdexparse.h	/^	kDexTypeClassDataItem            = 0x2000,$/;"	e	enum:__anon5
kDexTypeClassDefItem	dt_oatdexparse.h	/^	kDexTypeClassDefItem             = 0x0006,$/;"	e	enum:__anon5
kDexTypeCodeItem	dt_oatdexparse.h	/^	kDexTypeCodeItem                 = 0x2001,$/;"	e	enum:__anon5
kDexTypeDebugInfoItem	dt_oatdexparse.h	/^	kDexTypeDebugInfoItem            = 0x2003,$/;"	e	enum:__anon5
kDexTypeEncodedArrayItem	dt_oatdexparse.h	/^	kDexTypeEncodedArrayItem         = 0x2005,$/;"	e	enum:__anon5
kDexTypeFieldIdItem	dt_oatdexparse.h	/^	kDexTypeFieldIdItem              = 0x0004,$/;"	e	enum:__anon5
kDexTypeHeaderItem	dt_oatdexparse.h	/^	kDexTypeHeaderItem               = 0x0000,$/;"	e	enum:__anon5
kDexTypeMapList	dt_oatdexparse.h	/^	kDexTypeMapList                  = 0x1000,$/;"	e	enum:__anon5
kDexTypeMethodIdItem	dt_oatdexparse.h	/^	kDexTypeMethodIdItem             = 0x0005,$/;"	e	enum:__anon5
kDexTypeProtoIdItem	dt_oatdexparse.h	/^	kDexTypeProtoIdItem              = 0x0003,$/;"	e	enum:__anon5
kDexTypeStringDataItem	dt_oatdexparse.h	/^	kDexTypeStringDataItem           = 0x2002,$/;"	e	enum:__anon5
kDexTypeStringIdItem	dt_oatdexparse.h	/^	kDexTypeStringIdItem             = 0x0001,$/;"	e	enum:__anon5
kDexTypeTypeIdItem	dt_oatdexparse.h	/^	kDexTypeTypeIdItem               = 0x0002,$/;"	e	enum:__anon5
kDexTypeTypeList	dt_oatdexparse.h	/^	kDexTypeTypeList                 = 0x1001,$/;"	e	enum:__anon5
kDexVisibilityBuild	dt_oatdexparse.h	/^	kDexVisibilityBuild         = 0x00,     \/* annotation visibility *\/$/;"	e	enum:__anon4
kDexVisibilityRuntime	dt_oatdexparse.h	/^	kDexVisibilityRuntime       = 0x01,$/;"	e	enum:__anon4
kDexVisibilitySystem	dt_oatdexparse.h	/^	kDexVisibilitySystem        = 0x02,$/;"	e	enum:__anon4
kMips	dt_oatdexparse.h	/^	kMips,$/;"	e	enum:__anon12
kMips64	dt_oatdexparse.h	/^	kMips64$/;"	e	enum:__anon12
kNone	dt_oatdexparse.h	/^	kNone,$/;"	e	enum:__anon12
kOatClassAllCompiled	dt_oatdexparse.h	/^	kOatClassAllCompiled = 0, $/;"	e	enum:__anon11
kOatClassMax	dt_oatdexparse.h	/^	kOatClassMax = 3$/;"	e	enum:__anon11
kOatClassNoneCompiled	dt_oatdexparse.h	/^	kOatClassNoneCompiled = 2,$/;"	e	enum:__anon11
kOatClassSomeCompiled	dt_oatdexparse.h	/^	kOatClassSomeCompiled = 1,$/;"	e	enum:__anon11
kSHA1DigestLen	dt_oatdexparse.h	/^enum { kSHA1DigestLen = 20,$/;"	e	enum:__anon3
kSHA1DigestOutputLen	dt_oatdexparse.h	/^	kSHA1DigestOutputLen = kSHA1DigestLen*2 +1 };$/;"	e	enum:__anon3
kThumb2	dt_oatdexparse.h	/^	kThumb2,$/;"	e	enum:__anon12
kX86	dt_oatdexparse.h	/^	kX86,$/;"	e	enum:__anon12
kX86_64	dt_oatdexparse.h	/^	kX86_64,$/;"	e	enum:__anon12
keyValueStoreSize	dt_oatdexparse.h	/^	UInt  keyValueStoreSize;										\/\/ The length of key_value_store$/;"	m	struct:OatHeader
kind	dt_instrument.h	/^	TempKind	kind;$/;"	m	struct:__anon25
kind	dt_translate.c	/^	TempKind kind;$/;"	m	struct:__anon23	file:
l	dt_oatdexparse.h	/^	struct Object* l;$/;"	m	union:JValue	typeref:struct:JValue::Object
l	dt_oatdexparse.h	/^	void*   l;$/;"	m	union:JValue
lastAddr	dt_oatdexparse.h	/^	Addr						lastAddr;$/;"	m	struct:MonitorDexFile
layout	dt_instrument.h	/^	const		VexGuestLayout*	layout;$/;"	m	struct:_MCEnv
layout	dt_translate.c	/^	const VexGuestLayout* layout;$/;"	m	struct:_MCEnv	file:
len	dt_oatdexparse.h	/^	UInt		len;				\/* Length of the file in memory *\/$/;"	m	struct:DexFileInfo
len	dt_oatplus.h	/^	\/*0x04*\/ UInt		len;$/;"	m	struct:StdString
len_uleb128	dt_oatparse.c	/^UInt len_uleb128(unsigned long n)$/;"	f
length	dt_oatdexparse.h	/^	Int  length;         \/* length of data *\/$/;"	m	struct:MemMapping
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
linkOff	dt_oatdexparse.h	/^	\/* 30 *\/UInt  linkOff;$/;"	m	struct:DexHeader
linkSize	dt_oatdexparse.h	/^	\/* 2c *\/UInt  linkSize;$/;"	m	struct:DexHeader
list	dt_oatdexparse.h	/^	struct DexAnnotationSetRefItem list[1];$/;"	m	struct:DexAnnotationSetRefList	typeref:struct:DexAnnotationSetRefList::DexAnnotationSetRefItem
list	dt_oatdexparse.h	/^	struct DexMapItem list[1];     \/* entries *\/$/;"	m	struct:DexMapList	typeref:struct:DexMapList::DexMapItem
list	dt_oatdexparse.h	/^	struct DexTypeItem list[1];	\/\/ elements of the list$/;"	m	struct:DexTypeList	typeref:struct:DexTypeList::DexTypeItem
llist	dt_translate.c	/^struct LibList *llist = NULL;$/;"	v	typeref:struct:LibList
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
location_	dt_oatplus.h	/^	\/*0x0c*\/ struct StdString location_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::StdString
location_checksum_	dt_oatplus.h	/^	\/*0x18*\/ UInt		location_checksum_;$/;"	m	struct:DexFilePlus
lock	dt_oatdexparse.h	/^	UInt  lock;$/;"	m	struct:Object
lvar_i	dt_taint.c	/^int      lvar_i[STACK_SIZE];$/;"	v
lvar_s	dt_taint.c	/^struct   myStringArray lvar_s;$/;"	v	typeref:struct:myStringArray
m	dt_taint.h	/^   char m[STACK_SIZE][MAX_LEN];$/;"	m	struct:myStringArray
magic	dt_oatdexparse.h	/^	UChar  magic[4];$/;"	m	struct:OatHeader
magic	dt_oatdexparse.h	/^	UChar  magic[8];           \/* includes version number *\/$/;"	m	struct:DexOptHeader
magic	dt_oatdexparse.h	/^	\/* 00 *\/UChar  magic[8];           \/* includes version number *\/$/;"	m	struct:DexHeader
make_mem_noaccess	dt_taint.c	/^void DT_(make_mem_noaccess) ( Addr a, SizeT len ) {$/;"	f
make_mem_tainted	dt_taint.c	/^void DT_(make_mem_tainted) ( Addr a, SizeT len ) {$/;"	f
make_mem_tainted_named	dt_taint.c	/^void DT_(make_mem_tainted_named) ( Addr a, SizeT len, const HChar *varname ) {$/;"	f
make_mem_untainted	dt_taint.c	/^void DT_(make_mem_untainted) ( Addr beg, SizeT len ) {$/;"	f
malloc	dt_mem_wrappers.c	/^void* DT_(malloc) ( ThreadId tid, SizeT szB )$/;"	f
mallocEmptyIRDirty	copy.c	/^IRDirty* mallocEmptyIRDirty(void) {$/;"	f
mallocIRCallee	copy.c	/^IRCallee* mallocIRCallee(Int regparms, const HChar* name, void* addr)$/;"	f
mallocIRConst_F64	copy.c	/^IRConst* mallocIRConst_F64(Double f64)$/;"	f
mallocIRConst_F64i	copy.c	/^IRConst* mallocIRConst_F64i(ULong f64i)$/;"	f
mallocIRConst_U1	copy.c	/^IRConst* mallocIRConst_U1(Bool bit)$/;"	f
mallocIRConst_U16	copy.c	/^IRConst* mallocIRConst_U16(UShort u16)$/;"	f
mallocIRConst_U32	copy.c	/^IRConst* mallocIRConst_U32(UInt u32)$/;"	f
mallocIRConst_U64	copy.c	/^IRConst* mallocIRConst_U64(ULong u64)$/;"	f
mallocIRConst_U8	copy.c	/^IRConst* mallocIRConst_U8(UChar u8)$/;"	f
mallocIRConst_V128	copy.c	/^IRConst* mallocIRConst_V128(UShort con)$/;"	f
mallocIRExpr_Binder	copy.c	/^IRExpr* mallocIRExpr_Binder(Int binder) {$/;"	f
mallocIRExpr_Binop	copy.c	/^IRExpr* mallocIRExpr_Binop(IROp op, IRExpr* arg1, IRExpr* arg2) {$/;"	f
mallocIRExpr_CCall	copy.c	/^IRExpr* mallocIRExpr_CCall(IRCallee* cee, IRType retty, IRExpr** args) {$/;"	f
mallocIRExpr_Const	copy.c	/^IRExpr* mallocIRExpr_Const(IRConst* con) {$/;"	f
mallocIRExpr_Get	copy.c	/^IRExpr* mallocIRExpr_Get(Int off, IRType ty) {$/;"	f
mallocIRExpr_GetI	copy.c	/^IRExpr* mallocIRExpr_GetI(IRRegArray* descr, IRExpr* ix, Int bias) {$/;"	f
mallocIRExpr_ITE	copy.c	/^IRExpr* mallocIRExpr_ITE(IRExpr* cond, IRExpr* iftrue, IRExpr* iffalse) {$/;"	f
mallocIRExpr_Load	copy.c	/^IRExpr* mallocIRExpr_Load(IREndness end, IRType ty, IRExpr* addr) {$/;"	f
mallocIRExpr_Qop	copy.c	/^IRExpr* mallocIRExpr_Qop(IROp op, IRExpr* arg1, IRExpr* arg2, $/;"	f
mallocIRExpr_RdTmp	copy.c	/^IRExpr* mallocIRExpr_RdTmp(IRTemp tmp) {$/;"	f
mallocIRExpr_Triop	copy.c	/^IRExpr* mallocIRExpr_Triop (IROp op, IRExpr* arg1, $/;"	f
mallocIRExpr_Unop	copy.c	/^IRExpr* mallocIRExpr_Unop(IROp op, IRExpr* arg) {$/;"	f
mallocIRRegArray	copy.c	/^IRRegArray* mallocIRRegArray(Int base, IRType elemTy, Int nElems)$/;"	f
mallocIRStmt_AbiHint	copy.c	/^IRStmt* mallocIRStmt_AbiHint(IRExpr* base, Int len, IRExpr* nia) {$/;"	f
mallocIRStmt_Dirty	copy.c	/^IRStmt* mallocIRStmt_Dirty(IRDirty* d)$/;"	f
mallocIRStmt_Exit	copy.c	/^IRStmt* mallocIRStmt_Exit(IRExpr* guard, IRJumpKind jk, IRConst* dst) {$/;"	f
mallocIRStmt_IMark	copy.c	/^IRStmt* mallocIRStmt_IMark(Addr64 addr, Int len) {$/;"	f
mallocIRStmt_MBE	copy.c	/^IRStmt* mallocIRStmt_MBE(IRMBusEvent event)$/;"	f
mallocIRStmt_NoOp	copy.c	/^IRStmt* mallocIRStmt_NoOp(void)$/;"	f
mallocIRStmt_Put	copy.c	/^IRStmt* mallocIRStmt_Put(Int off, IRExpr* data) {$/;"	f
mallocIRStmt_PutI	copy.c	/^IRStmt* mallocIRStmt_PutI(IRRegArray* descr, IRExpr* ix,$/;"	f
mallocIRStmt_Store	copy.c	/^IRStmt* mallocIRStmt_Store(IREndness end, IRExpr* addr, IRExpr* data) {$/;"	f
mallocIRStmt_WrTmp	copy.c	/^IRStmt* mallocIRStmt_WrTmp(IRTemp tmp, IRExpr* data) {$/;"	f
malloc_list	dt_mem_wrappers.c	/^VgHashTable *DT_(malloc_list)  = NULL;   \/\/ HP_Chunks$/;"	v
malloc_usable_size	dt_mem_wrappers.c	/^SizeT DT_(malloc_usable_size) ( ThreadId tid, void* p )$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mapOff	dt_oatdexparse.h	/^	\/* 34 *\/UInt  mapOff;$/;"	m	struct:DexHeader
mappingTableOffset	dt_oatdexparse.h	/^	UInt mappingTableOffset;$/;"	m	struct:OatQuickMethodHeader
max_defined_SMs	dt_taint.c	/^static Int   max_defined_SMs   = 0;$/;"	v	file:
max_noaccess_SMs	dt_taint.c	/^static Int   max_noaccess_SMs  = 0;$/;"	v	file:
max_non_DSM_SMs	dt_taint.c	/^static Int   max_non_DSM_SMs   = 0;$/;"	v	file:
max_secVBit_nodes	dt_taint.c	/^static Int   max_secVBit_nodes = 0;$/;"	v	file:
max_undefined_SMs	dt_taint.c	/^static Int   max_undefined_SMs = 0;$/;"	v	file:
maybe_find_in_auxmap	dt_taint.c	/^static INLINE AuxMapEnt* maybe_find_in_auxmap ( Addr a )$/;"	f	file:
meetDexFile	dt_dexparse.c	/^	struct MonitorDexFile* meetDexFile(const struct DexFile* pDexFile, Addr addr, UInt len, UInt state)$/;"	f
meetDexFilePlus	dt_dexparse.c	/^	struct MonitorDexFile* meetDexFilePlus(const struct DexFilePlus* pDexFilePlus, Addr addr, UInt len, UInt state)$/;"	f
memMap	dt_oatdexparse.h	/^	struct MemMapping   memMap;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::MemMapping
mem_map_	dt_oatplus.h	/^	\/*0x1c*\/ struct MemMapPlus *mem_map_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::MemMapPlus
memalign	dt_mem_wrappers.c	/^void* DT_(memalign) ( ThreadId tid, SizeT alignB, SizeT szB )$/;"	f
method	dt_oatdexparse.h	/^	const  struct Method*		method;    \/\/ Method being executed$/;"	m	struct:InterpSaveState	typeref:struct:InterpSaveState::Method
methodClassDex	dt_oatdexparse.h	/^	struct  DvmDex*         methodClassDex;$/;"	m	struct:InterpSaveState	typeref:struct:InterpSaveState::DvmDex
methodIdsOff	dt_oatdexparse.h	/^	\/* 5c *\/UInt  methodIdsOff;$/;"	m	struct:DexHeader
methodIdsSize	dt_oatdexparse.h	/^	\/* 58 *\/UInt  methodIdsSize;$/;"	m	struct:DexHeader
methodIdx	dt_oatdexparse.h	/^	UInt  methodIdx;$/;"	m	struct:DexMethodAnnotationsItem
methodIdx	dt_oatdexparse.h	/^	UInt  methodIdx;$/;"	m	struct:DexParameterAnnotationsItem
methodIdx	dt_oatdexparse.h	/^	UInt methodIdx;    \/* index to a method_id_item *\/$/;"	m	struct:DexMethod
methodIndex	dt_oatdexparse.h	/^	u2			        methodIndex;$/;"	m	struct:Method
methodIndexArray	dt_oatdexparse.h	/^	Int*            methodIndexArray;$/;"	m	struct:InterfaceEntry
method_ids_	dt_oatplus.h	/^	\/*0x30*\/ struct MethodId	*method_ids_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::MethodId
methodsSize	dt_oatdexparse.h	/^	UInt  methodsSize;          \/* count of DexMethodAnnotationsItem *\/$/;"	m	struct:DexAnnotationsDirectoryItem
mkDifD16	dt_translate.c	/^static IRAtom* mkDifD16 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkDifD32	dt_translate.c	/^static IRAtom* mkDifD32 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkDifD64	dt_translate.c	/^static IRAtom* mkDifD64 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkDifD8	dt_translate.c	/^static IRAtom* mkDifD8 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) { \/\/444$/;"	f	file:
mkDifDV128	dt_translate.c	/^static IRAtom* mkDifDV128 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkDifDV256	dt_translate.c	/^static IRAtom* mkDifDV256 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkImproveAND16	dt_translate.c	/^static IRAtom* mkImproveAND16 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveAND32	dt_translate.c	/^static IRAtom* mkImproveAND32 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveAND64	dt_translate.c	/^static IRAtom* mkImproveAND64 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveAND8	dt_translate.c	/^static IRAtom* mkImproveAND8 ( MCEnv* mce, IRAtom* data, IRAtom* vbits ) \/\/546$/;"	f	file:
mkImproveANDV128	dt_translate.c	/^static IRAtom* mkImproveANDV128 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveANDV256	dt_translate.c	/^static IRAtom* mkImproveANDV256 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveOR16	dt_translate.c	/^static IRAtom* mkImproveOR16 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveOR32	dt_translate.c	/^static IRAtom* mkImproveOR32 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveOR64	dt_translate.c	/^static IRAtom* mkImproveOR64 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveOR8	dt_translate.c	/^static IRAtom* mkImproveOR8 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveORV128	dt_translate.c	/^static IRAtom* mkImproveORV128 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkImproveORV256	dt_translate.c	/^static IRAtom* mkImproveORV256 ( MCEnv* mce, IRAtom* data, IRAtom* vbits )$/;"	f	file:
mkLazy2	dt_translate.c	/^IRAtom* mkLazy2 ( MCEnv* mce, IRType finalVty, IRAtom* va1, IRAtom* va2 ) \/\/1322$/;"	f	file:
mkLazy3	dt_translate.c	/^IRAtom* mkLazy3 ( MCEnv* mce, IRType finalVty,$/;"	f	file:
mkLazy4	dt_translate.c	/^IRAtom* mkLazy4 ( MCEnv* mce, IRType finalVty,$/;"	f	file:
mkLazyN	dt_translate.c	/^IRAtom* mkLazyN ( MCEnv* mce,$/;"	f	file:
mkLeft16	dt_translate.c	/^static IRAtom* mkLeft16 ( MCEnv* mce, IRAtom* a1 ) {$/;"	f	file:
mkLeft32	dt_translate.c	/^static IRAtom* mkLeft32 ( MCEnv* mce, IRAtom* a1 ) {$/;"	f	file:
mkLeft64	dt_translate.c	/^static IRAtom* mkLeft64 ( MCEnv* mce, IRAtom* a1 ) {$/;"	f	file:
mkLeft8	dt_translate.c	/^static IRAtom* mkLeft8 ( MCEnv* mce, IRAtom* a1 ) {$/;"	f	file:
mkPCast16x16	dt_translate.c	/^static IRAtom* mkPCast16x16 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast16x2	dt_translate.c	/^static IRAtom* mkPCast16x2 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast16x4	dt_translate.c	/^static IRAtom* mkPCast16x4 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast16x8	dt_translate.c	/^static IRAtom* mkPCast16x8 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast32x2	dt_translate.c	/^static IRAtom* mkPCast32x2 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast32x4	dt_translate.c	/^static IRAtom* mkPCast32x4 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast32x8	dt_translate.c	/^static IRAtom* mkPCast32x8 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast64x2	dt_translate.c	/^static IRAtom* mkPCast64x2 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast64x4	dt_translate.c	/^static IRAtom* mkPCast64x4 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast8x16	dt_translate.c	/^static IRAtom* mkPCast8x16 ( MCEnv* mce, IRAtom* at ) \/\/1688$/;"	f	file:
mkPCast8x32	dt_translate.c	/^static IRAtom* mkPCast8x32 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast8x4	dt_translate.c	/^static IRAtom* mkPCast8x4 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCast8x8	dt_translate.c	/^static IRAtom* mkPCast8x8 ( MCEnv* mce, IRAtom* at )$/;"	f	file:
mkPCastTo	dt_translate.c	/^static IRAtom* mkPCastTo( MCEnv* mce, IRType dst_ty, IRAtom* vbits )$/;"	f	file:
mkPCastXXtoXXlsb	dt_translate.c	/^static IRAtom* mkPCastXXtoXXlsb ( MCEnv* mce, IRAtom* varg, IRType ty )$/;"	f	file:
mkU1	dt_translate.c	303;"	d	file:
mkU16	dt_translate.c	305;"	d	file:
mkU32	dt_translate.c	306;"	d	file:
mkU64	dt_translate.c	307;"	d	file:
mkU8	dt_translate.c	304;"	d	file:
mkUifU	dt_translate.c	/^static IRAtom* mkUifU ( MCEnv* mce, IRType vty, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifU16	dt_translate.c	/^static IRAtom* mkUifU16 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifU32	dt_translate.c	/^static IRAtom* mkUifU32 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifU64	dt_translate.c	/^static IRAtom* mkUifU64 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifU8	dt_translate.c	/^static IRAtom* mkUifU8 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifUV128	dt_translate.c	/^static IRAtom* mkUifUV128 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkUifUV256	dt_translate.c	/^static IRAtom* mkUifUV256 ( MCEnv* mce, IRAtom* a1, IRAtom* a2 ) {$/;"	f	file:
mkV128	dt_translate.c	308;"	d	file:
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkexpr	dt_translate.c	309;"	d	file:
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
myStringArray	dt_taint.h	/^struct myStringArray{$/;"	s
myStringArray_getIndex	dt_taint.c	/^static Int myStringArray_getIndex( struct myStringArray *a, const HChar* string ){$/;"	f	file:
myStringArray_push	dt_taint.c	/^static Int myStringArray_push( struct myStringArray *a, const HChar* string ){$/;"	f	file:
my_exit	dt_replace_wrapper.c	/^static inline void my_exit ( int x )$/;"	f	file:
n_auxmap_L1_cmps	dt_taint.c	/^static ULong n_auxmap_L1_cmps      = 0;$/;"	v	file:
n_auxmap_L1_searches	dt_taint.c	/^static ULong n_auxmap_L1_searches  = 0;$/;"	v	file:
n_auxmap_L2_nodes	dt_taint.c	/^static ULong n_auxmap_L2_nodes     = 0;$/;"	v	file:
n_auxmap_L2_searches	dt_taint.c	/^static ULong n_auxmap_L2_searches  = 0;$/;"	v	file:
n_defined_SMs	dt_taint.c	/^static Int   n_defined_SMs     = 0;$/;"	v	file:
n_deissued_SMs	dt_taint.c	/^static Int   n_deissued_SMs    = 0;$/;"	v	file:
n_issued_SMs	dt_taint.c	/^static Int   n_issued_SMs      = 0;$/;"	v	file:
n_noaccess_SMs	dt_taint.c	/^static Int   n_noaccess_SMs    = N_PRIMARY_MAP; \/\/ start with many noaccess DSMs$/;"	v	file:
n_non_DSM_SMs	dt_taint.c	/^static Int   n_non_DSM_SMs     = 0;$/;"	v	file:
n_secVBit_nodes	dt_taint.c	/^static Int   n_secVBit_nodes   = 0;$/;"	v	file:
n_undefined_SMs	dt_taint.c	/^static Int   n_undefined_SMs   = 0;$/;"	v	file:
name	dt_oatdexparse.h	/^	HChar		name[255];	\/* name of the dex file *\/$/;"	m	struct:DexFileInfo
name	dt_oatdexparse.h	/^	const HChar*     name;$/;"	m	struct:Field
name	dt_oatdexparse.h	/^	const char*     name;$/;"	m	struct:Method
name	dt_taint.h	/^	char name[MAX_LEN];$/;"	m	struct:FunList
name	dt_taint.h	/^	char name[MAX_LEN];$/;"	m	struct:LibList
nameIdx	dt_oatdexparse.h	/^	UInt		nameIdx;$/;"	m	struct:DexMethodId
nameIdx	dt_oatdexparse.h	/^	UInt   nameIdx;$/;"	m	struct:DexFieldId
name_	dt_oatplus.h	/^	\/*0x00*\/ struct StdString name_;$/;"	m	struct:MemMapPlus	typeref:struct:MemMapPlus::StdString
nativeFunc	dt_oatdexparse.h	/^	void*						nativeFunc; \/* Function point *\/$/;"	m	struct:Method
newTemp	dt_translate.c	/^static IRTemp newTemp ( MCEnv* mce, IRType ty, TempKind kind )$/;"	f	file:
next	dt_oatdexparse.h	/^	struct DexFileList* next;$/;"	m	struct:MonitorDexFile	typeref:struct:MonitorDexFile::DexFileList
next	dt_oatdexparse.h	/^	struct DexFilePlusNode *next;$/;"	m	struct:DexFilePlusNode	typeref:struct:DexFilePlusNode::DexFilePlusNode
next	dt_taint.h	/^	struct FilterList* next;$/;"	m	struct:FilterList	typeref:struct:FilterList::FilterList
next	dt_taint.h	/^	struct FunList *next;$/;"	m	struct:FunList	typeref:struct:FunList::FunList
next	dt_taint.h	/^	struct LibList *next;$/;"	m	struct:LibList	typeref:struct:LibList::LibList
next	dt_wrappers.h	/^	struct	_HP_Chunk *next;$/;"	m	struct:_HP_Chunk	typeref:struct:_HP_Chunk::_HP_Chunk
noRef	dt_oatdexparse.h	/^	Bool noRef;$/;"	m	struct:Method
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = datatrace-arm-linux$(EXEEXT) \\$/;"	m
numBBs	dt_translate.c	/^Int numBBs = 0;$/;"	v
numEntries	dt_oatdexparse.h	/^	Int     numEntries;                 \/\/ size of table[]; always power of 2$/;"	m	struct:DexClassLookup
numEntries	dt_oatdexparse.h	/^	u1      numEntries[2];  \/* number of entries *\/$/;"	m	struct:RegisterMap
numKBBs	dt_translate.c	/^Int numKBBs = 0;$/;"	v
oatDexClassParse	dt_oatparse.c	/^Bool oatDexClassParse(Addr oatdata, $/;"	f
oatDexFileParse	dt_oatparse.c	/^Bool oatDexFileParse(Addr oatdata, $/;"	f
oatDexParse	dt_oatparse.c	/^Bool oatDexParse(Addr oatdata, UInt oatdata_size,$/;"	f
oat_dex_file_	dt_oatplus.h	/^	\/*0x44*\/ struct OatDexFilePlus *oat_dex_file_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::OatDexFilePlus
oatdata_offset	dt_oatdexparse.h	/^	UInt oatdata_offset;$/;"	m	struct:OatSec
oatdata_size	dt_oatdexparse.h	/^	UInt oatdata_size;$/;"	m	struct:OatSec
oatexec_offset	dt_oatdexparse.h	/^	UInt oatexec_offset;$/;"	m	struct:OatSec
oatexec_size	dt_oatdexparse.h	/^	UInt oatexec_size;$/;"	m	struct:OatSec
oatlastword_offset	dt_oatdexparse.h	/^	UInt oatlastword_offset;$/;"	m	struct:OatSec
oatlastword_size	dt_oatdexparse.h	/^	UInt oatlastword_size;$/;"	m	struct:OatSec
object	dt_oatdexparse.h	/^	struct Object			object;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::Object
objectSize	dt_oatdexparse.h	/^	Int							objectSize;$/;"	m	struct:ClassObject
offset	dt_oatdexparse.h	/^	UInt						offset;$/;"	m	struct:MonitorDexFile
offset	dt_oatdexparse.h	/^	UInt	 offset;            \/* file offset to the start of data *\/$/;"	m	struct:DexMapItem
offset	dt_oatdexparse.h	/^	UInt offset;$/;"	m	struct:OatClassOffset
okayToFree	dt_oatdexparse.h	/^	Bool        okayToFree;$/;"	m	struct:DexOrJar
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
optLength	dt_oatdexparse.h	/^	UInt  optLength;$/;"	m	struct:DexOptHeader
optOffset	dt_oatdexparse.h	/^	UInt  optOffset;          \/* file offset of optimized data tables *\/$/;"	m	struct:DexOptHeader
outsSize	dt_oatdexparse.h	/^	UShort  outsSize;$/;"	m	struct:DexCode
outsSize	dt_oatdexparse.h	/^	UShort outsSize;$/;"	m	struct:CodeItem
outsSize	dt_oatdexparse.h	/^	u2              outsSize;$/;"	m	struct:Method
overhead	dt_oatdexparse.h	/^	UInt               overhead;$/;"	m	struct:DexFile
pClassDefs	dt_oatdexparse.h	/^	const struct DexClassDef*			pClassDefs;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexClassDef
pClassLookup	dt_oatdexparse.h	/^	const struct DexClassLookup* pClassLookup;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexClassLookup
pDexFile	dt_oatdexparse.h	/^	struct DexFIle			*pDexFile;$/;"	m	struct:DexFilePlusNode	typeref:struct:DexFilePlusNode::DexFIle
pDexFile	dt_oatdexparse.h	/^	struct DexFile*     pDexFile;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::DexFile
pDexFile	dt_oatdexparse.h	/^	struct DexFile* pDexFile;$/;"	m	struct:MonitorDexFile	typeref:struct:MonitorDexFile::DexFile
pDexFileClone	dt_oatdexparse.h	/^	struct DexFile* pDexFileClone;$/;"	m	struct:MonitorDexFile	typeref:struct:MonitorDexFile::DexFile
pDexFilePlus	dt_oatdexparse.h	/^	struct DexFilePlus	*pDexFilePlus;$/;"	m	struct:DexFilePlusNode	typeref:struct:DexFilePlusNode::DexFilePlus
pDexFilePlusList	dt_dexparse.c	/^struct DexFilePlusNode *pDexFilePlusList = NULL;$/;"	v	typeref:struct:DexFilePlusNode
pDexMemory	dt_oatdexparse.h	/^	u1*         pDexMemory; \/\/ malloc()ed memory, if any$/;"	m	struct:DexOrJar
pDvmDex	dt_oatdexparse.h	/^	struct DvmDex*		pDvmDex;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::DvmDex
pFieldIds	dt_oatdexparse.h	/^	const struct DexFieldId*			pFieldIds;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexFieldId
pHeader	dt_oatdexparse.h	/^	const  struct DexHeader*    pHeader;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::DexHeader
pHeader	dt_oatdexparse.h	/^	const struct DexHeader*			  pHeader;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexHeader
pInterfaceCache	dt_oatdexparse.h	/^	void* pInterfaceCache;$/;"	m	struct:DvmDex
pJarFile	dt_oatdexparse.h	/^	void*			  pJarFile;$/;"	m	struct:DexOrJar
pLinkData	dt_oatdexparse.h	/^	const struct DexLink*					pLinkData;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexLink
pMethodIds	dt_oatdexparse.h	/^	const struct DexMethodId*			pMethodIds;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexMethodId
pOptHeader	dt_oatdexparse.h	/^	const struct DexOptHeader* pOptHeader;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexOptHeader
pProtoIds	dt_oatdexparse.h	/^	const struct DexProtoId*			pProtoIds;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexProtoId
pRawDexFile	dt_oatdexparse.h	/^	void*			  pRawDexFile;$/;"	m	struct:DexOrJar
pRegisterMapPool	dt_oatdexparse.h	/^	Addr         pRegisterMapPool;       \/\/ RegisterMapClassPool$/;"	m	struct:DexFile
pResClasses	dt_oatdexparse.h	/^	struct ClassObject** pResClasses;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::ClassObject
pResFields	dt_oatdexparse.h	/^	struct Field**      pResFields;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::Field
pResMethods	dt_oatdexparse.h	/^	struct Method**     pResMethods;$/;"	m	struct:DvmDex	typeref:struct:DvmDex::Method
pResStrings	dt_oatdexparse.h	/^	void** pResStrings;$/;"	m	struct:DvmDex
pStringIds	dt_oatdexparse.h	/^	const struct DexStringId*			pStringIds;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexStringId
pTypeIds	dt_oatdexparse.h	/^	const struct DexTypeId*				pTypeIds;$/;"	m	struct:DexFile	typeref:struct:DexFile::DexTypeId
parametersOff	dt_oatdexparse.h	/^	UInt  parametersOff;      \/* file offset to type_list for parameter types *\/$/;"	m	struct:DexProtoId
parametersSize	dt_oatdexparse.h	/^	UInt  parametersSize;       \/* count of DexParameterAnnotationsItem *\/$/;"	m	struct:DexAnnotationsDirectoryItem
parseAccessFlags	dt_oatparse.c	/^UChar* parseAccessFlags(UInt flags){$/;"	f
pc	dt_oatdexparse.h	/^	const UShort*					  pc;         \/\/ Dalvik PC$/;"	m	struct:InterpSaveState
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pformat	dt_debug.h	/^UChar pformat[256];$/;"	v
pformat1	dt_debug.h	/^UChar pformat1[256];$/;"	v
pformat2	dt_debug.h	/^UChar pformat2[256];$/;"	v
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/valgrind$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/valgrind$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/valgrind$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/valgrind$/;"	m
prefix	Makefile	/^prefix = \/system$/;"	m
prev	dt_oatdexparse.h	/^	struct InterpSaveState* prev;  \/\/ To follow nested activations$/;"	m	struct:InterpSaveState	typeref:struct:InterpSaveState::InterpSaveState
primary_map	dt_taint.c	/^static SecMap* primary_map[N_PRIMARY_MAP];$/;"	v	file:
primitiveType	dt_oatdexparse.h	/^	enum PrimitiveType	   primitiveType;$/;"	m	struct:ClassObject	typeref:enum:ClassObject::PrimitiveType
primitiveTypeLabel	dt_dexparse.c	/^static const HChar* primitiveTypeLabel(HChar typeChar)$/;"	f	file:
printOatHeader	dt_oatparse.c	/^static void printOatHeader(struct OatHeader* oheader) {$/;"	f	file:
processDescr1	dt_taint.c	/^static void processDescr1(XArray* descr1, HChar* varnamebuf, UInt bufsize)$/;"	f	file:
processDexFile	dt_dexparse.c	/^	void processDexFile(struct DexFile* pDexFile)$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
prot_	dt_oatplus.h	/^	\/*0x1c*\/ Int		prot_;$/;"	m	struct:MemMapPlus
protoIdsOff	dt_oatdexparse.h	/^	\/* 4c *\/UInt  protoIdsOff;$/;"	m	struct:DexHeader
protoIdsSize	dt_oatdexparse.h	/^	\/* 48 *\/UInt  protoIdsSize;$/;"	m	struct:DexHeader
protoIdx	dt_oatdexparse.h	/^	UInt  protoIdx;                \/* index into proto_ids table of dexFile *\/$/;"	m	struct:DexProto
protoIdx	dt_oatdexparse.h	/^	UShort  protoIdx;$/;"	m	struct:DexMethodId
proto_ids_	dt_oatplus.h	/^	\/*0x34*\/ struct ProtoId		*proto_ids_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::ProtoId
prototype	dt_oatdexparse.h	/^	struct DexProto prototype;$/;"	m	struct:Method	typeref:struct:Method::DexProto
psdir	Makefile	/^psdir = ${docdir}$/;"	m
pthread_mutex_lock_wrapper	dt_replace_wrapper.c	/^int pthread_mutex_lock_wrapper(pthread_mutex_t *mutex) {$/;"	f
pthread_mutex_t	dt_oatdexparse.h	/^	void*								pthread_mutex_t;$/;"	m	struct:DvmDex
pthread_mutex_unlock_wrapper	dt_replace_wrapper.c	/^int pthread_mutex_unlock_wrapper(pthread_mutex_t *mutex) {$/;"	f
quickGenericJniTrampolineOffset	dt_oatdexparse.h	/^	UInt  quickGenericJniTrampolineOffset;$/;"	m	struct:OatHeader
quickImtConflictTrampolineOffset	dt_oatdexparse.h	/^	UInt  quickImtConflictTrampolineOffset;$/;"	m	struct:OatHeader
quickResolutionTrampolineOffset	dt_oatdexparse.h	/^	UInt  quickResolutionTrampolineOffset;$/;"	m	struct:OatHeader
quickToInterpreterBridgeOffset	dt_oatdexparse.h	/^	UInt  quickToInterpreterBridgeOffset;				$/;"	m	struct:OatHeader
readAndVerifySignedLeb128	dt_dexparse.c	/^Int readAndVerifySignedLeb128(const UChar** pStream, const UChar* limit,$/;"	f
readAndVerifyUnsignedLeb128	dt_dexparse.c	/^Int readAndVerifyUnsignedLeb128(const UChar** pStream, const UChar* limit,$/;"	f
readSignedLeb128	dt_dexparse.c	/^INLINE Int readSignedLeb128(const UChar** pStream) {$/;"	f
readUnsignedLeb128	dt_dexparse.c	/^INLINE Int readUnsignedLeb128(const UChar** pStream) {$/;"	f
readUnsignedLeb128	dt_oatparse.c	/^Int readUnsignedLeb128(UChar** pStream)$/;"	f
read_common	dt_syswrap.c	/^void read_common ( UInt taint_offset, Int taint_len,$/;"	f	file:
read_offset	dt_syswrap.c	/^static UInt read_offset = 0;$/;"	v	file:
read_wrapper	dt_replace_wrapper.c	/^int read_wrapper(int handle, void *buffer, int nbyte)$/;"	f
realloc	dt_mem_wrappers.c	/^void* DT_(realloc) ( ThreadId tid, void* p_old, SizeT new_szB )$/;"	f
realloc_block	dt_mem_wrappers.c	/^void* realloc_block ( ThreadId tid, void* p_old, SizeT new_req_szB )$/;"	f	file:
record_block	dt_mem_wrappers.c	/^void* record_block( ThreadId tid, void* p, SizeT req_szB, SizeT slop_szB )$/;"	f	file:
recv_wrapper	dt_replace_wrapper.c	/^int recv_wrapper(int s, void *buf, int len, unsigned int flags)$/;"	f
recvfrom_wrapper	dt_replace_wrapper.c	/^int recvfrom_wrapper(int s, void *buf, int len, int flags, struct sockaddr *from, socklen_t *slen)$/;"	f
refOffsets	dt_oatdexparse.h	/^	UInt							refOffsets;$/;"	m	struct:ClassObject
regWidth	dt_oatdexparse.h	/^	u1      regWidth;       \/* bytes per register line, 1+ *\/$/;"	m	struct:RegisterMap
registerMap	dt_oatdexparse.h	/^	const struct RegisterMap* registerMap;$/;"	m	struct:Method	typeref:struct:Method::RegisterMap
registersSize	dt_oatdexparse.h	/^	UShort  registersSize;$/;"	m	struct:DexCode
registersSize	dt_oatdexparse.h	/^	UShort registersSize;$/;"	m	struct:CodeItem
registersSize	dt_oatdexparse.h	/^	u2              registersSize;  \/* ins + locals *\/$/;"	m	struct:Method
releaseDexFileList	dt_dexparse.c	/^void releaseDexFileList() {$/;"	f
releaseFilterlist	dt_translate.c	/^void releaseFilterlist() {$/;"	f
req_szB	dt_wrappers.h	/^	SizeT		req_szB;						\/\/ Size requested$/;"	m	struct:_HP_Chunk
resolve_filename	dt_syswrap.c	/^void resolve_filename(UWord fd, HChar *path, Int max)$/;"	f	file:
returnTypeIdx	dt_oatdexparse.h	/^	UInt  returnTypeIdx;      \/* index into typeIds list for return type *\/$/;"	m	struct:DexProtoId
retval	dt_oatdexparse.h	/^	union JValue						retval;$/;"	m	struct:InterpSaveState	typeref:union:InterpSaveState::JValue
reuse_	dt_oatplus.h	/^	\/*0x20*\/ Bool   reuse_;$/;"	m	struct:MemMapPlus
ri	dt_taint.c	/^UInt  ri[RI_MAX];$/;"	v
s	dt_oatdexparse.h	/^		s2    s;$/;"	m	struct:JValue::__anon16
s	dt_oatdexparse.h	/^	s2      s;$/;"	m	union:JValue
s1	dt_oatdexparse.h	/^typedef Char			s1;$/;"	t
s2	dt_oatdexparse.h	/^typedef Short			s2;$/;"	t
s4	dt_oatdexparse.h	/^typedef Int				s4;$/;"	t
s8	dt_oatdexparse.h	/^typedef Long			s8;$/;"	t
sa_data	dt_replace_wrapper.c	/^   char sa_data[14];$/;"	m	struct:sockaddr	file:
sa_family	dt_replace_wrapper.c	/^   sa_family_t sa_family;$/;"	m	struct:sockaddr	file:
sa_family_t	dt_replace_wrapper.c	/^typedef unsigned short sa_family_t;$/;"	t	file:
sameKindedAtoms	dt_translate.c	/^static Bool sameKindedAtoms ( IRAtom* a1, IRAtom* a2 )$/;"	f	file:
sb	dt_instrument.h	/^	IRSB*		sb;$/;"	m	struct:_MCEnv
sb	dt_translate.c	/^	IRSB* sb;$/;"	m	struct:_MCEnv	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scalarShift	dt_translate.c	/^static IRAtom* scalarShift ( MCEnv*  mce,$/;"	f	file:
secVBitLimit	dt_taint.c	/^static Int  secVBitLimit = 1000;$/;"	v	file:
secVBitTable	dt_taint.c	/^static OSet* secVBitTable;$/;"	v	file:
sec_vbits_new_nodes	dt_taint.c	/^static ULong sec_vbits_new_nodes = 0;$/;"	v	file:
sec_vbits_updates	dt_taint.c	/^static ULong sec_vbits_updates   = 0;$/;"	v	file:
send_wrapper	dt_replace_wrapper.c	/^int send_wrapper(int s, const void *buf, int len, unsigned int flags) $/;"	f
sendto_wrapper	dt_replace_wrapper.c	/^int sendto_wrapper(int s, const void *buf, int len, unsigned int flags, const struct sockaddr *to, int tolen)$/;"	f
serialNumber	dt_oatdexparse.h	/^	UInt              serialNumber;$/;"	m	struct:ClassObject
setHelperAnns	dt_translate.c	/^static void setHelperAnns ( MCEnv* mce, IRDirty* di ) {$/;"	f	file:
set_address_range_perms	dt_taint.c	/^static void set_address_range_perms (Addr a, SizeT lenT, UWord vabits16, UWord dsm_num) {$/;"	f	file:
set_instrumentate	dt_main.c	/^static void DT_(set_instrumentate)(const HChar *reason, Bool state) {$/;"	f	file:
set_sec_vbits8	dt_taint.c	/^static void set_sec_vbits8(Addr a, UWord vbits8)$/;"	f	file:
set_vabits2	dt_taint.c	/^void set_vabits2 ( Addr a, UChar vabits2 )$/;"	f	file:
set_vabits8_for_aligned_word32	dt_taint.c	/^void set_vabits8_for_aligned_word32 ( Addr a, UChar vabits8 )$/;"	f	file:
set_vbits8	dt_taint.c	/^Bool set_vbits8 ( Addr a, UChar vbits8 )$/;"	f	file:
sfieldCount	dt_oatdexparse.h	/^	Int				        sfieldCount;$/;"	m	struct:ClassObject
sfields	dt_oatdexparse.h	/^	struct StaticField sfields[0]; \/* MUST be last item *\/$/;"	m	struct:ClassObject	typeref:struct:ClassObject::StaticField
shadowTypeV	dt_translate.c	/^static IRType shadowTypeV ( IRType ty ) \/\/348$/;"	f	file:
shadowV	dt_instrument.h	/^	IRTemp		shadowV;$/;"	m	struct:__anon25
shadowV	dt_translate.c	/^	IRTemp   shadowV;$/;"	m	struct:__anon23	file:
shadow_GET	dt_translate.c	/^IRExpr* shadow_GET ( MCEnv* mce, Int offset, IRType ty )$/;"	f	file:
shadow_GETI	dt_translate.c	/^IRExpr* shadow_GETI ( MCEnv* mce,$/;"	f	file:
shallowMallocIRExprVec	copy.c	/^IRExpr** shallowMallocIRExprVec(IRExpr** vec)$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shorty	dt_oatdexparse.h	/^	const char*     shorty;$/;"	m	struct:Method
shortyIdx	dt_oatdexparse.h	/^	UInt  shortyIdx;          \/* index into stringIds for shorty descriptor *\/$/;"	m	struct:DexProtoId
shouldTrace	dt_oatdexparse.h	/^	Bool shouldTrace;$/;"	m	struct:Method
signature	dt_oatdexparse.h	/^	\/* 0c *\/UChar  signature[kSHA1DigestLen]; \/* SHA-1 hash *\/$/;"	m	struct:DexHeader
signature	dt_oatdexparse.h	/^	const HChar*     signature;      \/* e.g. "I", "[C", "Landroid\/os\/Debug;" *\/$/;"	m	struct:Field
size	dt_oatdexparse.h	/^	Int     size;                       \/\/ total size, including "size"$/;"	m	struct:DexClassLookup
size	dt_oatdexparse.h	/^	UInt	 size;              \/* count of items of the indicated type *\/$/;"	m	struct:DexMapItem
size	dt_oatdexparse.h	/^	UInt  size;			               \/* #of entries in list *\/$/;"	m	struct:DexMapList
size	dt_oatdexparse.h	/^	UInt  size;$/;"	m	struct:DexAnnotationSetItem
size	dt_oatdexparse.h	/^	UInt  size;$/;"	m	struct:DexAnnotationSetRefList
size	dt_oatdexparse.h	/^	UInt size;						\/\/ size of the list, in entries$/;"	m	struct:DexTypeList
size	dt_taint.h	/^   int size;$/;"	m	struct:myStringArray
size_	dt_oatplus.h	/^	\/*0x08*\/ UInt		size_;$/;"	m	struct:DexFilePlus
size_	dt_oatplus.h	/^	\/*0x10*\/ UInt	  size_;$/;"	m	struct:MemMapPlus
size_t	dt_replace_wrapper.c	/^typedef unsigned int	 size_t;$/;"	t	file:
slop_szB	dt_wrappers.h	/^	SizeT		slop_szB;						\/\/ Extra bytes given above those requested$/;"	m	struct:_HP_Chunk
sm	dt_taint.c	/^	SecMap* sm;$/;"	m	struct:__anon18	file:
sm_distinguished	dt_taint.c	/^static SecMap sm_distinguished[3];$/;"	v	file:
smt2_amd64g_calculate_condition	dt_stmt2.c	/^void DT_(smt2_amd64g_calculate_condition) ( IRStmt *clone )$/;"	f
smt2_binop_ct	dt_stmt2.c	/^void DT_(smt2_binop_ct) ( IRStmt *clone )$/;"	f
smt2_binop_ct_add	dt_stmt2.c	495;"	d	file:
smt2_binop_ct_cmp	dt_stmt2.c	501;"	d	file:
smt2_binop_tc	dt_stmt2.c	/^void DT_(smt2_binop_tc) ( IRStmt *clone )$/;"	f
smt2_binop_tc_add	dt_stmt2.c	469;"	d	file:
smt2_binop_tc_cmp	dt_stmt2.c	475;"	d	file:
smt2_binop_tc_cmpMxN	dt_stmt2.c	482;"	d	file:
smt2_binop_tt	dt_stmt2.c	/^void DT_(smt2_binop_tt) ( IRStmt *clone )$/;"	f
smt2_binop_tt_11_add	dt_stmt2.c	678;"	d	file:
smt2_binop_tt_11_cmp	dt_stmt2.c	685;"	d	file:
smt2_ctz64	dt_stmt2.c	380;"	d	file:
smt2_exit	dt_stmt2.c	/^void DT_(smt2_exit) ( IRStmt *clone )$/;"	f
smt2_extract	dt_stmt2.c	355;"	d	file:
smt2_get	dt_stmt2.c	/^void DT_(smt2_get) ( IRStmt *clone )$/;"	f
smt2_getmsbsMxN	dt_stmt2.c	366;"	d	file:
smt2_ite_tt	dt_stmt2.c	/^void DT_(smt2_ite_tt) ( IRStmt *clone )$/;"	f
smt2_load_c_32	dt_stmt2.c	/^void DT_(smt2_load_c_32) ( IRStmt *clone, UInt value, UInt taint )$/;"	f
smt2_load_c_64	dt_stmt2.c	/^void DT_(smt2_load_c_64) ( IRStmt *clone, ULong value, ULong taint )$/;"	f
smt2_load_t_32	dt_stmt2.c	/^void DT_(smt2_load_t_32) ( IRStmt *clone, UInt value, UInt taint )$/;"	f
smt2_load_t_64	dt_stmt2.c	/^void DT_(smt2_load_t_64) ( IRStmt *clone, ULong value, ULong taint )$/;"	f
smt2_preamble	dt_stmt2.c	/^void DT_(smt2_preamble)( void )$/;"	f
smt2_put_t_32	dt_stmt2.c	/^void DT_(smt2_put_t_32) ( IRStmt *clone )$/;"	f
smt2_put_t_64	dt_stmt2.c	/^void DT_(smt2_put_t_64) ( IRStmt *clone )$/;"	f
smt2_rdtmp	dt_stmt2.c	/^void DT_(smt2_rdtmp) ( IRStmt *clone )$/;"	f
smt2_sign_extend	dt_stmt2.c	345;"	d	file:
smt2_store_ct	dt_stmt2.c	/^void DT_(smt2_store_ct) ( IRStmt *clone )$/;"	f
smt2_store_tc	dt_stmt2.c	/^void DT_(smt2_store_tc) ( IRStmt *clone )$/;"	f
smt2_store_tt	dt_stmt2.c	/^void DT_(smt2_store_tt) ( IRStmt *clone )$/;"	f
smt2_unop	dt_stmt2.c	360;"	d	file:
smt2_unop_t	dt_stmt2.c	/^void DT_(smt2_unop_t) ( IRStmt *clone )$/;"	f
smt2_x86g_calculate_condition	dt_stmt2.c	/^void DT_(smt2_x86g_calculate_condition) ( IRStmt *clone )$/;"	f
smt2_zero_extend	dt_stmt2.c	350;"	d	file:
sockaddr	dt_replace_wrapper.c	/^struct sockaddr {$/;"	s	file:
socklen_t	dt_replace_wrapper.c	/^typedef int						 socklen_t;$/;"	t	file:
sourceFile	dt_oatdexparse.h	/^	const HChar*	    sourceFile;$/;"	m	struct:ClassObject
sourceFileIdx	dt_oatdexparse.h	/^	\/*0x10*\/ UInt  sourceFileIdx;      \/* index into stringIds for source file name *\/$/;"	m	struct:DexClassDef
srcdir	Makefile	/^srcdir = .$/;"	m
stackOverflowed	dt_oatdexparse.h	/^	Bool        stackOverflowed;$/;"	m	struct:Thread
startAddr	dt_oatdexparse.h	/^	UInt	  startAddr;          \/* start address, in 16-bit code units *\/$/;"	m	struct:DexTry
start_of_this_sm	dt_taint.h	/^static INLINE Addr start_of_this_sm ( Addr a ) {$/;"	f
state	dt_oatdexparse.h	/^	UInt						state;$/;"	m	struct:MonitorDexFile
staticFields	dt_oatdexparse.h	/^	struct DexField*          staticFields;$/;"	m	struct:DexClassData	typeref:struct:DexClassData::DexField
staticFieldsSize	dt_oatdexparse.h	/^	UInt staticFieldsSize;$/;"	m	struct:DexClassDataHeader
staticValuesOff	dt_oatdexparse.h	/^	\/*0x1c*\/ UInt  staticValuesOff;    \/* file offset to DexEncodedArray *\/$/;"	m	struct:DexClassDef
status	dt_oatdexparse.h	/^	enum ClassStatus  status;$/;"	m	struct:ClassObject	typeref:enum:ClassObject::ClassStatus
status	dt_oatdexparse.h	/^	unsigned short status; \/\/ State of class during compilation$/;"	m	struct:OatClassHeader
stmt	dt_translate.c	/^static inline void stmt ( HChar cat, MCEnv* mce, IRStmt* st ) { \/\/385$/;"	f	file:
stringDataOff	dt_oatdexparse.h	/^	UInt stringDataOff;$/;"	m	struct:DexStringId
stringIdsOff	dt_oatdexparse.h	/^	\/* 3c *\/UInt  stringIdsOff;$/;"	m	struct:DexHeader
stringIdsSize	dt_oatdexparse.h	/^	\/* 38 *\/UInt  stringIdsSize;$/;"	m	struct:DexHeader
string_ids_	dt_oatplus.h	/^	\/*0x24*\/ struct StringId	*string_ids_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::StringId
subMode	dt_oatdexparse.h	/^		UChar		   subMode;$/;"	m	struct:InterpBreak::__anon17
subdir	Makefile	/^subdir = datatrace$/;"	m
super	dt_oatdexparse.h	/^	struct ClassObject*    super;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::ClassObject
superclassIdx	dt_oatdexparse.h	/^	\/*0x08*\/ UInt  superclassIdx;      \/* index into typeIds for superclass *\/$/;"	m	struct:DexClassDef
suspendCount	dt_oatdexparse.h	/^	int suspendCount;$/;"	m	struct:Thread
syscall_close	dt_syswrap.c	/^void DT_(syscall_close)(ThreadId tid, UWord* args, UInt nArgs, SysRes res) {$/;"	f
syscall_llseek	dt_syswrap.c	/^void DT_(syscall_llseek)(ThreadId tid, UWord* args, UInt nArgs,$/;"	f
syscall_lseek	dt_syswrap.c	/^void DT_(syscall_lseek)(ThreadId tid, UWord* args, UInt nArgs,$/;"	f
syscall_open	dt_syswrap.c	/^void DT_(syscall_open)(ThreadId tid, UWord* args, UInt nArgs, SysRes res) {$/;"	f
syscall_pread	dt_syswrap.c	/^void DT_(syscall_pread)(ThreadId tid, UWord* args, UInt nArgs,$/;"	f
syscall_read	dt_syswrap.c	/^void DT_(syscall_read)(ThreadId tid, UWord* args, UInt nArgs,$/;"	f
syscall_recv	dt_syswrap.c	/^void DT_(syscall_recv)(ThreadId tid, UWord* args, UInt nArgs, SysRes res) {$/;"	f
syscall_recvfrom	dt_syswrap.c	/^void DT_(syscall_recvfrom)(ThreadId tid, UWord* args, UInt nArgs, SysRes res) {$/;"	f
syscall_write	dt_syswrap.c	/^void DT_(syscall_write)(ThreadId tid, UWord* args, UInt nArgs, SysRes res) {$/;"	f
syscallnames	dt_string.h	/^const char* syscallnames[] = {$/;"	v
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
szToITy	dt_translate.c	/^static IRType szToITy ( Int n )$/;"	f	file:
table	dt_oatdexparse.h	/^	} table[1];$/;"	m	struct:DexClassLookup	typeref:struct:DexClassLookup::__anon10
tainted_fds	dt_syswrap.c	/^Bool tainted_fds[TG_N_THREADS][FD_MAX];$/;"	v
target_alias	Makefile	/^target_alias = armv7-unknown-linux$/;"	m
text_avma	dt_taint.h	/^	Addr			text_avma;$/;"	m	struct:FilterList
text_end	dt_taint.h	/^	Addr      text_end;$/;"	m	struct:FilterList
text_size	dt_taint.h	/^	SizeT			text_size;$/;"	m	struct:FilterList
threadId	dt_oatdexparse.h	/^	UInt threadId;$/;"	m	struct:Thread
ti	dt_taint.c	/^UInt  ti[TI_MAX];$/;"	v
tid	dt_oatdexparse.h	/^	ThreadId	tid;				\/* Id of the thread which loaded this file *\/$/;"	m	struct:DexFileInfo
tmpMap	dt_instrument.h	/^	XArray* tmpMap;$/;"	m	struct:_MCEnv
tmpMap	dt_translate.c	/^	XArray* \/* of TempMapEnt *\/ tmpMap;$/;"	m	struct:_MCEnv	file:
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
trace	dt_instrument.h	/^	Bool		trace;$/;"	m	struct:_MCEnv
trace	dt_translate.c	/^	Bool  trace;$/;"	m	struct:_MCEnv	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
triesSize	dt_oatdexparse.h	/^	UShort  triesSize;$/;"	m	struct:DexCode
triesSize	dt_oatdexparse.h	/^	UShort triesSize;$/;"	m	struct:CodeItem
triop	dt_translate.c	299;"	d	file:
tt	dt_stmt2.c	/^UInt tt[TI_MAX];$/;"	v
tv	dt_taint.c	/^ULong tv[TI_MAX];$/;"	v
type	dt_oatdexparse.h	/^	UShort type;              \/* type code (see kDexType* above) *\/$/;"	m	struct:DexMapItem
type	dt_oatdexparse.h	/^	unsigned short type;   \/\/ Type of class$/;"	m	struct:OatClassHeader
typeIdsOff	dt_oatdexparse.h	/^	\/* 44 *\/UInt  typeIdsOff;$/;"	m	struct:DexHeader
typeIdsSize	dt_oatdexparse.h	/^	\/* 40 *\/UInt  typeIdsSize;$/;"	m	struct:DexHeader
typeIdx	dt_oatdexparse.h	/^	UShort typeIdx;				\/\/ index into type_ids section$/;"	m	struct:DexTypeItem
typeIdx	dt_oatdexparse.h	/^	UShort typeIdx;$/;"	m	struct:DexFieldId
type_ids_	dt_oatplus.h	/^	\/*0x28*\/ struct TypeId		*type_ids_;$/;"	m	struct:DexFilePlus	typeref:struct:DexFilePlus::TypeId
u1	dt_oatdexparse.h	/^typedef	UChar			u1;$/;"	t
u2	dt_oatdexparse.h	/^typedef UShort		u2;$/;"	t
u4	dt_oatdexparse.h	/^typedef UInt			u4;$/;"	t
u8	dt_oatdexparse.h	/^typedef ULong			u8;$/;"	t
uleb128_value	dt_oatparse.c	/^UInt uleb128_value(UChar* pStream)$/;"	f
unary32F0x4	dt_translate.c	/^IRAtom* unary32F0x4 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary32Fx2	dt_translate.c	/^IRAtom* unary32Fx2 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary32Fx4	dt_translate.c	/^IRAtom* unary32Fx4 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary32Fx4_w_rm	dt_translate.c	/^IRAtom* unary32Fx4_w_rm ( MCEnv* mce, IRAtom* vRM, IRAtom* vatomX )$/;"	f	file:
unary32Fx8	dt_translate.c	/^IRAtom* unary32Fx8 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary64F0x2	dt_translate.c	/^IRAtom* unary64F0x2 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary64Fx2	dt_translate.c	/^IRAtom* unary64Fx2 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unary64Fx2_w_rm	dt_translate.c	/^IRAtom* unary64Fx2_w_rm ( MCEnv* mce, IRAtom* vRM, IRAtom* vatomX )$/;"	f	file:
unary64Fx4	dt_translate.c	/^IRAtom* unary64Fx4 ( MCEnv* mce, IRAtom* vatomX )$/;"	f	file:
unknown	dt_oatplus.h	/^	\/*0x00*\/ UInt		unknown;$/;"	m	struct:StdString
unop	dt_translate.c	302;"	d	file:
unrecord_block	dt_mem_wrappers.c	/^void unrecord_block ( void* p )$/;"	f	file:
unsignedLeb128Size	dt_dexparse.c	/^INLINE Int unsignedLeb128Size(UInt data)$/;"	f
unused	dt_oatdexparse.h	/^		UChar			 unused;   \/* for future expansion *\/$/;"	m	struct:InterpBreak::__anon17
unused	dt_oatdexparse.h	/^	UShort unused;$/;"	m	struct:DexMapItem
unused	dt_oatdexparse.h	/^	int											unused;        \/\/ Keep struct size constant$/;"	m	struct:InterpSaveState
unused1	dt_oatdexparse.h	/^		UInt		   unused1;$/;"	m	struct:InterpBreak::__anon17
update_SM_counts	dt_taint.c	/^static void update_SM_counts(SecMap* oldSM, SecMap* newSM)$/;"	f	file:
useLLVMworkarounds	dt_instrument.h	/^	Bool		useLLVMworkarounds;$/;"	m	struct:_MCEnv
useLLVMworkarounds	dt_translate.c	/^	Bool useLLVMworkarounds;$/;"	m	struct:_MCEnv	file:
vabits8	dt_taint.h	/^  UChar vabits8[SM_CHUNKS];$/;"	m	struct:__anon26
value	dt_oatdexparse.h	/^	HChar* value;          \/* the latest value *\/$/;"	m	struct:DexStringCache
value	dt_oatdexparse.h	/^	union JValue        value;          \/* initially set from DEX for primitives *\/$/;"	m	struct:StaticField	typeref:union:StaticField::JValue
vanillaNarrowingOpOfShape	dt_translate.c	/^IROp vanillaNarrowingOpOfShape ( IROp qnarrowOp )$/;"	f	file:
vbits8	dt_taint.c	/^	UChar vbits8[BYTES_PER_SEC_VBIT_NODE];$/;"	m	struct:__anon20	file:
vectorNarrowBin64	dt_translate.c	/^IRAtom* vectorNarrowBin64 ( MCEnv* mce, IROp narrow_op,$/;"	f	file:
vectorNarrowBinV128	dt_translate.c	/^IRAtom* vectorNarrowBinV128 ( MCEnv* mce, IROp narrow_op,$/;"	f	file:
vectorNarrowUnV128	dt_translate.c	/^IRAtom* vectorNarrowUnV128 ( MCEnv* mce, IROp narrow_op,$/;"	f	file:
vectorWidenI64	dt_translate.c	/^IRAtom* vectorWidenI64 ( MCEnv* mce, IROp longen_op,$/;"	f	file:
verifyErrorClass	dt_oatdexparse.h	/^	struct ClassObject*    verifyErrorClass;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::ClassObject
verifyUlebs	dt_dexparse.c	/^static Bool verifyUlebs(const UChar* pData, const UChar* pLimit, UInt count) {$/;"	f	file:
version	dt_oatdexparse.h	/^	UChar  version[4];$/;"	m	struct:OatHeader
virtualMethodCount	dt_oatdexparse.h	/^	Int								virtualMethodCount;$/;"	m	struct:ClassObject
virtualMethods	dt_oatdexparse.h	/^	struct DexMethod*         virtualMethods;$/;"	m	struct:DexClassData	typeref:struct:DexClassData::DexMethod
virtualMethods	dt_oatdexparse.h	/^	struct Method*    virtualMethods;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::Method
virtualMethodsSize	dt_oatdexparse.h	/^	UInt virtualMethodsSize;$/;"	m	struct:DexClassDataHeader
visibility	dt_oatdexparse.h	/^	UChar  visibility;$/;"	m	struct:DexAnnotationItem
vmapTableOffset	dt_oatdexparse.h	/^	UInt vmapTableOffset;$/;"	m	struct:OatQuickMethodHeader
vtable	dt_oatdexparse.h	/^	struct Method**		vtable;$/;"	m	struct:ClassObject	typeref:struct:ClassObject::Method
vtableCount	dt_oatdexparse.h	/^	Int								vtableCount;$/;"	m	struct:ClassObject
writeUnsignedLeb128	dt_dexparse.c	/^INLINE UChar* writeUnsignedLeb128(UChar* ptr, UInt data)$/;"	f
write_wrapper	dt_replace_wrapper.c	/^int write_wrapper(int handle, void *buffer, int nbyte)$/;"	f
z	dt_oatdexparse.h	/^		u1    z;$/;"	m	struct:JValue::__anon13
z	dt_oatdexparse.h	/^	u1      z;$/;"	m	union:JValue
zwidenToHostWord	dt_translate.c	/^IRExpr* zwidenToHostWord ( MCEnv* mce, IRAtom* vatom )$/;"	f	file:
