# Makefile.in generated by automake 1.14.1 from Makefile.am.
# none/tests/ppc32/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# This file is used for tool tests, and also in perf/Makefile.am.

# This file should be included (directly or indirectly) by every
# Makefile.am that builds programs.  And also the top-level Makefile.am.

#----------------------------------------------------------------------------
# Global stuff
#----------------------------------------------------------------------------


am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/valgrind
pkgincludedir = $(includedir)/valgrind
pkglibdir = $(libdir)/valgrind
pkglibexecdir = $(libexecdir)/valgrind
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = armv7-unknown-linux-gnu
DIST_COMMON = $(top_srcdir)/Makefile.tool-tests.am \
	$(top_srcdir)/Makefile.all.am $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am $(dist_noinst_SCRIPTS) \
	$(top_srcdir)/depcomp
#am__append_1 = -Wno-cast-align -Wno-self-assign \
#                  -Wno-tautological-compare

#am__append_2 = -Wl,-M,$(top_srcdir)/solaris/vgpreload-solaris.mapfile

# The Android toolchain includes all kinds of stdlib helpers present in
# bionic which is bad because we are not linking with it and the Android
# linker will panic.
am__append_3 = -nostdlib
#am__append_4 = -DVGA_SEC_=1  \
#		-DVGP_SEC_arm_linux=1


# Make sure that all test programs have threaded errno.
#am__append_5 = -D_REENTRANT
#am__append_6 = -Wno-format-extra-args \
#	-Wno-literal-range \
#	-Wno-tautological-constant-out-of-range-compare \
#	-Wno-self-assign -Wno-string-plus-int \
#	-Wno-uninitialized -Wno-unused-value # \
#	clang 3.0.0
#am__append_7 = -Wno-unused-private-field    # drd/tests/tsan_unittest.cpp
check_PROGRAMS = allexec$(EXEEXT) lsw$(EXEEXT) jm-insns$(EXEEXT) \
	round$(EXEEXT) test_isa_2_06_part1$(EXEEXT) \
	test_isa_2_06_part2$(EXEEXT) test_isa_2_06_part3$(EXEEXT) \
	test_dfp1$(EXEEXT) test_dfp2$(EXEEXT) test_dfp3$(EXEEXT) \
	test_dfp4$(EXEEXT) test_dfp5$(EXEEXT) \
	test_isa_2_07_part1$(EXEEXT) test_isa_2_07_part2$(EXEEXT) \
	test_tm$(EXEEXT) test_touch_tm$(EXEEXT) ldst_multiple$(EXEEXT) \
	data-cache-instructions$(EXEEXT) test_fx$(EXEEXT) \
	test_gx$(EXEEXT) testVMX$(EXEEXT) twi$(EXEEXT) tw$(EXEEXT) \
	xlc_dbl_u32$(EXEEXT) power5+_round$(EXEEXT) \
	power6_bcmp$(EXEEXT) bug129390-ppc32$(EXEEXT) \
	bug139050-ppc32$(EXEEXT) ldstrev$(EXEEXT) mftocrf$(EXEEXT) \
	mcrfs$(EXEEXT)
subdir = none/tests/ppc32
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
allexec_SOURCES = allexec.c
allexec_OBJECTS = allexec-allexec.$(OBJEXT)
allexec_LDADD = $(LDADD)
allexec_LINK = $(CCLD) $(allexec_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
bug129390_ppc32_SOURCES = bug129390-ppc32.c
bug129390_ppc32_OBJECTS = bug129390-ppc32.$(OBJEXT)
bug129390_ppc32_LDADD = $(LDADD)
bug139050_ppc32_SOURCES = bug139050-ppc32.c
bug139050_ppc32_OBJECTS = bug139050-ppc32.$(OBJEXT)
bug139050_ppc32_LDADD = $(LDADD)
data_cache_instructions_SOURCES = data-cache-instructions.c
data_cache_instructions_OBJECTS = data-cache-instructions.$(OBJEXT)
data_cache_instructions_LDADD = $(LDADD)
jm_insns_SOURCES = jm-insns.c
jm_insns_OBJECTS = jm_insns-jm-insns.$(OBJEXT)
jm_insns_LDADD = $(LDADD)
jm_insns_LINK = $(CCLD) $(jm_insns_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
ldst_multiple_SOURCES = ldst_multiple.c
ldst_multiple_OBJECTS = ldst_multiple.$(OBJEXT)
ldst_multiple_LDADD = $(LDADD)
ldstrev_SOURCES = ldstrev.c
ldstrev_OBJECTS = ldstrev.$(OBJEXT)
ldstrev_LDADD = $(LDADD)
lsw_SOURCES = lsw.c
lsw_OBJECTS = lsw.$(OBJEXT)
lsw_LDADD = $(LDADD)
mcrfs_SOURCES = mcrfs.c
mcrfs_OBJECTS = mcrfs.$(OBJEXT)
mcrfs_LDADD = $(LDADD)
mftocrf_SOURCES = mftocrf.c
mftocrf_OBJECTS = mftocrf.$(OBJEXT)
mftocrf_LDADD = $(LDADD)
power5__round_SOURCES = power5+_round.c
power5__round_OBJECTS = power5+_round.$(OBJEXT)
power5__round_LDADD = $(LDADD)
power6_bcmp_SOURCES = power6_bcmp.c
power6_bcmp_OBJECTS = power6_bcmp.$(OBJEXT)
power6_bcmp_LDADD = $(LDADD)
round_SOURCES = round.c
round_OBJECTS = round.$(OBJEXT)
round_LDADD = $(LDADD)
testVMX_SOURCES = testVMX.c
testVMX_OBJECTS = testVMX-testVMX.$(OBJEXT)
testVMX_LDADD = $(LDADD)
testVMX_LINK = $(CCLD) $(testVMX_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_dfp1_SOURCES = test_dfp1.c
test_dfp1_OBJECTS = test_dfp1-test_dfp1.$(OBJEXT)
test_dfp1_DEPENDENCIES =
test_dfp1_LINK = $(CCLD) $(test_dfp1_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_dfp2_SOURCES = test_dfp2.c
test_dfp2_OBJECTS = test_dfp2-test_dfp2.$(OBJEXT)
test_dfp2_DEPENDENCIES =
test_dfp2_LINK = $(CCLD) $(test_dfp2_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_dfp3_SOURCES = test_dfp3.c
test_dfp3_OBJECTS = test_dfp3-test_dfp3.$(OBJEXT)
test_dfp3_DEPENDENCIES =
test_dfp3_LINK = $(CCLD) $(test_dfp3_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_dfp4_SOURCES = test_dfp4.c
test_dfp4_OBJECTS = test_dfp4-test_dfp4.$(OBJEXT)
test_dfp4_DEPENDENCIES =
test_dfp4_LINK = $(CCLD) $(test_dfp4_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_dfp5_SOURCES = test_dfp5.c
test_dfp5_OBJECTS = test_dfp5-test_dfp5.$(OBJEXT)
test_dfp5_DEPENDENCIES =
test_dfp5_LINK = $(CCLD) $(test_dfp5_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_fx_SOURCES = test_fx.c
test_fx_OBJECTS = test_fx.$(OBJEXT)
test_fx_LDADD = $(LDADD)
test_gx_SOURCES = test_gx.c
test_gx_OBJECTS = test_gx.$(OBJEXT)
test_gx_LDADD = $(LDADD)
test_isa_2_06_part1_SOURCES = test_isa_2_06_part1.c
test_isa_2_06_part1_OBJECTS =  \
	test_isa_2_06_part1-test_isa_2_06_part1.$(OBJEXT)
test_isa_2_06_part1_LDADD = $(LDADD)
test_isa_2_06_part1_LINK = $(CCLD) $(test_isa_2_06_part1_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
test_isa_2_06_part2_SOURCES = test_isa_2_06_part2.c
test_isa_2_06_part2_OBJECTS =  \
	test_isa_2_06_part2-test_isa_2_06_part2.$(OBJEXT)
test_isa_2_06_part2_LDADD = $(LDADD)
test_isa_2_06_part2_LINK = $(CCLD) $(test_isa_2_06_part2_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
test_isa_2_06_part3_SOURCES = test_isa_2_06_part3.c
test_isa_2_06_part3_OBJECTS =  \
	test_isa_2_06_part3-test_isa_2_06_part3.$(OBJEXT)
test_isa_2_06_part3_DEPENDENCIES =
test_isa_2_06_part3_LINK = $(CCLD) $(test_isa_2_06_part3_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
test_isa_2_07_part1_SOURCES = test_isa_2_07_part1.c
test_isa_2_07_part1_OBJECTS =  \
	test_isa_2_07_part1-test_isa_2_07_part1.$(OBJEXT)
test_isa_2_07_part1_DEPENDENCIES =
test_isa_2_07_part1_LINK = $(CCLD) $(test_isa_2_07_part1_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
test_isa_2_07_part2_SOURCES = test_isa_2_07_part2.c
test_isa_2_07_part2_OBJECTS =  \
	test_isa_2_07_part2-test_isa_2_07_part2.$(OBJEXT)
test_isa_2_07_part2_DEPENDENCIES =
test_isa_2_07_part2_LINK = $(CCLD) $(test_isa_2_07_part2_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
test_tm_SOURCES = test_tm.c
test_tm_OBJECTS = test_tm-test_tm.$(OBJEXT)
test_tm_DEPENDENCIES =
test_tm_LINK = $(CCLD) $(test_tm_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
test_touch_tm_SOURCES = test_touch_tm.c
test_touch_tm_OBJECTS = test_touch_tm-test_touch_tm.$(OBJEXT)
test_touch_tm_DEPENDENCIES =
test_touch_tm_LINK = $(CCLD) $(test_touch_tm_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
tw_SOURCES = tw.c
tw_OBJECTS = tw.$(OBJEXT)
tw_LDADD = $(LDADD)
twi_SOURCES = twi.c
twi_OBJECTS = twi.$(OBJEXT)
twi_LDADD = $(LDADD)
xlc_dbl_u32_SOURCES = xlc_dbl_u32.c
xlc_dbl_u32_OBJECTS = xlc_dbl_u32.$(OBJEXT)
xlc_dbl_u32_LDADD = $(LDADD)
SCRIPTS = $(dist_noinst_SCRIPTS)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = allexec.c bug129390-ppc32.c bug139050-ppc32.c \
	data-cache-instructions.c jm-insns.c ldst_multiple.c ldstrev.c \
	lsw.c mcrfs.c mftocrf.c power5+_round.c power6_bcmp.c round.c \
	testVMX.c test_dfp1.c test_dfp2.c test_dfp3.c test_dfp4.c \
	test_dfp5.c test_fx.c test_gx.c test_isa_2_06_part1.c \
	test_isa_2_06_part2.c test_isa_2_06_part3.c \
	test_isa_2_07_part1.c test_isa_2_07_part2.c test_tm.c \
	test_touch_tm.c tw.c twi.c xlc_dbl_u32.c
DIST_SOURCES = allexec.c bug129390-ppc32.c bug139050-ppc32.c \
	data-cache-instructions.c jm-insns.c ldst_multiple.c ldstrev.c \
	lsw.c mcrfs.c mftocrf.c power5+_round.c power6_bcmp.c round.c \
	testVMX.c test_dfp1.c test_dfp2.c test_dfp3.c test_dfp4.c \
	test_dfp5.c test_fx.c test_gx.c test_isa_2_06_part1.c \
	test_isa_2_06_part2.c test_isa_2_06_part3.c \
	test_isa_2_07_part1.c test_isa_2_07_part2.c test_tm.c \
	test_touch_tm.c tw.c twi.c xlc_dbl_u32.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing aclocal-1.14
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar
AUTOCONF = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing autoconf
AUTOHEADER = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing autoheader
AUTOMAKE = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing automake-1.14
AWK = gawk
BOOST_CFLAGS = 
BOOST_LIBS = 
CC = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
CCAS = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm
CCDEPMODE = depmode=gcc3
CFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm
CFLAGS_MPI = -g -O -fno-omit-frame-pointer -Wall -fpic
CPP = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc -E
CPPFLAGS = --sysroot=/home/jeremy/tools/android-ndk-r10e/platforms/android-19/arch-arm -DANDROID_HARDWARE_NEXUS_5
CXX = /home/jeremy/tools/android-ndk-r10e/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEFAULT_SUPP = exp-sgcheck.supp xfree-3.supp xfree-4.supp bionic.supp 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DIFF = diff -u
DIS_PATH = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FLAG_FNO_IPA_ICF = 
FLAG_FNO_STACK_PROTECTOR = -fno-stack-protector
FLAG_FSANITIZE = 
FLAG_M32 = 
FLAG_M64 = 
FLAG_MIPS32 = 
FLAG_MIPS64 = 
FLAG_MLONG_DOUBLE_128 = -mlong-double-128
FLAG_MMMX = 
FLAG_MSSE = 
FLAG_NO_BUILD_ID = 
FLAG_OCTEON = 
FLAG_OCTEON2 = 
FLAG_T_TEXT = -Ttext-segment
FLAG_UNLIMITED_INLINE_UNIT_GROWTH = --param inline-unit-growth=900
FLAG_W_CAST_ALIGN = 
FLAG_W_CAST_QUAL = -Wcast-qual
FLAG_W_EMPTY_BODY = -Wempty-body
FLAG_W_EXTRA = -Wextra
FLAG_W_FORMAT = -Wformat
FLAG_W_FORMAT_SECURITY = -Wformat-security
FLAG_W_FORMAT_SIGNEDNESS = 
FLAG_W_IGNORED_QUALIFIERS = -Wignored-qualifiers
FLAG_W_MISSING_PARAMETER_TYPE = -Wmissing-parameter-type
FLAG_W_NO_INFINITE_RECURSION = 
FLAG_W_NO_MEMSET_TRANSPOSED_ARGS = 
FLAG_W_NO_MISMATCHED_NEW_DELETE = 
FLAG_W_NO_NONNULL = -Wno-nonnull
FLAG_W_NO_OVERFLOW = -Wno-overflow
FLAG_W_NO_POINTER_SIGN = -Wno-pointer-sign
FLAG_W_NO_STATIC_LOCAL_IN_INLINE = 
FLAG_W_NO_UNINITIALIZED = -Wno-uninitialized
FLAG_W_NO_UNUSED_FUNCTION = -Wno-unused-function
FLAG_W_OLD_STYLE_DECLARATION = -Wold-style-declaration
FLAG_W_WRITE_STRINGS = -Wwrite-strings
GDB = /usr/bin/gdb
GLIBC_VERSION = bionic
GREP = /bin/grep
HWCAP_HAS_ALTIVEC = 
HWCAP_HAS_DFP = 
HWCAP_HAS_HTM = 
HWCAP_HAS_ISA_2_05 = 
HWCAP_HAS_ISA_2_06 = 
HWCAP_HAS_ISA_2_07 = 
HWCAP_HAS_VSX = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LDFLAGS_MPI = -fpic -shared
LIBOBJS =  ${LIBOBJDIR}memcmp$U.o
LIBS = 
LIB_UBSAN = 
LN_S = ln -s
LTLIBOBJS =  ${LIBOBJDIR}memcmp$U.lo
MAINT = #
MAKEINFO = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/missing makeinfo
MKDIR_P = /bin/mkdir -p
MPI_CC = /usr/bin/mpicc
OBJEXT = o
PACKAGE = valgrind
PACKAGE_BUGREPORT = valgrind-users@lists.sourceforge.net
PACKAGE_NAME = Valgrind
PACKAGE_STRING = Valgrind 3.11.0
PACKAGE_TARNAME = valgrind
PACKAGE_URL = 
PACKAGE_VERSION = 3.11.0
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PREFERRED_STACK_BOUNDARY_2 = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VALT_LOAD_ADDRESS_PRI = 0x38000000
VALT_LOAD_ADDRESS_SEC = 0xUNSET
VERSION = 3.11.0
VGCONF_ARCH_PRI = arm
VGCONF_ARCH_SEC = 
VGCONF_OS = linux
VGCONF_PLATFORM_PRI_CAPS = ARM_LINUX
VGCONF_PLATFORM_SEC_CAPS = 
VGCONF_PLATVARIANT = android
VG_TMPDIR = /sdcard 
abs_builddir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/none/tests/ppc32
abs_srcdir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/none/tests/ppc32
abs_top_builddir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind
abs_top_srcdir = /home/jeremy/Data/AndroidSource/Android-M/external/valgrind
ac_ct_CC = 
ac_ct_CXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = armv7-unknown-linux-gnu
host_alias = armv7-unknown-linux
host_cpu = armv7
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/jeremy/Data/AndroidSource/Android-M/external/valgrind/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /data/local/tmp/Inst
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = armv7-unknown-linux
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
inplacedir = $(top_builddir)/.in_place

#----------------------------------------------------------------------------
# Flags
#----------------------------------------------------------------------------

# Baseline flags for all compilations.  Aim here is to maximise
# performance and get whatever useful warnings we can out of gcc.
# -fno-builtin is important for defeating LLVM's idiom recognition
# that somehow causes VG_(memset) to get into infinite recursion.
AM_CFLAGS_BASE = -O2 -g -std=gnu99 -Wall -Wmissing-prototypes -Wshadow \
	-Wpointer-arith -Wstrict-prototypes -Wmissing-declarations \
	 -Wcast-qual -Wwrite-strings \
	-Wempty-body -Wformat  \
	-Wformat-security -Wignored-qualifiers \
	-Wmissing-parameter-type -Wold-style-declaration \
	-fno-stack-protector  \
	-fno-strict-aliasing -fno-builtin $(am__append_1)
AM_CFLAGS_PSO_BASE = -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
		     -fpic -fno-builtin 


# These flags are used for building the preload shared objects (PSOs).
# The aim is to give reasonable performance but also to have good
# stack traces, since users often see stack traces extending 
# into (and through) the preloads.  Also, we must use any
# -mpreferred-stack-boundary flag to build the preload shared
# objects, since that risks misaligning the client's stack and
# results in segfaults like (eg) #324050.
#AM_CFLAGS_PSO_BASE = -dynamic \
#		     -O -g -fno-omit-frame-pointer -fno-strict-aliasing \
#		     -fpic -fPIC -fno-builtin 


# Flags for specific targets.
#
# Nb: the AM_CPPFLAGS_* values are suitable for building tools and auxprogs.
# For building the core, coregrind/Makefile.am files add some extra things.
AM_CPPFLAGS_ARM_LINUX = \
	-I$(top_srcdir) \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/VEX/pub \
	-I$(top_builddir)/VEX/pub \
	-DVGA_arm=1 \
	-DVGO_linux=1 \
	-DVGP_arm_linux=1 \
	-DVGPV_arm_linux_android=1

#AM_CPPFLAGS_ = \
#	-I$(top_srcdir) \
#	-I$(top_srcdir)/include \
#	-I$(top_srcdir)/VEX/pub \
#	-I$(top_builddir)/VEX/pub \
#	-DVGA_=1 \
#	-DVGO_linux=1 \
#	-DVGP__linux=1 \
#	-DVGPV__linux_android=1

AM_FLAG_M3264_X86_LINUX = 
AM_CFLAGS_X86_LINUX =   \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_LINUX =  -g
AM_FLAG_M3264_AMD64_LINUX = 
AM_CFLAGS_AMD64_LINUX =  \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_LINUX =  -g
AM_FLAG_M3264_PPC32_LINUX = 
AM_CFLAGS_PPC32_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC32_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC32_LINUX =  -g
AM_FLAG_M3264_PPC64BE_LINUX = 
AM_CFLAGS_PPC64BE_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC64BE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64BE_LINUX =  -g
AM_FLAG_M3264_PPC64LE_LINUX = 
AM_CFLAGS_PPC64LE_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_PPC64LE_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_PPC64LE_LINUX =  -g
AM_FLAG_M3264_ARM_LINUX = 
AM_CFLAGS_ARM_LINUX =  \
			 	$(AM_CFLAGS_BASE) -marm -mcpu=cortex-a8

AM_CFLAGS_PSO_ARM_LINUX =  $(AM_CFLAGS_BASE) \
				-marm -mcpu=cortex-a8 $(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_ARM_LINUX =  \
				-marm -mcpu=cortex-a8 -g

AM_FLAG_M3264_ARM64_LINUX = 
AM_CFLAGS_ARM64_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_ARM64_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_ARM64_LINUX =  -g
AM_FLAG_M3264_X86_DARWIN = -arch i386
AM_CFLAGS_X86_DARWIN = $(WERROR) -arch i386 $(AM_CFLAGS_BASE) \
				-mmacosx-version-min=10.5 \
				-fno-stack-protector -fno-pic -fno-PIC

AM_CFLAGS_PSO_X86_DARWIN = $(AM_CFLAGS_X86_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_DARWIN = -arch i386 -g
AM_FLAG_M3264_AMD64_DARWIN = -arch x86_64
AM_CFLAGS_AMD64_DARWIN = $(WERROR) -arch x86_64 $(AM_CFLAGS_BASE) \
			    -mmacosx-version-min=10.5 -fno-stack-protector

AM_CFLAGS_PSO_AMD64_DARWIN = $(AM_CFLAGS_AMD64_DARWIN) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_DARWIN = -arch x86_64 -g
AM_FLAG_M3264_S390X_LINUX = 
AM_CFLAGS_S390X_LINUX =  $(AM_CFLAGS_BASE) -fomit-frame-pointer
AM_CFLAGS_PSO_S390X_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_S390X_LINUX =  -g -mzarch -march=z900
AM_FLAG_M3264_MIPS32_LINUX = 
AM_CFLAGS_MIPS32_LINUX =  $(AM_CFLAGS_BASE) 
AM_CFLAGS_PSO_MIPS32_LINUX =  $(AM_CFLAGS_BASE)  \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS32_LINUX =  -g 
AM_FLAG_M3264_MIPS64_LINUX = 
AM_CFLAGS_MIPS64_LINUX =  $(AM_CFLAGS_BASE) 
AM_CFLAGS_PSO_MIPS64_LINUX =  $(AM_CFLAGS_BASE)  \
				$(AM_CFLAGS_PSO_BASE)

AM_CCASFLAGS_MIPS64_LINUX =  -g 
AM_CFLAGS_TILEGX_LINUX =  $(AM_CFLAGS_BASE)
AM_CFLAGS_PSO_TILEGX_LINUX =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_FLAG_M3264_X86_SOLARIS = 
AM_CFLAGS_X86_SOLARIS =   \
			 	$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_X86_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_X86_SOLARIS =  -g -D_ASM
AM_FLAG_M3264_AMD64_SOLARIS = 
AM_CFLAGS_AMD64_SOLARIS =  \
				$(AM_CFLAGS_BASE) -fomit-frame-pointer

AM_CFLAGS_PSO_AMD64_SOLARIS =  $(AM_CFLAGS_BASE) $(AM_CFLAGS_PSO_BASE)
AM_CCASFLAGS_AMD64_SOLARIS =  -g -D_ASM

# Flags for the primary target.  These must be used to build the
# regtests and performance tests.  In fact, these must be used to
# build anything which is built only once on a dual-arch build.
#
AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_ARM_LINUX)
AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_ARM_LINUX)
AM_CFLAGS_PRI = $(AM_CFLAGS_ARM_LINUX)
AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_ARM_LINUX)
AM_FLAG_M3264_SEC = 
#AM_FLAG_M3264_SEC = $(AM_FLAG_M3264_)

# Baseline link flags for making vgpreload shared objects.
#
PRELOAD_LDFLAGS_COMMON_LINUX = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_3)
PRELOAD_LDFLAGS_COMMON_DARWIN = -dynamic -dynamiclib -all_load
PRELOAD_LDFLAGS_COMMON_SOLARIS = -nodefaultlibs -shared \
	-Wl,-z,interpose,-z,initfirst $(am__append_2)
PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC64BE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_PPC64LE_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_ARM_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_ARM64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_X86_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch i386
PRELOAD_LDFLAGS_AMD64_DARWIN = $(PRELOAD_LDFLAGS_COMMON_DARWIN) -arch x86_64
PRELOAD_LDFLAGS_S390X_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_MIPS32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_MIPS64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_TILEGX_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) 
PRELOAD_LDFLAGS_X86_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) 
PRELOAD_LDFLAGS_AMD64_SOLARIS = $(PRELOAD_LDFLAGS_COMMON_SOLARIS) 
AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/include \
	-I$(top_srcdir)/coregrind -I$(top_builddir)/include \
	-I$(top_srcdir)/VEX/pub -I$(top_builddir)/VEX/pub \
	-DVGA_arm=1 -DVGO_linux=1 \
	-DVGP_arm_linux=1 \
	-DVGPV_arm_linux_android=1 \
	$(am__append_4)

# Nb: Tools need to augment these flags with an arch-selection option, such
# as $(AM_FLAG_M3264_PRI).
AM_CFLAGS = -Winline -Wall -Wshadow -Wno-long-long -g \
	-fno-stack-protector $(am__append_5) $(am__append_6) \
	 $(am__empty)
AM_CXXFLAGS = -Winline -Wall -Wshadow -Wno-long-long -g \
	-fno-stack-protector $(am__append_7) 
# Include AM_CPPFLAGS in AM_CCASFLAGS to allow for older versions of
# automake;  see comments in Makefile.all.am for more detail.
AM_CCASFLAGS = $(AM_CPPFLAGS) 
#noinst_DSYMS = $(check_PROGRAMS)
dist_noinst_SCRIPTS = filter_stderr
EXTRA_DIST = \
	bug129390-ppc32.stdout.exp bug129390-ppc32.stderr.exp \
	bug129390-ppc32.vgtest \
	bug139050-ppc32.stdout.exp bug139050-ppc32.stderr.exp \
	bug139050-ppc32.vgtest \
	ldstrev.stderr.exp ldstrev.stdout.exp ldstrev.vgtest \
	jm-int.stderr.exp jm-int.stdout.exp jm-int.vgtest \
	jm-fp.stderr.exp jm-fp.stdout.exp jm-fp.vgtest jm-fp.stdout.exp-BE2 \
	jm-vmx.stderr.exp jm-vmx.stdout.exp jm-vmx.stdout.exp_Minus_nan \
	jm-vmx.vgtest \
	jm-misc.stderr.exp jm-misc.stdout.exp jm-misc.vgtest \
	lsw.stderr.exp lsw.stdout.exp lsw.vgtest \
	mftocrf.stderr.exp mftocrf.stdout.exp mftocrf.vgtest \
	mcrfs.stderr.exp mcrfs.stdout.exp mcrfs.vgtest \
	round.stderr.exp round.stdout.exp round.vgtest \
	test_fx.stderr.exp test_fx.stdout.exp test_fx.stdout.exp_Minus_nan \
	test_fx.vgtest \
	test_gx.stderr.exp test_gx.stdout.exp test_gx.stdout.exp_Minus_nan \
	test_gx.vgtest \
	testVMX.stderr.exp  testVMX.stdout.exp  testVMX.vgtest \
	twi.stderr.exp twi.stdout.exp twi.vgtest \
	tw.stderr.exp tw.stdout.exp tw.vgtest \
	xlc_dbl_u32.stderr.exp xlc_dbl_u32.stdout.exp xlc_dbl_u32.vgtest \
	opcodes.h \
	power5+_round.stderr.exp power5+_round.stdout.exp power5+_round.vgtest \
	power6_bcmp.stderr.exp power6_bcmp.stdout.exp power6_bcmp.vgtest \
	test_isa_2_06_part1.stderr.exp  test_isa_2_06_part1.stdout.exp  test_isa_2_06_part1.vgtest \
	test_isa_2_06_part2.stderr.exp  test_isa_2_06_part2.stdout.exp  test_isa_2_06_part2.vgtest \
	test_isa_2_06_part3.stderr.exp  test_isa_2_06_part3.stdout.exp  test_isa_2_06_part3.vgtest \
	test_dfp1.stderr.exp test_dfp1.stdout.exp test_dfp1.vgtest \
	test_dfp2.stderr.exp test_dfp2.stdout.exp test_dfp2.vgtest \
	test_dfp2.stdout.exp_Without_dcffix \
	test_dfp3.stderr.exp test_dfp3.stdout.exp test_dfp3.vgtest \
	test_dfp4.stderr.exp test_dfp4.stdout.exp test_dfp4.vgtest \
	test_dfp5.stderr.exp test_dfp5.stdout.exp test_dfp5.vgtest \
	jm_vec_isa_2_07.stderr.exp jm_vec_isa_2_07.stdout.exp jm_vec_isa_2_07.vgtest \
	jm_fp_isa_2_07.stderr.exp jm_fp_isa_2_07.stdout.exp jm_fp_isa_2_07.vgtest \
	jm_int_isa_2_07.stderr.exp jm_int_isa_2_07.vgtest \
	jm_int_isa_2_07.stdout.exp \
	test_isa_2_07_part2.stderr.exp test_isa_2_07_part2.stdout.exp test_isa_2_07_part2.vgtest \
	test_tm.stderr.exp test_tm.stdout.exp test_tm.vgtest \
	test_touch_tm.stderr.exp test_touch_tm.stdout.exp test_touch_tm.vgtest \
	ldst_multiple.stderr.exp ldst_multiple.stdout.exp ldst_multiple.vgtest \
	data-cache-instructions.stderr.exp data-cache-instructions.stdout.exp data-cache-instructions.vgtest

allexec_CFLAGS = $(AM_CFLAGS) -Wno-nonnull
BUILD_FLAG_ALTIVEC = 
#BUILD_FLAG_ALTIVEC = -maltivec
BUILD_FLAG_ABI_ALTIVEC = 
#BUILD_FLAG_ABI_ALTIVEC = -mabi=altivec
ALTIVEC_FLAG = 
#ALTIVEC_FLAG = -DHAS_ALTIVEC
BUILD_FLAG_VSX = 
#BUILD_FLAG_VSX = -mvsx
VSX_FLAG = 
#VSX_FLAG = -DHAS_VSX
BUILD_FLAGS_DFP = 
#BUILD_FLAGS_DFP = -mhard-dfp -mcpu=power6
DFP_FLAG = 
#DFP_FLAG = -DHAS_DFP
BUILD_FLAGS_ISA_2_07 = 
#BUILD_FLAGS_ISA_2_07 = -mcpu=power8
ISA_2_07_FLAG = 
#ISA_2_07_FLAG = -DHAS_ISA_2_07
#HTM_FLAG = -mhtm -DSUPPORTS_HTM
jm_insns_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames \
			 $(ALTIVEC_FLAG) $(BUILD_FLAG_ALTIVEC)

testVMX_CFLAGS = $(AM_CFLAGS) -O -g -Wall -DALTIVEC \
			-DGCC_COMPILER   $(BUILD_FLAG_ALTIVEC) \
			$(BUILD_FLAG_ABI_ALTIVEC)

test_isa_2_06_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
			 $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)

test_isa_2_06_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
			 $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)

test_isa_2_06_part3_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(VSX_FLAG) \
			 $(ALTIVEC_FLAG) $(BUILD_FLAG_VSX)

test_dfp1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(DFP_FLAG) \
			 $(BUILD_FLAGS_DFP)

test_dfp2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(DFP_FLAG) \
			 $(BUILD_FLAGS_DFP)

test_dfp3_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(DFP_FLAG) \
			 $(BUILD_FLAGS_DFP)

test_dfp4_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(DFP_FLAG) \
			 $(BUILD_FLAGS_DFP)

test_dfp5_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(DFP_FLAG) \
			 $(BUILD_FLAGS_DFP)

test_isa_2_07_part1_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(ISA_2_07_FLAG) \
			 $(BUILD_FLAGS_ISA_2_07)

test_isa_2_07_part2_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(ISA_2_07_FLAG) \
			 $(BUILD_FLAGS_ISA_2_07)

test_tm_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(HTM_FLAG) $(ISA_2_07_FLAG) \
			 $(BUILD_FLAGS_ISA_2_07)

test_touch_tm_CFLAGS = $(AM_CFLAGS) -Winline -Wall -O -g -mregnames $(HTM_FLAG) $(ISA_2_07_FLAG) \
			 $(BUILD_FLAGS_ISA_2_07)

test_isa_2_06_part3_LDADD = -lm
test_dfp1_LDADD = -lm
test_dfp2_LDADD = -lm
test_dfp3_LDADD = -lm
test_dfp4_LDADD = -lm
test_dfp5_LDADD = -lm
test_isa_2_07_part1_LDADD = -lm
test_isa_2_07_part2_LDADD = -lm
test_tm_LDADD = -lm
test_touch_tm_LDADD = -lm
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign none/tests/ppc32/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign none/tests/ppc32/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Makefile.tool-tests.am $(top_srcdir)/Makefile.all.am:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

allexec$(EXEEXT): $(allexec_OBJECTS) $(allexec_DEPENDENCIES) $(EXTRA_allexec_DEPENDENCIES) 
	@rm -f allexec$(EXEEXT)
	$(AM_V_CCLD)$(allexec_LINK) $(allexec_OBJECTS) $(allexec_LDADD) $(LIBS)

bug129390-ppc32$(EXEEXT): $(bug129390_ppc32_OBJECTS) $(bug129390_ppc32_DEPENDENCIES) $(EXTRA_bug129390_ppc32_DEPENDENCIES) 
	@rm -f bug129390-ppc32$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(bug129390_ppc32_OBJECTS) $(bug129390_ppc32_LDADD) $(LIBS)

bug139050-ppc32$(EXEEXT): $(bug139050_ppc32_OBJECTS) $(bug139050_ppc32_DEPENDENCIES) $(EXTRA_bug139050_ppc32_DEPENDENCIES) 
	@rm -f bug139050-ppc32$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(bug139050_ppc32_OBJECTS) $(bug139050_ppc32_LDADD) $(LIBS)

data-cache-instructions$(EXEEXT): $(data_cache_instructions_OBJECTS) $(data_cache_instructions_DEPENDENCIES) $(EXTRA_data_cache_instructions_DEPENDENCIES) 
	@rm -f data-cache-instructions$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(data_cache_instructions_OBJECTS) $(data_cache_instructions_LDADD) $(LIBS)

jm-insns$(EXEEXT): $(jm_insns_OBJECTS) $(jm_insns_DEPENDENCIES) $(EXTRA_jm_insns_DEPENDENCIES) 
	@rm -f jm-insns$(EXEEXT)
	$(AM_V_CCLD)$(jm_insns_LINK) $(jm_insns_OBJECTS) $(jm_insns_LDADD) $(LIBS)

ldst_multiple$(EXEEXT): $(ldst_multiple_OBJECTS) $(ldst_multiple_DEPENDENCIES) $(EXTRA_ldst_multiple_DEPENDENCIES) 
	@rm -f ldst_multiple$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ldst_multiple_OBJECTS) $(ldst_multiple_LDADD) $(LIBS)

ldstrev$(EXEEXT): $(ldstrev_OBJECTS) $(ldstrev_DEPENDENCIES) $(EXTRA_ldstrev_DEPENDENCIES) 
	@rm -f ldstrev$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ldstrev_OBJECTS) $(ldstrev_LDADD) $(LIBS)

lsw$(EXEEXT): $(lsw_OBJECTS) $(lsw_DEPENDENCIES) $(EXTRA_lsw_DEPENDENCIES) 
	@rm -f lsw$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(lsw_OBJECTS) $(lsw_LDADD) $(LIBS)

mcrfs$(EXEEXT): $(mcrfs_OBJECTS) $(mcrfs_DEPENDENCIES) $(EXTRA_mcrfs_DEPENDENCIES) 
	@rm -f mcrfs$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mcrfs_OBJECTS) $(mcrfs_LDADD) $(LIBS)

mftocrf$(EXEEXT): $(mftocrf_OBJECTS) $(mftocrf_DEPENDENCIES) $(EXTRA_mftocrf_DEPENDENCIES) 
	@rm -f mftocrf$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mftocrf_OBJECTS) $(mftocrf_LDADD) $(LIBS)

power5+_round$(EXEEXT): $(power5__round_OBJECTS) $(power5__round_DEPENDENCIES) $(EXTRA_power5__round_DEPENDENCIES) 
	@rm -f power5+_round$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(power5__round_OBJECTS) $(power5__round_LDADD) $(LIBS)

power6_bcmp$(EXEEXT): $(power6_bcmp_OBJECTS) $(power6_bcmp_DEPENDENCIES) $(EXTRA_power6_bcmp_DEPENDENCIES) 
	@rm -f power6_bcmp$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(power6_bcmp_OBJECTS) $(power6_bcmp_LDADD) $(LIBS)

round$(EXEEXT): $(round_OBJECTS) $(round_DEPENDENCIES) $(EXTRA_round_DEPENDENCIES) 
	@rm -f round$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(round_OBJECTS) $(round_LDADD) $(LIBS)

testVMX$(EXEEXT): $(testVMX_OBJECTS) $(testVMX_DEPENDENCIES) $(EXTRA_testVMX_DEPENDENCIES) 
	@rm -f testVMX$(EXEEXT)
	$(AM_V_CCLD)$(testVMX_LINK) $(testVMX_OBJECTS) $(testVMX_LDADD) $(LIBS)

test_dfp1$(EXEEXT): $(test_dfp1_OBJECTS) $(test_dfp1_DEPENDENCIES) $(EXTRA_test_dfp1_DEPENDENCIES) 
	@rm -f test_dfp1$(EXEEXT)
	$(AM_V_CCLD)$(test_dfp1_LINK) $(test_dfp1_OBJECTS) $(test_dfp1_LDADD) $(LIBS)

test_dfp2$(EXEEXT): $(test_dfp2_OBJECTS) $(test_dfp2_DEPENDENCIES) $(EXTRA_test_dfp2_DEPENDENCIES) 
	@rm -f test_dfp2$(EXEEXT)
	$(AM_V_CCLD)$(test_dfp2_LINK) $(test_dfp2_OBJECTS) $(test_dfp2_LDADD) $(LIBS)

test_dfp3$(EXEEXT): $(test_dfp3_OBJECTS) $(test_dfp3_DEPENDENCIES) $(EXTRA_test_dfp3_DEPENDENCIES) 
	@rm -f test_dfp3$(EXEEXT)
	$(AM_V_CCLD)$(test_dfp3_LINK) $(test_dfp3_OBJECTS) $(test_dfp3_LDADD) $(LIBS)

test_dfp4$(EXEEXT): $(test_dfp4_OBJECTS) $(test_dfp4_DEPENDENCIES) $(EXTRA_test_dfp4_DEPENDENCIES) 
	@rm -f test_dfp4$(EXEEXT)
	$(AM_V_CCLD)$(test_dfp4_LINK) $(test_dfp4_OBJECTS) $(test_dfp4_LDADD) $(LIBS)

test_dfp5$(EXEEXT): $(test_dfp5_OBJECTS) $(test_dfp5_DEPENDENCIES) $(EXTRA_test_dfp5_DEPENDENCIES) 
	@rm -f test_dfp5$(EXEEXT)
	$(AM_V_CCLD)$(test_dfp5_LINK) $(test_dfp5_OBJECTS) $(test_dfp5_LDADD) $(LIBS)

test_fx$(EXEEXT): $(test_fx_OBJECTS) $(test_fx_DEPENDENCIES) $(EXTRA_test_fx_DEPENDENCIES) 
	@rm -f test_fx$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_fx_OBJECTS) $(test_fx_LDADD) $(LIBS)

test_gx$(EXEEXT): $(test_gx_OBJECTS) $(test_gx_DEPENDENCIES) $(EXTRA_test_gx_DEPENDENCIES) 
	@rm -f test_gx$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_gx_OBJECTS) $(test_gx_LDADD) $(LIBS)

test_isa_2_06_part1$(EXEEXT): $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_DEPENDENCIES) $(EXTRA_test_isa_2_06_part1_DEPENDENCIES) 
	@rm -f test_isa_2_06_part1$(EXEEXT)
	$(AM_V_CCLD)$(test_isa_2_06_part1_LINK) $(test_isa_2_06_part1_OBJECTS) $(test_isa_2_06_part1_LDADD) $(LIBS)

test_isa_2_06_part2$(EXEEXT): $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_DEPENDENCIES) $(EXTRA_test_isa_2_06_part2_DEPENDENCIES) 
	@rm -f test_isa_2_06_part2$(EXEEXT)
	$(AM_V_CCLD)$(test_isa_2_06_part2_LINK) $(test_isa_2_06_part2_OBJECTS) $(test_isa_2_06_part2_LDADD) $(LIBS)

test_isa_2_06_part3$(EXEEXT): $(test_isa_2_06_part3_OBJECTS) $(test_isa_2_06_part3_DEPENDENCIES) $(EXTRA_test_isa_2_06_part3_DEPENDENCIES) 
	@rm -f test_isa_2_06_part3$(EXEEXT)
	$(AM_V_CCLD)$(test_isa_2_06_part3_LINK) $(test_isa_2_06_part3_OBJECTS) $(test_isa_2_06_part3_LDADD) $(LIBS)

test_isa_2_07_part1$(EXEEXT): $(test_isa_2_07_part1_OBJECTS) $(test_isa_2_07_part1_DEPENDENCIES) $(EXTRA_test_isa_2_07_part1_DEPENDENCIES) 
	@rm -f test_isa_2_07_part1$(EXEEXT)
	$(AM_V_CCLD)$(test_isa_2_07_part1_LINK) $(test_isa_2_07_part1_OBJECTS) $(test_isa_2_07_part1_LDADD) $(LIBS)

test_isa_2_07_part2$(EXEEXT): $(test_isa_2_07_part2_OBJECTS) $(test_isa_2_07_part2_DEPENDENCIES) $(EXTRA_test_isa_2_07_part2_DEPENDENCIES) 
	@rm -f test_isa_2_07_part2$(EXEEXT)
	$(AM_V_CCLD)$(test_isa_2_07_part2_LINK) $(test_isa_2_07_part2_OBJECTS) $(test_isa_2_07_part2_LDADD) $(LIBS)

test_tm$(EXEEXT): $(test_tm_OBJECTS) $(test_tm_DEPENDENCIES) $(EXTRA_test_tm_DEPENDENCIES) 
	@rm -f test_tm$(EXEEXT)
	$(AM_V_CCLD)$(test_tm_LINK) $(test_tm_OBJECTS) $(test_tm_LDADD) $(LIBS)

test_touch_tm$(EXEEXT): $(test_touch_tm_OBJECTS) $(test_touch_tm_DEPENDENCIES) $(EXTRA_test_touch_tm_DEPENDENCIES) 
	@rm -f test_touch_tm$(EXEEXT)
	$(AM_V_CCLD)$(test_touch_tm_LINK) $(test_touch_tm_OBJECTS) $(test_touch_tm_LDADD) $(LIBS)

tw$(EXEEXT): $(tw_OBJECTS) $(tw_DEPENDENCIES) $(EXTRA_tw_DEPENDENCIES) 
	@rm -f tw$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(tw_OBJECTS) $(tw_LDADD) $(LIBS)

twi$(EXEEXT): $(twi_OBJECTS) $(twi_DEPENDENCIES) $(EXTRA_twi_DEPENDENCIES) 
	@rm -f twi$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(twi_OBJECTS) $(twi_LDADD) $(LIBS)

xlc_dbl_u32$(EXEEXT): $(xlc_dbl_u32_OBJECTS) $(xlc_dbl_u32_DEPENDENCIES) $(EXTRA_xlc_dbl_u32_DEPENDENCIES) 
	@rm -f xlc_dbl_u32$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(xlc_dbl_u32_OBJECTS) $(xlc_dbl_u32_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/allexec-allexec.Po
include ./$(DEPDIR)/bug129390-ppc32.Po
include ./$(DEPDIR)/bug139050-ppc32.Po
include ./$(DEPDIR)/data-cache-instructions.Po
include ./$(DEPDIR)/jm_insns-jm-insns.Po
include ./$(DEPDIR)/ldst_multiple.Po
include ./$(DEPDIR)/ldstrev.Po
include ./$(DEPDIR)/lsw.Po
include ./$(DEPDIR)/mcrfs.Po
include ./$(DEPDIR)/mftocrf.Po
include ./$(DEPDIR)/power5+_round.Po
include ./$(DEPDIR)/power6_bcmp.Po
include ./$(DEPDIR)/round.Po
include ./$(DEPDIR)/testVMX-testVMX.Po
include ./$(DEPDIR)/test_dfp1-test_dfp1.Po
include ./$(DEPDIR)/test_dfp2-test_dfp2.Po
include ./$(DEPDIR)/test_dfp3-test_dfp3.Po
include ./$(DEPDIR)/test_dfp4-test_dfp4.Po
include ./$(DEPDIR)/test_dfp5-test_dfp5.Po
include ./$(DEPDIR)/test_fx.Po
include ./$(DEPDIR)/test_gx.Po
include ./$(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Po
include ./$(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
include ./$(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Po
include ./$(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Po
include ./$(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Po
include ./$(DEPDIR)/test_tm-test_tm.Po
include ./$(DEPDIR)/test_touch_tm-test_touch_tm.Po
include ./$(DEPDIR)/tw.Po
include ./$(DEPDIR)/twi.Po
include ./$(DEPDIR)/xlc_dbl_u32.Po

.c.o:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

allexec-allexec.o: allexec.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allexec_CFLAGS) $(CFLAGS) -MT allexec-allexec.o -MD -MP -MF $(DEPDIR)/allexec-allexec.Tpo -c -o allexec-allexec.o `test -f 'allexec.c' || echo '$(srcdir)/'`allexec.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/allexec-allexec.Tpo $(DEPDIR)/allexec-allexec.Po
#	$(AM_V_CC)source='allexec.c' object='allexec-allexec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allexec_CFLAGS) $(CFLAGS) -c -o allexec-allexec.o `test -f 'allexec.c' || echo '$(srcdir)/'`allexec.c

allexec-allexec.obj: allexec.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allexec_CFLAGS) $(CFLAGS) -MT allexec-allexec.obj -MD -MP -MF $(DEPDIR)/allexec-allexec.Tpo -c -o allexec-allexec.obj `if test -f 'allexec.c'; then $(CYGPATH_W) 'allexec.c'; else $(CYGPATH_W) '$(srcdir)/allexec.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/allexec-allexec.Tpo $(DEPDIR)/allexec-allexec.Po
#	$(AM_V_CC)source='allexec.c' object='allexec-allexec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allexec_CFLAGS) $(CFLAGS) -c -o allexec-allexec.obj `if test -f 'allexec.c'; then $(CYGPATH_W) 'allexec.c'; else $(CYGPATH_W) '$(srcdir)/allexec.c'; fi`

jm_insns-jm-insns.o: jm-insns.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(jm_insns_CFLAGS) $(CFLAGS) -MT jm_insns-jm-insns.o -MD -MP -MF $(DEPDIR)/jm_insns-jm-insns.Tpo -c -o jm_insns-jm-insns.o `test -f 'jm-insns.c' || echo '$(srcdir)/'`jm-insns.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/jm_insns-jm-insns.Tpo $(DEPDIR)/jm_insns-jm-insns.Po
#	$(AM_V_CC)source='jm-insns.c' object='jm_insns-jm-insns.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(jm_insns_CFLAGS) $(CFLAGS) -c -o jm_insns-jm-insns.o `test -f 'jm-insns.c' || echo '$(srcdir)/'`jm-insns.c

jm_insns-jm-insns.obj: jm-insns.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(jm_insns_CFLAGS) $(CFLAGS) -MT jm_insns-jm-insns.obj -MD -MP -MF $(DEPDIR)/jm_insns-jm-insns.Tpo -c -o jm_insns-jm-insns.obj `if test -f 'jm-insns.c'; then $(CYGPATH_W) 'jm-insns.c'; else $(CYGPATH_W) '$(srcdir)/jm-insns.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/jm_insns-jm-insns.Tpo $(DEPDIR)/jm_insns-jm-insns.Po
#	$(AM_V_CC)source='jm-insns.c' object='jm_insns-jm-insns.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(jm_insns_CFLAGS) $(CFLAGS) -c -o jm_insns-jm-insns.obj `if test -f 'jm-insns.c'; then $(CYGPATH_W) 'jm-insns.c'; else $(CYGPATH_W) '$(srcdir)/jm-insns.c'; fi`

testVMX-testVMX.o: testVMX.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(testVMX_CFLAGS) $(CFLAGS) -MT testVMX-testVMX.o -MD -MP -MF $(DEPDIR)/testVMX-testVMX.Tpo -c -o testVMX-testVMX.o `test -f 'testVMX.c' || echo '$(srcdir)/'`testVMX.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/testVMX-testVMX.Tpo $(DEPDIR)/testVMX-testVMX.Po
#	$(AM_V_CC)source='testVMX.c' object='testVMX-testVMX.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(testVMX_CFLAGS) $(CFLAGS) -c -o testVMX-testVMX.o `test -f 'testVMX.c' || echo '$(srcdir)/'`testVMX.c

testVMX-testVMX.obj: testVMX.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(testVMX_CFLAGS) $(CFLAGS) -MT testVMX-testVMX.obj -MD -MP -MF $(DEPDIR)/testVMX-testVMX.Tpo -c -o testVMX-testVMX.obj `if test -f 'testVMX.c'; then $(CYGPATH_W) 'testVMX.c'; else $(CYGPATH_W) '$(srcdir)/testVMX.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/testVMX-testVMX.Tpo $(DEPDIR)/testVMX-testVMX.Po
#	$(AM_V_CC)source='testVMX.c' object='testVMX-testVMX.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(testVMX_CFLAGS) $(CFLAGS) -c -o testVMX-testVMX.obj `if test -f 'testVMX.c'; then $(CYGPATH_W) 'testVMX.c'; else $(CYGPATH_W) '$(srcdir)/testVMX.c'; fi`

test_dfp1-test_dfp1.o: test_dfp1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp1_CFLAGS) $(CFLAGS) -MT test_dfp1-test_dfp1.o -MD -MP -MF $(DEPDIR)/test_dfp1-test_dfp1.Tpo -c -o test_dfp1-test_dfp1.o `test -f 'test_dfp1.c' || echo '$(srcdir)/'`test_dfp1.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp1-test_dfp1.Tpo $(DEPDIR)/test_dfp1-test_dfp1.Po
#	$(AM_V_CC)source='test_dfp1.c' object='test_dfp1-test_dfp1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp1_CFLAGS) $(CFLAGS) -c -o test_dfp1-test_dfp1.o `test -f 'test_dfp1.c' || echo '$(srcdir)/'`test_dfp1.c

test_dfp1-test_dfp1.obj: test_dfp1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp1_CFLAGS) $(CFLAGS) -MT test_dfp1-test_dfp1.obj -MD -MP -MF $(DEPDIR)/test_dfp1-test_dfp1.Tpo -c -o test_dfp1-test_dfp1.obj `if test -f 'test_dfp1.c'; then $(CYGPATH_W) 'test_dfp1.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp1.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp1-test_dfp1.Tpo $(DEPDIR)/test_dfp1-test_dfp1.Po
#	$(AM_V_CC)source='test_dfp1.c' object='test_dfp1-test_dfp1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp1_CFLAGS) $(CFLAGS) -c -o test_dfp1-test_dfp1.obj `if test -f 'test_dfp1.c'; then $(CYGPATH_W) 'test_dfp1.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp1.c'; fi`

test_dfp2-test_dfp2.o: test_dfp2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp2_CFLAGS) $(CFLAGS) -MT test_dfp2-test_dfp2.o -MD -MP -MF $(DEPDIR)/test_dfp2-test_dfp2.Tpo -c -o test_dfp2-test_dfp2.o `test -f 'test_dfp2.c' || echo '$(srcdir)/'`test_dfp2.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp2-test_dfp2.Tpo $(DEPDIR)/test_dfp2-test_dfp2.Po
#	$(AM_V_CC)source='test_dfp2.c' object='test_dfp2-test_dfp2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp2_CFLAGS) $(CFLAGS) -c -o test_dfp2-test_dfp2.o `test -f 'test_dfp2.c' || echo '$(srcdir)/'`test_dfp2.c

test_dfp2-test_dfp2.obj: test_dfp2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp2_CFLAGS) $(CFLAGS) -MT test_dfp2-test_dfp2.obj -MD -MP -MF $(DEPDIR)/test_dfp2-test_dfp2.Tpo -c -o test_dfp2-test_dfp2.obj `if test -f 'test_dfp2.c'; then $(CYGPATH_W) 'test_dfp2.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp2.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp2-test_dfp2.Tpo $(DEPDIR)/test_dfp2-test_dfp2.Po
#	$(AM_V_CC)source='test_dfp2.c' object='test_dfp2-test_dfp2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp2_CFLAGS) $(CFLAGS) -c -o test_dfp2-test_dfp2.obj `if test -f 'test_dfp2.c'; then $(CYGPATH_W) 'test_dfp2.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp2.c'; fi`

test_dfp3-test_dfp3.o: test_dfp3.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp3_CFLAGS) $(CFLAGS) -MT test_dfp3-test_dfp3.o -MD -MP -MF $(DEPDIR)/test_dfp3-test_dfp3.Tpo -c -o test_dfp3-test_dfp3.o `test -f 'test_dfp3.c' || echo '$(srcdir)/'`test_dfp3.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp3-test_dfp3.Tpo $(DEPDIR)/test_dfp3-test_dfp3.Po
#	$(AM_V_CC)source='test_dfp3.c' object='test_dfp3-test_dfp3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp3_CFLAGS) $(CFLAGS) -c -o test_dfp3-test_dfp3.o `test -f 'test_dfp3.c' || echo '$(srcdir)/'`test_dfp3.c

test_dfp3-test_dfp3.obj: test_dfp3.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp3_CFLAGS) $(CFLAGS) -MT test_dfp3-test_dfp3.obj -MD -MP -MF $(DEPDIR)/test_dfp3-test_dfp3.Tpo -c -o test_dfp3-test_dfp3.obj `if test -f 'test_dfp3.c'; then $(CYGPATH_W) 'test_dfp3.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp3.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp3-test_dfp3.Tpo $(DEPDIR)/test_dfp3-test_dfp3.Po
#	$(AM_V_CC)source='test_dfp3.c' object='test_dfp3-test_dfp3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp3_CFLAGS) $(CFLAGS) -c -o test_dfp3-test_dfp3.obj `if test -f 'test_dfp3.c'; then $(CYGPATH_W) 'test_dfp3.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp3.c'; fi`

test_dfp4-test_dfp4.o: test_dfp4.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp4_CFLAGS) $(CFLAGS) -MT test_dfp4-test_dfp4.o -MD -MP -MF $(DEPDIR)/test_dfp4-test_dfp4.Tpo -c -o test_dfp4-test_dfp4.o `test -f 'test_dfp4.c' || echo '$(srcdir)/'`test_dfp4.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp4-test_dfp4.Tpo $(DEPDIR)/test_dfp4-test_dfp4.Po
#	$(AM_V_CC)source='test_dfp4.c' object='test_dfp4-test_dfp4.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp4_CFLAGS) $(CFLAGS) -c -o test_dfp4-test_dfp4.o `test -f 'test_dfp4.c' || echo '$(srcdir)/'`test_dfp4.c

test_dfp4-test_dfp4.obj: test_dfp4.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp4_CFLAGS) $(CFLAGS) -MT test_dfp4-test_dfp4.obj -MD -MP -MF $(DEPDIR)/test_dfp4-test_dfp4.Tpo -c -o test_dfp4-test_dfp4.obj `if test -f 'test_dfp4.c'; then $(CYGPATH_W) 'test_dfp4.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp4.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp4-test_dfp4.Tpo $(DEPDIR)/test_dfp4-test_dfp4.Po
#	$(AM_V_CC)source='test_dfp4.c' object='test_dfp4-test_dfp4.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp4_CFLAGS) $(CFLAGS) -c -o test_dfp4-test_dfp4.obj `if test -f 'test_dfp4.c'; then $(CYGPATH_W) 'test_dfp4.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp4.c'; fi`

test_dfp5-test_dfp5.o: test_dfp5.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp5_CFLAGS) $(CFLAGS) -MT test_dfp5-test_dfp5.o -MD -MP -MF $(DEPDIR)/test_dfp5-test_dfp5.Tpo -c -o test_dfp5-test_dfp5.o `test -f 'test_dfp5.c' || echo '$(srcdir)/'`test_dfp5.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp5-test_dfp5.Tpo $(DEPDIR)/test_dfp5-test_dfp5.Po
#	$(AM_V_CC)source='test_dfp5.c' object='test_dfp5-test_dfp5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp5_CFLAGS) $(CFLAGS) -c -o test_dfp5-test_dfp5.o `test -f 'test_dfp5.c' || echo '$(srcdir)/'`test_dfp5.c

test_dfp5-test_dfp5.obj: test_dfp5.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp5_CFLAGS) $(CFLAGS) -MT test_dfp5-test_dfp5.obj -MD -MP -MF $(DEPDIR)/test_dfp5-test_dfp5.Tpo -c -o test_dfp5-test_dfp5.obj `if test -f 'test_dfp5.c'; then $(CYGPATH_W) 'test_dfp5.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp5.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_dfp5-test_dfp5.Tpo $(DEPDIR)/test_dfp5-test_dfp5.Po
#	$(AM_V_CC)source='test_dfp5.c' object='test_dfp5-test_dfp5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_dfp5_CFLAGS) $(CFLAGS) -c -o test_dfp5-test_dfp5.obj `if test -f 'test_dfp5.c'; then $(CYGPATH_W) 'test_dfp5.c'; else $(CYGPATH_W) '$(srcdir)/test_dfp5.c'; fi`

test_isa_2_06_part1-test_isa_2_06_part1.o: test_isa_2_06_part1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part1-test_isa_2_06_part1.o -MD -MP -MF $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Tpo -c -o test_isa_2_06_part1-test_isa_2_06_part1.o `test -f 'test_isa_2_06_part1.c' || echo '$(srcdir)/'`test_isa_2_06_part1.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Tpo $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Po
#	$(AM_V_CC)source='test_isa_2_06_part1.c' object='test_isa_2_06_part1-test_isa_2_06_part1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part1-test_isa_2_06_part1.o `test -f 'test_isa_2_06_part1.c' || echo '$(srcdir)/'`test_isa_2_06_part1.c

test_isa_2_06_part1-test_isa_2_06_part1.obj: test_isa_2_06_part1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part1-test_isa_2_06_part1.obj -MD -MP -MF $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Tpo -c -o test_isa_2_06_part1-test_isa_2_06_part1.obj `if test -f 'test_isa_2_06_part1.c'; then $(CYGPATH_W) 'test_isa_2_06_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part1.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Tpo $(DEPDIR)/test_isa_2_06_part1-test_isa_2_06_part1.Po
#	$(AM_V_CC)source='test_isa_2_06_part1.c' object='test_isa_2_06_part1-test_isa_2_06_part1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part1-test_isa_2_06_part1.obj `if test -f 'test_isa_2_06_part1.c'; then $(CYGPATH_W) 'test_isa_2_06_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part1.c'; fi`

test_isa_2_06_part2-test_isa_2_06_part2.o: test_isa_2_06_part2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.o -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
#	$(AM_V_CC)source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.o `test -f 'test_isa_2_06_part2.c' || echo '$(srcdir)/'`test_isa_2_06_part2.c

test_isa_2_06_part2-test_isa_2_06_part2.obj: test_isa_2_06_part2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part2-test_isa_2_06_part2.obj -MD -MP -MF $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Tpo $(DEPDIR)/test_isa_2_06_part2-test_isa_2_06_part2.Po
#	$(AM_V_CC)source='test_isa_2_06_part2.c' object='test_isa_2_06_part2-test_isa_2_06_part2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part2-test_isa_2_06_part2.obj `if test -f 'test_isa_2_06_part2.c'; then $(CYGPATH_W) 'test_isa_2_06_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part2.c'; fi`

test_isa_2_06_part3-test_isa_2_06_part3.o: test_isa_2_06_part3.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part3_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part3-test_isa_2_06_part3.o -MD -MP -MF $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Tpo -c -o test_isa_2_06_part3-test_isa_2_06_part3.o `test -f 'test_isa_2_06_part3.c' || echo '$(srcdir)/'`test_isa_2_06_part3.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Tpo $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Po
#	$(AM_V_CC)source='test_isa_2_06_part3.c' object='test_isa_2_06_part3-test_isa_2_06_part3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part3_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part3-test_isa_2_06_part3.o `test -f 'test_isa_2_06_part3.c' || echo '$(srcdir)/'`test_isa_2_06_part3.c

test_isa_2_06_part3-test_isa_2_06_part3.obj: test_isa_2_06_part3.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part3_CFLAGS) $(CFLAGS) -MT test_isa_2_06_part3-test_isa_2_06_part3.obj -MD -MP -MF $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Tpo -c -o test_isa_2_06_part3-test_isa_2_06_part3.obj `if test -f 'test_isa_2_06_part3.c'; then $(CYGPATH_W) 'test_isa_2_06_part3.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part3.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Tpo $(DEPDIR)/test_isa_2_06_part3-test_isa_2_06_part3.Po
#	$(AM_V_CC)source='test_isa_2_06_part3.c' object='test_isa_2_06_part3-test_isa_2_06_part3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_06_part3_CFLAGS) $(CFLAGS) -c -o test_isa_2_06_part3-test_isa_2_06_part3.obj `if test -f 'test_isa_2_06_part3.c'; then $(CYGPATH_W) 'test_isa_2_06_part3.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_06_part3.c'; fi`

test_isa_2_07_part1-test_isa_2_07_part1.o: test_isa_2_07_part1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part1_CFLAGS) $(CFLAGS) -MT test_isa_2_07_part1-test_isa_2_07_part1.o -MD -MP -MF $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Tpo -c -o test_isa_2_07_part1-test_isa_2_07_part1.o `test -f 'test_isa_2_07_part1.c' || echo '$(srcdir)/'`test_isa_2_07_part1.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Tpo $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Po
#	$(AM_V_CC)source='test_isa_2_07_part1.c' object='test_isa_2_07_part1-test_isa_2_07_part1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_07_part1-test_isa_2_07_part1.o `test -f 'test_isa_2_07_part1.c' || echo '$(srcdir)/'`test_isa_2_07_part1.c

test_isa_2_07_part1-test_isa_2_07_part1.obj: test_isa_2_07_part1.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part1_CFLAGS) $(CFLAGS) -MT test_isa_2_07_part1-test_isa_2_07_part1.obj -MD -MP -MF $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Tpo -c -o test_isa_2_07_part1-test_isa_2_07_part1.obj `if test -f 'test_isa_2_07_part1.c'; then $(CYGPATH_W) 'test_isa_2_07_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_07_part1.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Tpo $(DEPDIR)/test_isa_2_07_part1-test_isa_2_07_part1.Po
#	$(AM_V_CC)source='test_isa_2_07_part1.c' object='test_isa_2_07_part1-test_isa_2_07_part1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part1_CFLAGS) $(CFLAGS) -c -o test_isa_2_07_part1-test_isa_2_07_part1.obj `if test -f 'test_isa_2_07_part1.c'; then $(CYGPATH_W) 'test_isa_2_07_part1.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_07_part1.c'; fi`

test_isa_2_07_part2-test_isa_2_07_part2.o: test_isa_2_07_part2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_07_part2-test_isa_2_07_part2.o -MD -MP -MF $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Tpo -c -o test_isa_2_07_part2-test_isa_2_07_part2.o `test -f 'test_isa_2_07_part2.c' || echo '$(srcdir)/'`test_isa_2_07_part2.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Tpo $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Po
#	$(AM_V_CC)source='test_isa_2_07_part2.c' object='test_isa_2_07_part2-test_isa_2_07_part2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_07_part2-test_isa_2_07_part2.o `test -f 'test_isa_2_07_part2.c' || echo '$(srcdir)/'`test_isa_2_07_part2.c

test_isa_2_07_part2-test_isa_2_07_part2.obj: test_isa_2_07_part2.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part2_CFLAGS) $(CFLAGS) -MT test_isa_2_07_part2-test_isa_2_07_part2.obj -MD -MP -MF $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Tpo -c -o test_isa_2_07_part2-test_isa_2_07_part2.obj `if test -f 'test_isa_2_07_part2.c'; then $(CYGPATH_W) 'test_isa_2_07_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_07_part2.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Tpo $(DEPDIR)/test_isa_2_07_part2-test_isa_2_07_part2.Po
#	$(AM_V_CC)source='test_isa_2_07_part2.c' object='test_isa_2_07_part2-test_isa_2_07_part2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_isa_2_07_part2_CFLAGS) $(CFLAGS) -c -o test_isa_2_07_part2-test_isa_2_07_part2.obj `if test -f 'test_isa_2_07_part2.c'; then $(CYGPATH_W) 'test_isa_2_07_part2.c'; else $(CYGPATH_W) '$(srcdir)/test_isa_2_07_part2.c'; fi`

test_tm-test_tm.o: test_tm.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_tm_CFLAGS) $(CFLAGS) -MT test_tm-test_tm.o -MD -MP -MF $(DEPDIR)/test_tm-test_tm.Tpo -c -o test_tm-test_tm.o `test -f 'test_tm.c' || echo '$(srcdir)/'`test_tm.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_tm-test_tm.Tpo $(DEPDIR)/test_tm-test_tm.Po
#	$(AM_V_CC)source='test_tm.c' object='test_tm-test_tm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_tm_CFLAGS) $(CFLAGS) -c -o test_tm-test_tm.o `test -f 'test_tm.c' || echo '$(srcdir)/'`test_tm.c

test_tm-test_tm.obj: test_tm.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_tm_CFLAGS) $(CFLAGS) -MT test_tm-test_tm.obj -MD -MP -MF $(DEPDIR)/test_tm-test_tm.Tpo -c -o test_tm-test_tm.obj `if test -f 'test_tm.c'; then $(CYGPATH_W) 'test_tm.c'; else $(CYGPATH_W) '$(srcdir)/test_tm.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_tm-test_tm.Tpo $(DEPDIR)/test_tm-test_tm.Po
#	$(AM_V_CC)source='test_tm.c' object='test_tm-test_tm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_tm_CFLAGS) $(CFLAGS) -c -o test_tm-test_tm.obj `if test -f 'test_tm.c'; then $(CYGPATH_W) 'test_tm.c'; else $(CYGPATH_W) '$(srcdir)/test_tm.c'; fi`

test_touch_tm-test_touch_tm.o: test_touch_tm.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_touch_tm_CFLAGS) $(CFLAGS) -MT test_touch_tm-test_touch_tm.o -MD -MP -MF $(DEPDIR)/test_touch_tm-test_touch_tm.Tpo -c -o test_touch_tm-test_touch_tm.o `test -f 'test_touch_tm.c' || echo '$(srcdir)/'`test_touch_tm.c
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_touch_tm-test_touch_tm.Tpo $(DEPDIR)/test_touch_tm-test_touch_tm.Po
#	$(AM_V_CC)source='test_touch_tm.c' object='test_touch_tm-test_touch_tm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_touch_tm_CFLAGS) $(CFLAGS) -c -o test_touch_tm-test_touch_tm.o `test -f 'test_touch_tm.c' || echo '$(srcdir)/'`test_touch_tm.c

test_touch_tm-test_touch_tm.obj: test_touch_tm.c
	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_touch_tm_CFLAGS) $(CFLAGS) -MT test_touch_tm-test_touch_tm.obj -MD -MP -MF $(DEPDIR)/test_touch_tm-test_touch_tm.Tpo -c -o test_touch_tm-test_touch_tm.obj `if test -f 'test_touch_tm.c'; then $(CYGPATH_W) 'test_touch_tm.c'; else $(CYGPATH_W) '$(srcdir)/test_touch_tm.c'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/test_touch_tm-test_touch_tm.Tpo $(DEPDIR)/test_touch_tm-test_touch_tm.Po
#	$(AM_V_CC)source='test_touch_tm.c' object='test_touch_tm-test_touch_tm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_touch_tm_CFLAGS) $(CFLAGS) -c -o test_touch_tm-test_touch_tm.obj `if test -f 'test_touch_tm.c'; then $(CYGPATH_W) 'test_touch_tm.c'; else $(CYGPATH_W) '$(srcdir)/test_touch_tm.c'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile $(SCRIPTS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am check-local clean \
	clean-checkPROGRAMS clean-generic clean-local cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am


# This used to be required when Vex had a handwritten Makefile.  It
# shouldn't be needed any more, though.

#----------------------------------------------------------------------------
# noinst_PROGRAMS and noinst_DSYMS targets
#----------------------------------------------------------------------------

# On Darwin, for a program 'p', the DWARF debug info is stored in the
# directory 'p.dSYM'.  This must be generated after the executable is
# created, with 'dsymutil p'.  We could redefine LINK with a script that
# executes 'dsymutil' after linking, but that's a pain.  Instead we use this
# hook so that every time "make check" is run, we subsequently invoke
# 'dsymutil' on all the executables that lack a .dSYM directory, or that are
# newer than their corresponding .dSYM directory.
build-noinst_DSYMS: $(noinst_DSYMS)
	for f in $(noinst_DSYMS); do \
	  if [ ! -e $$f.dSYM  -o  $$f -nt $$f.dSYM ] ; then \
	      echo "dsymutil $$f"; \
	      dsymutil $$f; \
	  fi; \
	done

# This is used by coregrind/Makefile.am and Makefile.tool.am for doing
# "in-place" installs.  It copies $(noinst_PROGRAMS) into $inplacedir.
# It needs to be depended on by an 'all-local' rule.
inplace-noinst_PROGRAMS: $(noinst_PROGRAMS)
	mkdir -p $(inplacedir); \
	for f in $(noinst_PROGRAMS) ; do \
	  rm -f $(inplacedir)/$$f; \
	  ln -f -s ../$(subdir)/$$f $(inplacedir); \
	done

# Similar to inplace-noinst_PROGRAMS
inplace-noinst_DSYMS: build-noinst_DSYMS
	mkdir -p $(inplacedir); \
	for f in $(noinst_DSYMS); do \
	  rm -f $(inplacedir)/$$f.dSYM; \
	  ln -f -s ../$(subdir)/$$f.dSYM $(inplacedir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make install".  It copies $(noinst_PROGRAMS) into $prefix/lib/valgrind/.
# It needs to be depended on by an 'install-exec-local' rule.
install-noinst_PROGRAMS: $(noinst_PROGRAMS)
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_PROGRAMS); do \
	  $(INSTALL_PROGRAM) $$f $(DESTDIR)$(pkglibdir); \
	done

# This is used by coregrind/Makefile.am and by <tool>/Makefile.am for doing
# "make uninstall".  It removes $(noinst_PROGRAMS) from $prefix/lib/valgrind/.
# It needs to be depended on by an 'uninstall-local' rule.
uninstall-noinst_PROGRAMS:
	for f in $(noinst_PROGRAMS); do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$f; \
	done

# Similar to install-noinst_PROGRAMS.
# Nb: we don't use $(INSTALL_PROGRAM) here because it doesn't work with
# directories.  XXX: not sure whether the resulting permissions will be
# correct when using 'cp -R'...
install-noinst_DSYMS: build-noinst_DSYMS
	$(mkinstalldirs) $(DESTDIR)$(pkglibdir); \
	for f in $(noinst_DSYMS); do \
	  cp -R $$f.dSYM $(DESTDIR)$(pkglibdir); \
	done

# Similar to uninstall-noinst_PROGRAMS.
uninstall-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$f.dSYM; \
	done

# This needs to be depended on by a 'clean-local' rule.
clean-noinst_DSYMS:
	for f in $(noinst_DSYMS); do \
	  rm -rf $$f.dSYM; \
	done

check-local: build-noinst_DSYMS

clean-local: clean-noinst_DSYMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
