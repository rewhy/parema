//do_libart_wrapper.c

#include "pub_tool_basics.h"
#include "pub_tool_poolalloc.h"
#include "pub_tool_hashtable.h"
#include "pub_tool_redir.h"
#include "pub_tool_tooliface.h"
#include "pub_tool_clreq.h"

#include "util.h"

#define  FZ_Z_LIBART_SONAME  libartZdsoZa              // libart.so*
#define LIBART_FUNC(ret_ty, f, args...) \
	ret_ty I_WRAP_SONAME_FNNAME_ZU(FZ_Z_LIBART_SONAME,f)(args); \
ret_ty I_WRAP_SONAME_FNNAME_ZU(FZ_Z_LIBART_SONAME,f)(args)


/* std::string layout: 
 * UInt xxx
 * UInt len
 * char *pStr
 */

#if 1
// bool JavaVMExt::LoadNativeLibrary(JNIEnv* env, const std::string& path, jobject class_loader,
//                                 std::string* error_msg);
Bool JavaVMExt_LoadNativeLibrary(void *this, void *env, char* path, void* class_loader, char* error_msg)
{
	OrigFn fn;
	Bool res;
	DO_CREQ_v_WW(VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY_PRE, char*, path, void*, class_loader);
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_5W(res, fn, this, env, path, class_loader, error_msg);
	if(res)
		DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_LOADNATIVELIBRARY, void*, this, char*, path, void*, class_loader);
	return res;
}
// _ZN3art9JavaVMExt17LoadNativeLibraryEP7_JNIEnvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP8_jobjectPS9
LIBART_FUNC(Bool, _ZN3art9JavaVMExt17LoadNativeLibraryEP7_JNIEnvRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP8_jobjectPS9_,
		void *this, void *env, char* path, void* class_loader, char* error_msg)
{
	return JavaVMExt_LoadNativeLibrary(this, env, path, class_loader, error_msg);
}
#endif
// std::unique_ptr<const DexFile> DexFile::OpenMemory(const uint8_t* base,
//                                                    size_t size,
//                                                    const std::string& location,
//                                                    uint32_t location_checksum,
//                                                    MemMap* mem_map,
//                                                    const OatDexFile* oat_dex_file,
//                                                    std::string* error_msg)
void* DexFile_OpenMemory(void *this, const unsigned char* base, int size, void* location, int location_checksum, void *mem_map, void* oat_dex_file, void* error_msg)
{
	OrigFn fn;
	void* res = NULL;
	VALGRIND_GET_ORIG_FN(fn);
	// DO_CREQ_v_WW(VG_USERREQ__WRAPPER_ART_OPENMEMORY_PRE, void*, location, void*, mem_map);
	CALL_FN_W_8W(res, fn, this, base, size, location, location_checksum, mem_map, oat_dex_file, error_msg);
	if(res)
		DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_OPENMEMORY, void*, res, void*, location, void*, mem_map);
	return res;
}
LIBART_FUNC(void*, _ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_,
		void* this, const unsigned char* base, int size, void* location, int location_checksum, void *mem_map, void *oat_dex_file, void *error_msg)
{
	return DexFile_OpenMemory(this, base, size, location, location_checksum, mem_map, oat_dex_file, error_msg);
}

// DexFile::DexFile(const uint8_t* base, size_t size,
//                 const std::string& location,
//                  uint32_t location_checksum,
//                  MemMap* mem_map,
//                 const OatDexFile* oat_dex_file)
// 
void* DexFile_DexFile(void *this, void *base, int size, void* location, int checksum, void* mem_map, void* oat_dex_file)
{
	OrigFn fn;
	void* res = NULL;
	//DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_DEXFILE_PRE, void*, mem_map, char*, base, int, size, char*, (char*)(*((unsigned int*)location+2)));
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_7W(res, fn, this, base, size, location, checksum, mem_map, oat_dex_file);
	if(res)
		DO_CREQ_v_WWWWW(VG_USERREQ__WRAPPER_ART_DEXFILE, Addr, (Addr)this, char*, base, int, size, void*, location,	void*, mem_map);
	return res;
}

// _ZN3art7DexFileC2EPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileE
LIBART_FUNC(void*, _ZN3art7DexFileC2EPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileE,
		void* this, void* base, int size, void* location, int checksum, void* mem_map, void* oat_dex_file)
{
	return DexFile_DexFile(this, base, size, location, checksum, mem_map, oat_dex_file);
}
// mirror::Class* ClassLinker::DefineClass(Thread* self, const char* descriptor, size_t hash,
//       Handle<mirror::ClassLoader> class_loader,
//       const DexFile& dex_file,
//       const DexFile::ClassDef& dex_class_def);
void* ClassLinker_DefineClass(void* this, void* thread,void* descriptor, int hash, void* class_loader, void* dex_file, void* dex_class_def)
{
	OrigFn fn;
	void* res;
	//DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_DEFINECLASS_PRE, char*, descriptor, void*, dex_file, void*, dex_class_def);
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_7W(res, fn, this, thread, descriptor, hash, class_loader, dex_file, dex_class_def);
	DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_DEFINECLASS, char*, descriptor, void*, dex_file, void*, dex_class_def);
	return res;
}
// _ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE
LIBART_FUNC(void*,  _ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcjNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE,
		void* this, void *thread, void* descriptor, int hash, void* class_loader, void* dex_file, void* dex_class_def)
{
	return ClassLinker_DefineClass(this, thread, descriptor, hash, class_loader, dex_file, dex_class_def);
}

// void ArtMethod::Invoke(Thread* self, uint32_t* args, uint32_t args_size, JValue* result,
//                       const char* shorty)
void ArtMethod_Invoke(void* this, void* thread, unsigned int* args, unsigned int args_size, void* result, HChar* shorty)
{
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	//DO_CREQ_v_WWWWW(VG_USERREQ__WRAPPER_ART_INVOKE_PRE, void*, this, void*, thread, unsigned int*, args, unsigned int, args_size, char*, shorty);
	//DO_CREQ_v_W(VG_USERREQ__WRAPPER_ART_INVOKE_PRE, Addr, (Addr)this);
	CALL_FN_v_6W(fn, this, thread, args, args_size, result, shorty);
	DO_CREQ_v_W(VG_USERREQ__WRAPPER_ART_INVOKE, Addr, (Addr)this);
	//DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_INVOKE, void*, this, void*, thread, void*, result, char*, shorty);
}
LIBART_FUNC(void,  _ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc,
		void* this, void* thread, unsigned int* args, unsigned int args_size, void* result, HChar* shorty)
{
	ArtMethod_Invoke(this, thread, args, args_size, result, shorty);
}
#if 0
// static JniValueType CallMethodV(const char* function_name, JNIEnv* env, jobject obj, jclass c,
// 	                                  jmethodID mid, va_list vargs, Primitive::Type type,
//	                                  InvokeType invoke)
void CheckJNI_CallMethodV(const HChar* function_name, void* env, void* obj, void* c, void* mid, void* vargs, 
		int type,	int invoke)
{
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_8W(fn, function_name, env, obj, c, mid, vargs, type, invoke);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_CALLMETHODV, HChar*, function_name, void*, mid, int, type, int, invoke);
}
							 // _ZN3art8CheckJNI11CallMethodVEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDSt9__va_listNS_9Primitive4TypeENS_10InvokeTypeE
							 // _ZN3art8CheckJNI11CallMethodVEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDSt9__va_listNS_9Primitive4TypeENS_10InvokeTypeE
LIBART_FUNC(void, _ZN3art8CheckJNI11CallMethodVEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDSt9__va_listNS_9Primitive4TypeENS_10InvokeTypeE,
		HChar* function_name, void* env, void* obj, void* c, void* mid, void* vargs, int type, int invoke)
{
	CheckJNI_CallMethodV(function_name, env, obj, c, mid, vargs, type, invoke);
}

// static JniValueType CallMethodA(const char* function_name, JNIEnv* env, jobject obj, jclass c,
//                                    jmethodID mid, jvalue* vargs, Primitive::Type type,
//                                    InvokeType invoke) {
void CheckJNI_CallMethodA(const HChar* function_name, void* env, void* obj, void* c, void* mid, void* vargs, 
		int type,	int invoke)
{
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_8W(fn, function_name, env, obj, c, mid, vargs, type, invoke);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_CALLMETHODA, HChar*, function_name, void*, mid, int, type, int, invoke);
}
               // _ZN3art8CheckJNI11CallMethodAEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDP6jvalueNS_9Primitive4TypeENS_10InvokeTypeE
							 // _ZN3art8CheckJNI11CallMethodAEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDP6jvalueNS_9Primitive4TypeENS_10InvokeTypeE
LIBART_FUNC(void,	_ZN3art8CheckJNI11CallMethodAEPKcP7_JNIEnvP8_jobjectP7_jclassP10_jmethodIDP6jvalueNS_9Primitive4TypeENS_10InvokeTypeE,
	HChar* function_name, void* env, void* obj, void* c, void* mid, void* vargs, int type, int invoke)
{
	CheckJNI_CallMethodA(function_name, env, obj, c, mid, vargs, type, invoke);
}
#endif
/*
 3497		CheckJNI::CallStaticObjectMethod,
 3498   CheckJNI::CallStaticObjectMethodV,
 3499   CheckJNI::CallStaticObjectMethodA,
 3500   CheckJNI::CallStaticBooleanMethod,
 3501   CheckJNI::CallStaticBooleanMethodV,
 3502   CheckJNI::CallStaticBooleanMethodA,
 3503   CheckJNI::CallStaticByteMethod,
 3504   CheckJNI::CallStaticByteMethodV,
 3505   CheckJNI::CallStaticByteMethodA,
 3506   CheckJNI::CallStaticCharMethod,
 3507   CheckJNI::CallStaticCharMethodV,
 3508   CheckJNI::CallStaticCharMethodA,
 3509   CheckJNI::CallStaticShortMethod,
 3510   CheckJNI::CallStaticShortMethodV,
 3511   CheckJNI::CallStaticShortMethodA,
 3512   CheckJNI::CallStaticIntMethod,
 3513   CheckJNI::CallStaticIntMethodV,
 3514   CheckJNI::CallStaticIntMethodA,
 3515   CheckJNI::CallStaticLongMethod,
 3516   CheckJNI::CallStaticLongMethodV,
 3517   CheckJNI::CallStaticLongMethodA,
 3518   CheckJNI::CallStaticFloatMethod,
 3519   CheckJNI::CallStaticFloatMethodV,
 3520   CheckJNI::CallStaticFloatMethodA,
 3521   CheckJNI::CallStaticDoubleMethod,
 3522   CheckJNI::CallStaticDoubleMethodV,
 3523   CheckJNI::CallStaticDoubleMethodA,
 3524   CheckJNI::CallStaticVoidMethod,
 3525   CheckJNI::CallStaticVoidMethodV,
 3526   CheckJNI::CallStaticVoidMethodA,
 */
//
//jobject InvokeMethod(const ScopedObjectAccessAlreadyRunnable& soa, jobject javaMethod, jobject javaReceiver, jobject javaArgs, size_t num_frames)
void* art_InvokeMethod(const void* soa, void* javaMethod, void* javaReceiver, void* javaArgs, int num_frames)
{
	OrigFn fn;
	void* res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_5W(res, fn, soa, javaMethod, javaReceiver, javaArgs, num_frames);
	DO_CREQ_v_WWWWW(VG_USERREQ__WRAPPER_ART_INVOKEMETHOD, void*, soa, void*, javaMethod, void*, javaReceiver, void*, javaArgs, int, num_frames);
	return res;
}
LIBART_FUNC(void*, _ZN3art12InvokeMethodERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectS4_S4_j,
		void* soa, void* javaMethod, void* javaReceiver, void* javaArgs, int num_frames)
{
	return art_InvokeMethod(soa, javaMethod, javaReceiver, javaArgs, num_frames);
}

//void InvokeWithArgArray(const ScopedObjectAccessAlreadyRunnable& soa,
//	ArtMethod* method, ArgArray* arg_array, JValue* result, const char* shorty)
void art_InvokeWithArgArray(const void* soa, void* method, void* arg_array, void* result, const char* shorty)
{
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_5W(fn, soa, method, arg_array, result, shorty);
	DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_INVOKEWITHARGARRAY, void*, method, void*, result, void*, shorty);
}
               // _ZN3art18InvokeWithArgArrayERKNS_33ScopedObjectAccessAlreadyRunnableEPNS_9ArtMethodEPNS_8ArgArrayEPNS_6JValueEPKc
LIBART_FUNC(void, _ZN3art18InvokeWithArgArrayERKNS_33ScopedObjectAccessAlreadyRunnableEPNS_9ArtMethodEPNS_8ArgArrayEPNS_6JValueEPKc,
		void* soa, void* method, void* arg_array, void* result, char* shorty)
{
	art_InvokeWithArgArray(soa, method, arg_array, result, shorty);
}
#if 0
//JValue InvokeWithVarArgs(const ScopedObjectAccessAlreadyRunnable& soa, jobject obj, jmethodID mid, va_list args);
void* art_InvokeWithVarArgs(const void* soa, void* obj, void* mid, void* args)
{
	OrigFn fn;
	ULong res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, soa, obj, mid, args);
	//DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_INVOKEWITHVARARGS, void*, soa, void*, obj, void*, mid, void*, args);
	return res;
}
LIBART_FUNC(void*, _ZN3art17InvokeWithVarArgsERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectP10_jmethodIDSt9__va_list,
		void* soa, void* obj, void* mid, void* args)
{
	return art_InvokeWithVarArgs(soa, obj, mid, args);
}
//
//JValue InvokeWithJValues(const ScopedObjectAccessAlreadyRunnable& soa, jobject obj, jmethodID mid, jvalue* args);
void* art_InvokeWithJValues(const void* soa, void* obj, void* mid, void* args)
{
	OrigFn fn;
	void* res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, soa, obj, mid, args);
	//DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_INVOKEWITHJVALUES, void*, soa, void*, obj, void*, mid, void*, args);
	return res;
}
LIBART_FUNC(void*, _ZN3art17InvokeWithJValuesERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectP10_jmethodIDP6jvalue,
		void* soa, void* obj, void* mid, void* args)
{
	return art_InvokeWithJValues(soa, obj, mid, args);
}
//
//JValue InvokeVirtualOrInterfaceWithJValues(const ScopedObjectAccessAlreadyRunnable& soa, jobject obj, jmethodID mid, jvalue* args)
void* art_InvokeVirtualOrInterfaceWithJValues(const void* soa, void* obj, void* mid, void* args)
{
	OrigFn fn;
	void* res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, soa, obj, mid, args);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_INVOKEVIRTUALORINTERFACEWITHJVALUES, void*, soa, void*, obj, void*, mid, void*, args);
	return res;
}
LIBART_FUNC(void*, _ZN3art35InvokeVirtualOrInterfaceWithJValuesERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectP10_jmethodIDP6jvalue,
		void* soa, void* obj, void* mid, void* args)
{
	return art_InvokeVirtualOrInterfaceWithJValues(soa, obj, mid, args);
}
//
//JValue InvokeVirtualOrInterfaceWithVarArgs(const ScopedObjectAccessAlreadyRunnable& soa, jobject obj, jmethodID mid, va_list args)
void* art_InvokeVirtualOrInterfaceWithVarArgs(const void* soa, void* obj, void* mid, void* args)
{
	OrigFn fn;
	void* res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, soa, obj, mid, args);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_INVOKEVIRTUALORINTERFACEWITHVARARGS, void*, soa, void*, obj, void*, mid, void*, args);
	return res;
}
LIBART_FUNC(void*, _ZN3art35InvokeVirtualOrInterfaceWithVarArgsERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectP10_jmethodIDSt9__va_list,
		void* soa, void* obj, void* mid, void* args)
{
	return art_InvokeVirtualOrInterfaceWithVarArgs(soa, obj, mid, args);
}
#endif

// static jclass FindClass(JNIEnv* env, const char* name)
void* jni_FindClass(void* env, const char* name)
{
	OrigFn fn;
	void* res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WW(res, fn, env, name);
	DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_JNIFINDCLASS, void*, env, char*, name, void*, res);
	return res;
}
LIBART_FUNC(void*,_ZN3art3JNI9FindClassEP7_JNIEnvPKc, 
		void* env, char* name)
{
	return jni_FindClass(env, name);
}

// static jmethodID GetMethodID(JNIEnv* env, jclass java_class, const char* name, const char* sig)
int jni_GetMethodID(void* env, void* java_class, const char* name, const char* sig)
{
	OrigFn fn;
	int res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, env, java_class, name, sig);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_JNIGETMETHODID, void*, java_class, char*, name, char*, sig, int, res);
	return res;
}
LIBART_FUNC(int, _ZN3art3JNI11GetMethodIDEP7_JNIEnvP7_jclassPKcS6_,
		void* env, void* java_class, char* name, char* sig)
{
	return jni_GetMethodID(env, java_class, name, sig);
}
//
// static jmethodID GetStaticMethodID(JNIEnv* env, jclass java_class, const char* name, const char* sig)
int jni_GetStaticMethodID(void* env, void* java_class, const char* name, const char* sig)
{
	OrigFn fn;
	int res;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_W_WWWW(res, fn, env, java_class, name, sig);
	DO_CREQ_v_WWWW(VG_USERREQ__WRAPPER_ART_JNIGETSTATICMETHODID, void*, java_class, char*, name, char*, sig, int, res);
	return res;
}
LIBART_FUNC(int, _ZN3art3JNI17GetStaticMethodIDEP7_JNIEnvP7_jclassPKcS6_,
		void* env, void* java_class, char* name, char* sig)
{
	return jni_GetMethodID(env, java_class, name, sig);
}
#if 0
// void ClassLinker::LoadMethod(Thread* self, const DexFile& dex_file, const ClassDataItemIterator& it, Handle<mirror::Class> klass, ArtMethod* dst)
void ClassLinker_LoadMethod(void* thread, void* dex_file, void* it, void* klass, void* dst)
{
	OrignFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_WWWW(fn, thread, dex_file, it, klass, dst);
	DO_CREQ_v_WW(VG_USERREQ__WRAPPER_CLASSLINKER_LOADMETHOD, void*, klass, void*, dst);
}
LIBART_FUNC(void, _ZN3art11ClassLinker10LoadMethodEPNS_6ThreadERKNS_7DexFileERKNS_21ClassDataItemIteratorENS_6HandleINS_6mirror5ClassEEEPNS_9ArtMethodE,
		void* thread, void* dexfile, void* it, void* klass, void* dst)
{
	ClassLinker_LoadMethod(thread, dexfile, it, klass, dst);
}
#endif
// void ClassLinker::LinkCode(ArtMethod* method, const OatFile::OatClass* oat_class,uint32_t class_def_method_index)
void ClassLinker_LinkCode(void *this, void* method, void* oat_class, int class_def_method_index)
{
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_WWWW(fn, this, method, oat_class, class_def_method_index);
	DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_CLASSLINKER_LINKCODE, void*, method, void*, oat_class, int, class_def_method_index);
}
LIBART_FUNC(void, _ZN3art11ClassLinker8LinkCodeEPNS_9ArtMethodEPKNS_7OatFile8OatClassEj,
		void* this, void* method, void* oat_class, int class_def_method_index)
{
	ClassLinker_LinkCode(this, method, oat_class, class_def_method_index);
}

// extern "C" void artInterpreterToCompiledCodeBridge(Thread* self, const DexFile::CodeItem* code_item, ShadowFrame* shadow_frame, JValue* result)
// artInterpreterToInterpreterBridge

void ArtMethod_RegisterNative(const void* this, const void* native_method, Int is_fast){
	OrigFn fn;
	VALGRIND_GET_ORIG_FN(fn);
	CALL_FN_v_WWW(fn, this, native_method, is_fast);
	DO_CREQ_v_WWW(VG_USERREQ__WRAPPER_ART_REGISTERNATIVE, void*, this, void*, native_method, Int, is_fast);
}
//  void ArtMethod::RegisterNative(const void* native_method, bool is_fast)
LIBART_FUNC(void, _ZN3art9ArtMethod14RegisterNativeEPKvb,
		const void *this, const void *native_method, Int is_fast)
{
	ArtMethod_RegisterNative(this, native_method, is_fast);
}
//
